* Welcome To Emacs!!
  最新版の emacs github mirror.
  - https://github.com/mirrors/emacs

  人気パッケージダウンロードランキング!!
  - http://melpa.org

* Functions
** フォルダを再帰的にロードパスに追加
   Special Thanks
   - http://e-arrows.sakura.ne.jp/2010/03/macros-in-emacs-el.html

#+begin_src emacs-lisp
;; @ load-path
;; for Emacs 23 under
(when (> emacs-major-version 23)
  (defvar user-emacs-directory "~/.emacs.d"))

;; load-path の追加関数
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))
;; load-path に追加するフォルダ
;; 2 つ以上フォルダを指定する場合の引数 => (add-to-load-path "elisp" "xxx" "xxx")
(add-to-load-path "elisp" "inits" "el-get" "elpa" "local")
#+end_src
** Dired でカレントディレクトリを取得
  - [[http://d.hatena.ne.jp/syohex/20111026/1319606395][cde を改良 - Life is very short]]

#+begin_src emacs-lisp
;; .emacs 等設定ファイルに追加
(defun elscreen-current-directory ()
  (let* (current-dir
         (active-file-name
          (with-current-buffer
              (let* ((current-screen (car (elscreen-get-conf-list 'screen-history)))
                     (property (cadr (assoc current-screen
                                            (elscreen-get-conf-list 'screen-property)))))
                (marker-buffer (nth 2 property)))
            (progn
              (setq current-dir (expand-file-name (cadr (split-string (pwd)))))
              (buffer-file-name)))))
    (if active-file-name
        (file-name-directory active-file-name)
      current-dir)))

(defun non-elscreen-current-directory ()
  (let* (current-dir
         (current-buffer
          (nth 1 (assoc 'buffer-list
                        (nth 1 (nth 1 (current-frame-configuration))))))
         (active-file-name
          (with-current-buffer current-buffer
            (progn
              (setq current-dir (expand-file-name (cadr (split-string (pwd)))))
              (buffer-file-name)))))
    (if active-file-name
        (file-name-directory active-file-name)
      current-dir)))
#+end_src

* Macros
  Special Thanks
  - http://e-arrows.sakura.ne.jp/2010/03/macros-in-emacs-el.html

#+begin_src emacs-lisp
;;  add-hook を簡潔に
(defmacro add-hook-fn (name &rest body)
    `(add-hook ,name #'(lambda () ,@body)))

;; global-set-key も簡潔に
(defmacro global-set-key-fn (key args &rest body)
  `(global-set-key ,key (lambda ,args ,@body)))

;;  複数の要素をリストに追加
(defmacro append-to-list (to lst)
  `(setq ,to (append ,lst ,to)))
#+end_src

** use-package
   autoload/eval-after-load の記述を簡潔に書くための elisp.
   - https://github.com/jwiegley/use-package

   記述方法は以下の記事がとても詳しい. ここでは省略.
   - [[http://qiita.com/kai2nenobu/items/5dfae3767514584f5220][Emacs - use-package で可読性の高い init.el を書く - Qiita]]
   - [[http://rubikitch.com/2014/09/09/use-package/][emacs use-package.el : Emacs の世界的権威が行っている最先端ラクラク init.el 整理術]]

#+begin_src emacs-lisp
(package-initialize)

;; use-package が存在しないときはなにもしない
(unless (require 'use-package nil t)
  (defmacro use-package (&rest args)))
#+end_src

*** パッケージが存在しないとき
   もしパッケージが存在しないときは, 以下のようなメッセージが吐かれる.

   Could not load package hoge

   *Message* バッファを検索して, エラーがないかチェックする.
* General Settings
** savehist
   minibuffer の履歴保存

#+begin_src emacs-lisp
(use-package savehist
  :config
  (savehist-mode t)
  (setq savehist-additional-variables 
  '(kill-ring search-ring regexp-search-ring)))
#+end_src

** generic-x
   いろんなメジャーモード

#+begin_src emacs-lisp
(use-package generic-x)
#+end_src

** Variable binding depth exceeds max-specpdl-size error
   以下の行を追加.
   - [[http://d.hatena.ne.jp/a666666/20100221/1266695355][Variable binding depth exceeds max-specpdl-size エラー]]

#+begin_src emacs-lisp
(setq max-specpdl-size 6000)
#+end_src

** 自動閉じ括弧挿入

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

** goto どっかにとんでいく処理
   M-g の 仕様 (24.4)   goto-map は M-g にバインドされている.
   - TAB: move-to-column
   - p: previous-error
   - n: next-error
   - g: goto-line
   - c: goto-char

   参考:
   - [[http://g000001.cddddr.org/3628335601][#:g1: M-g を活用しよう]]

#+begin_src emacs-lisp
(define-key goto-map [?b] #'browse-url-at-point)
#+end_src

* Key Bindings
** Global Keys
   よくわすれる, C や M の意味.
   - [[http://www.emacswiki.org/emacs/Emacs%e3%83%93%e3%82%ae%e3%83%8a%e3%83%bc#toc9][EmacsWiki: Emacs ビギナー]]

 #+begin_src emacs-lisp
(global-set-key (kbd "C-/")     'undo)
(global-set-key (kbd "C-S-i")   'indent-region)
(global-set-key (kbd "C-m")     'newline-and-indent)
 #+end_src

** 削除系
   | C-k | kill-line     |
   | M-d | kill-word     |
   | M-k | kill-sentence |

#+begin_src emacs-lisp
(global-set-key (kbd "C-h")     'backward-delete-char)
#+end_src

** key-guide
   キーバインドを教えてくれる.

  - https://github.com/kai2nenobu/guide-key
  - [[http://rubikitch.com/2014/08/30/guide-key/][もう迷子にならない! 今の Emacs は自動的に次のキー操作を教えてくれるゾ!!]]

#+begin_src emacs-lisp
(use-package guide-key
  :config
  (setq guide-key/popup-window-position 'bottom)
  (guide-key-mode 1)  ; Enable guide-key-mode
  (setq guide-key/guide-key-sequence '("C-x r" "C-x 4")))
#+end_src

* Start Up
  起動時の設定

#+begin_src emacs-lisp
;; 起動時の scratch メッセージは表示しない
(setq initial-scratch-message nil)

;; 起動時の画面はいらない
(setq inhibit-startup-message t)

;; ウィンドウマネージャ環境での起動時間カイゼン
(modify-frame-parameters nil '((wait-for-wm . nil)))

;; byte-compile warning の無視
;; http://tsengf.blogspot.jp/2011/06/disable-byte-compile-warning-in-emacs.html
;; ignore byte-compile warnings 
(setq byte-compile-warnings '(not nresolved
                                  free-vars
                                  callargs
                                  redefine
                                  obsolete
                                  noruntime
                                  cl-functions
                                  interactive-only
                                  ))
#+end_src

** 時間計測
   これは普段は封印している. 時間を知りたくなったときに利用する.

*** 起動時間の把握
    M-x emacs-init-time という関数を実行すると, 起動にかかる時間がわかる.

*** esup をつかう
    esup を利用すると, 詳細な起動時間がわかる.
    - https://github.com/jschaf/esup

#+begin_src emacs-lisp
(use-package esup :disabled t)
#+end_src

   自分の環境だと, inits ディレクトリ配下がすべて結果が要約されてしまい,
   よくわからなかった.

*** initchart をつかう
    Emacs のスタートアップを視覚化する.
    - [[http://qiita.com/yuttie/items/0f38870817c11b2166bd][Emacs のスタートアップを視覚的に理解する - Qiita]]
    - https://github.com/yuttie/initchart

#+begin_src emacs-lisp
(use-package initchart 
  :disabled t
  :config
  (initchart-record-execution-time-of load file)
  (initchart-record-execution-time-of require feature))
#+end_src

** Emacs client
   server start for emacs-client
   - http://d.hatena.ne.jp/syohex/20101224/1293206906

 #+begin_src emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
 #+end_src

  どうも, Elscreen が scratch を初期画面で開いてしまうようだ.

** Original Message
#+begin_src emacs-lisp
(defun my-startup-display-mode ()
  "Sets a fixed width (monospace) font in current buffer"
  (setq buffer-face-mode-face '(:height 1000))
  (buffer-face-mode))

(defun my-startup-display ()
  "Display startup message on buffer"
  (interactive)
  (let ((temp-buffer-show-function 'switch-to-buffer))
    (with-output-to-temp-buffer "*MyStartUpMessage*"  
;;      (princ "\n\nHello Emacs (^-^)/\nLet the Hacking Begin!\n")))
(princ "\n\nHello Emacs!!\nHappy Hacking (^-^)/\n")))
  (my-startup-display-mode)
  )

;; (defun kill-scratch ()
;;   (kill-buffer "*scratch*"))
;; (add-hook 'after-init-hook 'kill-scratch t)
(add-hook 'after-init-hook 'my-startup-display)
#+end_src

* TearDown
  終了時の設定.

#+begin_src emacs-lisp
;;; 終了時にオートセーブファイルを消す
(setq delete-auto-save-files t)
#+end_src

* ファイル管理
** saveplace
   一度訪れたファイルは次開くときはそこから開く.

#+begin_src emacs-lisp
(use-package saveplace
  :init
  (setq-default save-place t))
#+end_src

** recentf
    最近使ったファイルをメニューに表示たくさん履歴を残したい.

  #+begin_src emacs-lisp
(use-package recentf
  :bind (("C-c F" . recentf-open-files))
  :init
  (recentf-mode)
  :config
  (setq recentf-max-saved-items 2000)
  (setq recentf-auto-cleanup 10)
  (setq recentf-exclude '("/TAGS$" "/var/tmp/" ".recentf")))
 #+end_src

** recentf-ext
   recentf の拡張.
   - [[http://d.hatena.ne.jp/rubikitch/20091224/recentf][人は俺を「 recentf マスター」と呼ぶ]]
   - [[http://qiita.com/catatsuy/items/f9fad90fa1352a4d3161][Emacs を快適に使うファイル周りの設定紹介 - Qiita]]
   - [[http://qiita.com/icb54615/items/ed8ff0ac0443e0a9c7da][Emacs - 最近使ったファイル一覧を表示 - Qiita]]
   
#+begin_src emacs-lisp
(use-package recentf-ext)
#+end_src

** open-junk-file
   使い捨てファイルを開く.

#+begin_src emacs-lisp
(use-package open-junk-file
  :config
  (setq open-junk-file-format "~/tmp/%Y-%m-%d-%H%M%S.")
  
  ;; open-junk
  (global-set-key (kbd "C-x j") 'open-junk-file)
  (define-key goto-map [?j] 'open-junk-file))
#+end_src

** uniquify
   同名ファイルの区別

#+begin_src emacs-lisp
 (use-package uniquify
 :config
 (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src

** file 名の補間で大文字小文字を区別しない
#+begin_src emacs-lisp
(setq completion-ignore-case t)
#+end_src

* ディレクトリ管理
** Tramp
   リモートサーバに Emacs から乗り込む.

   こんな感じで乗り込む.
   - C-x C-f /ssh:username@hostname#portno:/path/to/your/directory

   Tramp で save 時に毎回パスワードが聞かれるので, おまじない.
   - [[http://stackoverflow.com/questions/840279/passwords-in-emacs-tramp-mode-editing][ssh - Passwords in Emacs tramp mode editing - Stack Overflow]]

#+begin_src emacs-lisp
(setq password-cache-expiry nil)
#+end_src

* netrc
  build-in のパスワード管理.
  パスワード自体は ~/.netrc に書き込む. 

#+begin_src emacs-lisp
(use-package netrc)
#+end_src

* Tips
** Emacs と X のクリップポードを共有
   - http://tubo028.hatenablog.jp/entry/2013/09/01/142238

   tramp で VM に乗り込むと, うまく動作しない.
   ssh の X forwarding の設定が必要?
   - http://superuser.com/questions/326871/using-clipboard-through-ssh-in-vim

   tramp するときだけ封印することにする. もっとうまい解決方法ないかな??
   
   Shift+Insert でも貼り付けできるので, とりあえずはこれで回避.
   
** BEEP  
   Ignore beep (for windows)
   
#+begin_src emacs-lisp
(setq visible-bell t)
(setq ring-bell-function 'ignore)
#+end_src

