* Macros

Special Thanks
http://e-arrows.sakura.ne.jp/2010/03/macros-in-emacs-el.html

#+begin_src emacs-lisp
;;  add-hookを簡潔に
(defmacro add-hook-fn (name &rest body)
    `(add-hook ,name #'(lambda () ,@body)))

;; global-set-keyも簡潔に
(defmacro global-set-key-fn (key args &rest body)
  `(global-set-key ,key (lambda ,args ,@body)))

;;  複数の要素をリストに追加
(defmacro append-to-list (to lst)
  `(setq ,to (append ,lst ,to)))

;; ライブラリがあるときだけrequireする
;; マクロ定義
(defmacro req (lib &rest body)
  `(when (locate-library ,(symbol-name lib))
     (require ',lib) ,@body))

;; autoloadで遅延ロード
(defmacro lazyload (func lib &rest body)
  `(when (locate-library ,lib)
     ,@(mapcar (lambda (f) `(autoload ',f ,lib nil t)) func)
     (eval-after-load ,lib
       '(progn
	  ,@body))))

;; Special Thanks
;; http://d.hatena.ne.jp/sr10/20121128/1354083749
;; ライブラリを遅延評価
(defmacro lazy-load-eval (feature &optional functions &rest body)
  "Define each FUNCTIONS to autoload from FEATURE.
FEATURE is a symbol. FUNCTIONS is a list of symbols. 
If FUNCTIONS is nil,the function same as FEATURE is 
defined as autoloaded function. BODY is passed to `eval-after-load'.
When this macro is evaluated, this returns the 
path to library if FEATURE
found, otherwise returns nil."
  (let* ((libname (symbol-name (eval feature)))
	 (libpath (locate-library libname)))
    (and libpath
	 `(progn
	    ,@(mapcar (lambda (f)
		(or (fboundp f)
		    `(autoload (quote ,f)
			 ,libname
		       ,(concat "Autoloaded function defined in \""
			libpath
			"\".")
		       t)))
	      (or (eval functions)
		  `(,(eval feature))))
    (eval-after-load ,feature
      (quote (progn
	       ,@body)))
   ,libpath))))
#+end_src

* Functions
** フォルダを再帰的にロードパスに追加

Special Thanks
http://e-arrows.sakura.ne.jp/2010/03/macros-in-emacs-el.html

#+begin_src emacs-lisp
;; @ load-path
;; for Emacs 23 under
(when (> emacs-major-version 23)
  (defvar user-emacs-directory "~/.emacs.d"))

;; load-pathの追加関数
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))
;; load-pathに追加するフォルダ
;; 2つ以上フォルダを指定する場合の引数 => (add-to-load-path "elisp" "xxx" "xxx")
(add-to-load-path "elisp" "inits" "el-get" "elpa" "local")
#+end_src

** ライブラリが存在すればロード

- [[http://d.hatena.ne.jp/tomoya/20090811/1250006208][ひとつの .emacs で設定を、、その2。 - 日々、とんは語る。]]

#+begin_src emacs-lisp
(defun autoload-if-found (function file &optional docstring interactive type)
  "set autoload iff. FILE has found."
  (and (locate-library file)
       (autoload function file docstring interactive type)))
#+end_src

使い方.

#+begin_src language
;; 引数は autoload と全く同じです。-if-found を付けるだけ
(when (autoload-if-found 'bs-show "bs" "buffer selection" t)
  ;; autoload は成功した場合のみ non-nil を返すので、
  ;; when の条件部に置くことで、依存関係にある設定項目を自然に表現できます。
  (global-set-key [(control x) (control b)] 'bs-show)
  (setq bs-max-window-height 10))
#+end_src

* Global Keys
よくわすれる、CやMの意味。
http://www.emacswiki.org/emacs-ja/Emacs%E3%83%93%E3%82%AE%E3%83%8A%E3%83%BC#toc9

#+begin_src emacs-lisp
(global-set-key (kbd "C-h")     'backward-delete-char)
(global-set-key (kbd "C-c d")   'delete-indentation)
(global-set-key (kbd "M-g")     'goto-line)
(global-set-key (kbd "C-S-i")   'indent-region)
(global-set-key (kbd "C-/")     'undo)
;;(global-set-key (kbd "C-c a")   'align)
;;(global-set-key (kbd "C-c M-a") 'align-regexp)
;;(global-set-key (kbd "C-m")     'newline-and-indent)
;;(global-set-key (kbd "C-t")     'next-multiframe-window)
;;(global-set-key (kbd "M-<RET>") 'ns-toggle-fullscreen)
;;(global-set-key (kbd "C-S-t")   'previous-multiframe-window)
;; (global-set-key (kbd "C-M-r")   'replace-regexp)
;; (global-set-key (kbd "C-r")     'replace-string)
#+end_src

* Emacs client
server start for emacs-client
http://d.hatena.ne.jp/syohex/20101224/1293206906

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src

* General Settings
** recentf
最近使ったファイルをメニューに表示

たくさん履歴を残したい。

#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 50)
(setq recentf-max-saved-items 100)
#+end_src

** saveplace
一度訪れたファイルは次開くときはそこから開く。

#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
#+end_src

** savehist
minibufferの履歴保存

#+begin_src emacs-lisp
(require 'savehist)
(savehist-mode t)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+end_src

* Tips
** EmacsとXのクリップポードを共有

http://tubo028.hatenablog.jp/entry/2013/09/01/142238

trampでVMに乗り込むと、うまく動作しない。

ssh の X forwardingの設定が必要？

http://superuser.com/questions/326871/using-clipboard-through-ssh-in-vim

trampするときだけ封印することにする。もっとうまい解決方法ないかな？？

Shift+Insertでも貼り付けできるので、とりあえずはこれで回避。

#+begin_src emacs-lisp
;; (when linux-p
;;   ;; クリップボードと同期
;;   (setq interprogram-paste-function
;; 	(lambda ()
;; 	  (shell-command-to-string "xsel -p -o")))
;;   (setq interprogram-cut-function
;; 	(lambda (text &optional rest)
;; 	  (let* ((process-connection-type nil)
;; 		 (proc (start-process "xsel" "*Messages*" "xsel" "-p" "-i")))
;; 	    (process-send-string proc text)
;; 	    (process-send-eof proc))))
;; )
#+end_src

* Tramp
こんな感じで乗り込む。

#+begin_src language
C-x C-f /ssh:username@hostname#portno:/path/to/your/directory
#+end_src

Trampでsave時に毎回パスワードが聞かれるので、おまじない。

http://stackoverflow.com/questions/840279/passwords-in-emacs-tramp-mode-editing

#+begin_src emacs-lisp
(setq password-cache-expiry nil)
#+end_src

* undo-tree

C-x uにバインディング。

#+begin_src emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
#+end_src

* Popwin
ポップアップ表示

- [[https://github.com/m2ym/popwin-el][m2ym/popwin-el]]

#+begin_src emacs-lisp
(when (require 'popwin)
  (setq helm-samewindow nil)
  (setq display-buffer-function 'popwin:display-buffer)
  (setq popwin:special-display-config '(("*compilation*" :noselect t)
					;;("helm" :regexp t :height 0.4)
					("anything" :regexp t :height 0.4)
					)))
(push '("^\*helm .+\*$" :regexp t) popwin:special-display-config)
(push '("^\*Org .+\*$" :regexp t) popwin:special-display-config)
(push '("*rspec-compilation*" :regexp t) popwin:special-display-config)
(push '("*Oz Compiler*" :regexp t) popwin:special-display-config)
(push '("^CAPTURE-.+\*.org$" :regexp t) popwin:special-display-config)
;; (push '("^\*terminal<.+" :regexp t) popwin:special-display-config)

;; http://cx4a.blogspot.jp/2011/12/popwineldirexel.html

;; M-x dired-jump-other-window
(push '(dired-mode :position bottom) popwin:special-display-config)

;; M-!
(push "*Shell Command Output*" popwin:special-display-config)

;; M-x compile
(push '(compilation-mode :noselect t) popwin:special-display-config)

;; Direx 
(push '(direx:direx-mode :position left :width 40 :dedicated t)
popwin:special-display-config)

(global-set-key (kbd "C-x j") 'direx:jump-to-directory-other-window)
(global-set-key (kbd "C-x 4 j") 'dired-jump-other-window)

;; undo-tree
(push '(" *undo-tree*" :width 0.3 :position right) popwin:special-display-config)
#+end_src

* Diredでカレントディレクトリを取得

- [[http://d.hatena.ne.jp/syohex/20111026/1319606395][cdeを改良 - Life is very short]]

#+begin_src emacs-lisp
;; .emacs等設定ファイルに追加
(defun elscreen-current-directory ()
  (let* (current-dir
         (active-file-name
          (with-current-buffer
              (let* ((current-screen (car (elscreen-get-conf-list 'screen-history)))
                     (property (cadr (assoc current-screen
                                            (elscreen-get-conf-list 'screen-property)))))
                (marker-buffer (nth 2 property)))
            (progn
              (setq current-dir (expand-file-name (cadr (split-string (pwd)))))
              (buffer-file-name)))))
    (if active-file-name
        (file-name-directory active-file-name)
      current-dir)))

(defun non-elscreen-current-directory ()
  (let* (current-dir
         (current-buffer
          (nth 1 (assoc 'buffer-list
                        (nth 1 (nth 1 (current-frame-configuration))))))
         (active-file-name
          (with-current-buffer current-buffer
            (progn
              (setq current-dir (expand-file-name (cadr (split-string (pwd)))))
              (buffer-file-name)))))
    (if active-file-name
        (file-name-directory active-file-name)
      current-dir)))
#+end_src

* 未整理
#+begin_src emacs-lisp
;; file名の補間で大文字小文字を区別しない
(setq completion-ignore-case t)

;; 同名ファイルの区別
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

;; バッファ再読み込み
(global-auto-revert-mode 1)

;; ウィンドウマネージャ環境での起動時間カイゼン
(modify-frame-parameters nil '((wait-for-wm . nil)))

;; git管理のシンボリックリンクで質問されないためのおまじない。
;; 参考: http://openlab.dino.co.jp/2008/10/30/212934368.html
;;; avoid "Symbolic link to Git-controlled source file;; follow link? (yes or no)
(setq git-follow-symlinks t)

;; byte-compile warningの無視
;; http://tsengf.blogspot.jp/2011/06/disable-byte-compile-warning-in-emacs.html
;; ignore byte-compile warnings 
(setq byte-compile-warnings '(not nresolved
                                  free-vars
                                  callargs
                                  redefine
                                  obsolete
                                  noruntime
                                  cl-functions
                                  interactive-only
                                  ))
;;; 終了時にオートセーブファイルを消す
(setq delete-auto-save-files t)

;; ------------------------------------------------------------------------
;; デフォルトブラウザ設定
;; ------------------------------------------------------------------------
(when linux-p
  (setq browse-url-generic-program (executable-find "conkeror"))
  (setq browse-url-browser-function 'browse-url-generic)
)

(when windows-p
; Windows環境のデフォルト
 (setq browse-url-browser-function 'browse-url-default-windows-browser)
)

;; 今のポイントしているURLを開く
(global-set-key (kbd "C-c u") 'browse-url-at-point)


;; -----------------------------------------------------------------------
;; Function : ミニバッファに入るときに日本語入力無効にする
;;  http://www11.atwiki.jp/s-irie/pages/21.html
;; Install  : 
;;  sudo add-apt-repository ppa:irie/elisp
;;  sudo apt-get update
;;  sudo apt-get install ibus-el
;;  いれたけど、うまく動かない。
;;  -> ibus仕様変更により現在動作せず。もうだめぽよ。
;; http://margaret-sdpara.blogspot.jp/2013/10/ibusel.html
;; https://code.google.com/p/ibus/issues/detail?id=1419
;; ------------------------------------------------------------------------
;; Anthy
;; sudo apt-get install anthy-el
;; (when linux-p
;;   (load-library "anthy")
;;   (set-language-environment "Japanese")
;;   (setq default-input-method "japanese-anthy")
;;   (global-set-key [zenkaku-hankaku] 'toggle-input-method)
;; ;; パッチあてた
;; ;; http://www.mail-archive.com/anthy-dev@lists.sourceforge.jp/msg00395.html
;; )


;; -----------------------------------------------------------------------
;; Name     : ffap.el
;; Function : 現在の位置のファイル・URLを開く
;; History  : 2014/02/02 add
;; Install  : build-in
;; ------------------------------------------------------------------------
;; (ffap-bindings)

;; -----------------------------------------------------------------------
;; Name     : tempbuf.el
;; Function : 使っていないバッファを削除
;; History  : 2014/02/02 add
;; Install  : emacs wiki
;; ------------------------------------------------------------------------
;; (require 'tempbuf)
;; ファイルを開いたら有効
;; (add-hook 'find-file-hooks 'turn-on-tempbuf-mode)
;; Dired modeならば有効
;; (add-hook 'dired-mode-hook 'turn-on-tempbuf-mode)

;; -----------------------------------------------------------------------
;; Name     : netrc
;; Install  : build-in
;; Function : パスワード管理
;; パスワード自体は ~/.netrcに書き込む。dropboxで同期
;; ------------------------------------------------------------------------
(require 'netrc)

;; -----------------------------------------------------------------------
;; Name     : stripe-buffer
;; Install  : el-get
;; Function : しましま表示
;; ------------------------------------------------------------------------
(require 'stripe-buffer)
(add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
;;(add-hook 'org-mode-hook 'turn-on-stripe-table-mode)
#+end_src

