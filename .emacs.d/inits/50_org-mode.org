* org-mode

こまったらここを見れば日本語訳がある

 http://orgmode.jp/

* 一般的な設定
#+begin_src emacs-lisp
; ------------------------------------------------------------------------
(require 'org-install)
;; (require 'org-pomodoro)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

;; key bindings
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-c\C-x\C-@" 'org-clock-out) ;; tmux で C-o は利用しているため
(define-key org-mode-map "\C-co" 'org-open-at-point) ;; C-o の置き換え tmux で c-o は使っているので
(global-set-key "\C-cC" 'cfw:open-org-calendar)
(global-set-key "\C-c\C-x\C-z" 'org-resolve-clocks)
(global-set-key "\C-c\C-x\C-g" 'org-clock-goto)

;; -----------------------------------------------------------------------
;; Name     : tiny-function
;; ------------------------------------------------------------------------
;; wanderlust
;; wanderlust のメールを追跡できる
(setq org-return-follows-link t)

;; -----------------------------------------------------------------------
;; Name     : tiny-function
;; ------------------------------------------------------------------------
;; DONE をすべてアーカイブ
(defun my-org-archive-done-tasks ()
  (interactive)
  (org-map-entries 'org-archive-subtree "/DONE" 'file))
#+end_src

org-mode の src を目立たせる設定. うまく動いていないような.

- [[http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html][Pretty fontification of source code blocks]]

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-fontify-whole-heading-line t)
#+end_src

** スタートアップ設定
#+begin_src emacs-lisp
;; アスタリスクはかくす
(setq org-hide-leading-stars t)

;; 初期状態は見出しを表示
(setq org-startup-folded (quote content))

;; 自動インデント
;; (setq org-indent-mode t)
#+end_src

** org-open-link を dired で

http://sheephead.homelinux.org/

#+begin_src emacs-lisp
(org-add-link-type "file+emacs+dired" 'org-open-file-with-emacs-dired)
(add-hook 'org-store-link-functions 'org-dired-store-link)

(defun org-open-file-with-emacs-dired (path)
  "Open in dired."
  (let ((d (file-name-directory path))
    (f (file-name-nondirectory path)))
    (dired d)
    (goto-char (point-min))
    (search-forward f nil t)))

(defun org-dired-store-link ()
  "Store link to files/directories from dired."
  (require 'dired-x)
  (when (eq major-mode 'dired-mode)
    (let* ((f (dired-filename-at-point))
           (link (concat "file+emacs+dired" ":" f))
           (desc (concat f " (dired)")))
      (org-add-link-props :link link :description desc)
      link)))
#+end_src

* GTD
** org-agenda
#+begin_src emacs-lisp
;; アジェンダ表示の対象ファイル
;; (if nt-p
;; (setq org-agenda-files '("C:\\Users\\TSUNEMICHI\\Dropbox\\gtd\\inbox.org"
;; 			 "C:\\Users\\TSUNEMICHI\\Dropbox\\gtd\\main.org"
;; 			 "C:\\Users\\TSUNEMICHI\\Dropbox\\gtd\\unplan.org"
;; 			 "C:\\Users\\TSUNEMICHI\\Dropbox\\gtd\\schedule.org"))
;; (setq org-agenda-files '("~/gtd/inbox.org"
;; 			 "~/gtd/main.org"
;; 			 "~/gtd/unplan.org"
;; 			 "~/gtd/schedule.org"))
;; )

(setq org-agenda-files '("~/gtd/inbox.org"
			 "~/gtd/main.org"
			 "~/gtd/unplan.org"
			 "~/gtd/schedule.org"))

;; 時間表示が 1 桁の時, 0 をつける
(setq org-agenda-time-leading-zero t)

;; DONE の時刻を記録
(setq org-log-done 'time)

;; セレクションメニューから状態の変更を行えるようにする
(setq org-use-fast-todo-selection t)

(setq org-clock-in-resume t)

(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))

;; 測定した時間が 0 の場合消去する
(setq org-clock-out-remove-zero-time-clocks t)

;;アジェンダの clockreport 用パラメータ
(setq org-agenda-clockreport-parameter-plist
      '(:maxlevel 5 :block t :tstart t :tend t :emphasize t :link t :narrow 80 :indent t :formula nil :timestamp t :level 5 :tcolumns nil :formatter nil))

;; カラムビューで表示する項目
(setq org-columns-default-format "%80ITEM (Task) %10Effort (Effort){:} %10CLOCKSUM")

; Set default column view headings: Task Effort Clock_Summary
;; (setq org-columns-default-format
;;      "%40ITEM (Task) %17Effort (Effort){:} %10CLOCKSUM")

; global Effort estimate values
(setq org-global-properties (quote ((
      "Effort_ALL" . "00:05 00:10 00:15 00:30 01:00 01:30 02:00 02:30 03:00"))))

;; カスタムコマンド
;; http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html
(setq org-agenda-custom-commands 
      '(
      ;; http://hpcgi1.nifty.com/spen/index.cgi?OrgMode%2FOrg-mode%A4%C7GTD%BC%C2%C1%A9%A1%CA%CB%DD%CC%F5%A1%CB#i16
       ("D" "Daily Action Summary"
        ((agenda "" 
	((org-agenda-ndays 1)
	(org-agenda-entry-types '(:timestamp :sexp))
	))
	(tags-todo "next"))
	)
       ("d" "Daily Action List Detail"
        ((agenda "" ((org-agenda-ndays 1)
        (org-agenda-sorting-strategy
        (quote ((agenda time-up priority-down tag-up) )))
	;; (org-deadline-warning-days 0)
	;; (org-agenda-clockreport-mode t) ;; 時間表の表示はコメントアウト
        ))))
	("n" "Next Action List" tags-todo "next")
	)
)
	
#+end_src

** タスクの状態定義

とりあえず今は, TODO と DONE でいいや. そのうち充実させる.

#+begin_src emacs-lisp
;; (setq org-todo-keywords (quote (
;;  (sequence "TODO (t)" "STARTED (s!)" "NEXT (n!)" "DONE (d!/!)")
;;  (sequence "WAITING (w@/!)" "SOMEDAY (S!)")
;;  )))

;; (setq org-todo-keyword-faces (quote (
;;  ("TODO" :foreground "red" :weight bold)
;;  ("NEXT" :foreground "orange" :weight bold)
;;  ("DONE" :foreground "forest green" :weight bold)
;;  ("REMINER" :foreground "forest green" :weight bold)
;;  ("WAITING" :foreground "blue" :weight bold)
;;  ("SOMEDAY" :foreground "yellow" :weight bold)
;;  )))

(setq org-todo-state-tags-triggers
      (quote (;;("CANCELLED" ("CANCELLED" . t))
              ;; ("WAITING" ("WAITING" . t) ("NEXT"))
              ;; ("SOMEDAY" ("WAITING" . t))
;;              (done ("next"))
;;              ("next" ("planed . t"))
              ;; ("TODO" ("WAITING") ("CANCELLED") ("NEXT"))
              ;; ("DONE" ("WAITING") ("NEXT"))
)))


;; 参考
;; http://hpcgi1.nifty.com/spen/index.cgi?OrgMode%2fOrganize_Your_Life_In_Plain_Text!#i9

;; (setq org-todo-keywords (quote ((sequence "TODO (t)" "STARTED (s!)" "|" "DONE (d!/!)")
;;  (sequence "WAITING (w@/!)" "SOMEDAY (S!)" "OPEN (O@)" "|" "CANCELLED (c@/!)")
;;  (sequence "QUOTE (q!)" "QUOTED (Q!)" "|" "APPROVED (A@)" "EXPIRED (E@)" "REJECTED (R@)"))))
;; (setq org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
;;  ("STARTED" :foreground "blue" :weight bold)
;;  ("DONE" :foreground "forest green" :weight bold)
;;  ("WAITING" :foreground "orange" :weight bold)
;;  ("SOMEDAY" :foreground "magenta" :weight bold)
;;  ("CANCELLED" :foreground "forest green" :weight bold)
;;  ("QUOTE" :foreground "red" :weight bold)
;;  ("QUOTED" :foreground "magenta" :weight bold)
;;  ("APPROVED" :foreground "forest green" :weight bold)
;;  ("EXPIRED" :foreground "forest green" :weight bold)
;;  ("REJECTED" :foreground "forest green" :weight bold)
;;  ("OPEN" :foreground "blue" :weight bold))))

;; (setq org-todo-state-tags-triggers
;;       (quote (("CANCELLED" ("CANCELLED" . t))
;;               ("WAITING" ("WAITING" . t) ("NEXT"))
;;               ("SOMEDAY" ("WAITING" . t))
;;               (done ("NEXT") ("WAITING"))
;;               ("TODO" ("WAITING") ("CANCELLED") ("NEXT"))
;;               ("DONE" ("WAITING") ("CANCELLED") ("NEXT")))))

;; ;; Change task state to STARTED when clocking in
;; (setq org-clock-in-switch-to-state "STARTED")
#+end_src

** org-clock-in-quick
 指定したタスクを clockin するためのショートカット はじめてつくった自作 defun!!

 http://orgmode.org/manual/Resolving-idle-time.html#Resolving-idle-time
 https://github.com/danieroux/emacs/blob/master/external/bh-org-mode.el

#+begin_src emacs-lisp
(defvar bh/organization-task-id-gtd "b66237b9-95dd-4863-bc36-bd4dbc435eca")
(defvar bh/organization-task-id-rest "192d0802-8ed7-4c51-ad3f-04f6ae4e75f6")

(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (save-restriction
    (widen)
    (org-with-point-at (org-id-find id 'marker)
      (org-clock-in '(16)))))

;; ショートカット clock-in
(defun gtd ()
  (interactive)
  (find-file "~/gtd/main.org")
  (bh/clock-in-task-by-id bh/organization-task-id-gtd)
  )

;; http://www.emacswiki.org/emacs/FacesPerBuffer
(defun my-org-rest-display-mode ()
  "Sets a fixed width (monospace) font in current buffer"
  (interactive)
  (setq buffer-face-mode-face '(:height 1000))
  (buffer-face-mode))

(defun rest-display ()
  "Display rest message on buffer"
  (let ((temp-buffer-show-function 'switch-to-buffer))
  (with-output-to-temp-buffer "*RestMessage*"  
  (princ "\n 休憩中だよ (*'~`*)")))
  (my-org-rest-display-mode)
  )

(defun rest ()
  (interactive)
  (find-file "~/gtd/main.org")
  (bh/clock-in-task-by-id bh/organization-task-id-rest)
  (rest-display)
  )

(global-set-key (kbd "<f7>") 'gtd)
(global-set-key (kbd "<f8>") 'rest)
#+end_src

** 未分類
#+begin_src emacs-lisp
;; -----------------------------------------------------------------------
;; NextAction の設定
;; http://qiita.com/takaxp/items/4dfa11a81e18b29143ec
;; ------------------------------------------------------------------------
(defvar my-next-tag "next")
(defvar my-unplan-tag "unplan")

;; タグの色変更
;; (setq org-tag-faces '(("next" :foreground "#FF0000")))
(setq org-tag-faces '(("next" :foreground "orange")))

;; Next タグをトグルする
;; (defun my-toggle-tag (my-tag)
;;   (interactive)
;;   (when (eq major-mode 'org-mode)
;;     (save-excursion
;;       (save-restriction
;;         (unless (org-at-heading-p)
;;           (outline-previous-heading))
;;         (if (string-match (concat ":" my-tag ":") (org-get-tags-string))
;;             (org-toggle-tag my-tag 'off)
;;           (org-toggle-tag my-tag 'on))
;;         (org-reveal)))))

(defun my-toggle-next-tag ()
  (interactive)
  (when (eq major-mode 'org-mode)
    (save-excursion
      (save-restriction
        (unless (org-at-heading-p)
          (outline-previous-heading))
        (if (string-match (concat ":" my-next-tag ":") (org-get-tags-string))
            (org-toggle-tag my-next-tag 'off)
          (org-toggle-tag my-next-tag 'on))
        (org-reveal)))))

;; (defun my-toggle-unplan-tag ()
;;   my-toggle-tag (my-unplan-tag))

(global-set-key (kbd "C-x <f2>") 'my-toggle-next-tag)
;;(global-set-key (kbd "C-x <f3>") 'my-toggle-unplan-tag)

;; -----------------------------------------------------------------------
;; Name     : org-clock
;; http://orgmode.org/manual/Resolving-idle-time.html#Resolving-idle-time
;; ------------------------------------------------------------------------
;; emacs resume 時に時間計測再会
(org-clock-persistence-insinuate)

;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)

;; Sometimes I change tasks I'm clocking quickly
;; - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; clock out when moving task to a done state
;; タスクが完了した時に時間測定も停止する
(setq org-clock-out-when-done t)

;; Save the running clock and all clock history
;; when exiting Emacs, load it on startup
;; Emacs が再起動したときにタスクの時間計測を再開する
;; Emacs が終了する時に測定中の計測と全ての測定履歴を保存する
(setq org-clock-persist (quote history))

;; 空き時間の解決 
;; 半端時間を絶えずチェックしているファイルのリストは, M-x org-resolve-clocks
;; http://orgmode.org/manual/Resolving-idle-time.html#Resolving-idle-time
(setq org-clock-idle-time 20)

;: 時間測定の履歴数
(setq org-clock-history-length 36)

;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)

;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))

;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

; 時間になったら音をならす
;;(setq org-clock-sound "/usr/share/sounds/LinuxMint/stereo/desktop-login.ogg")
;;(setq org-clock-sound t)

;; 必ず時間見積り
(defadvice org-clock-in (before is-set-effort-before-clock-in)
   (let ((effort (org-entry-get (point) "Effort")))
     (unless effort
       (error "[Error: Is not set a effort!]"))))
(ad-activate-regexp "is-set-effort-before-clock-in")

;; -----------------------------------------------------------------------
;; Name     : org-clock-by-tags
;; Function : タグごとに clocktable を集計
;; TODO そのうち elisp で分離
;; http://stackoverflow.com/questions/17353591/timetable-grouped-by-tag
;; #+BEGIN: clocktable-by-tag :maxlevel 2 :tags ("p1" "p2")
;;                            :tstart "2013-06-27" :tend "2013-06-28"
;; ------------------------------------------------------------------------
(defun clocktable-by-tag/shift-cell (n)
  (let ((str ""))
    (dotimes (i n)
      (setq str (concat str "| ")))
    str))

(defun clocktable-by-tag/insert-tag (params)
  (let ((tag (plist-get params :tags)))
    (insert "|--\n")
    (insert (format "| %s | *Tag time* |\n" tag))
    (let ((total 0))
;;      (mapcar
      (mapc
       (lambda (file)
	 (let ((clock-data (with-current-buffer (find-file-noselect file)
			     (org-clock-get-table-data (buffer-name) params))))
	   (when (> (nth 1 clock-data) 0)
	     (setq total (+ total (nth 1 clock-data)))
	     (insert (format "| | File *%s* | %.2f |\n"
			     (file-name-nondirectory file)
			     (/ (nth 1 clock-data) 60.0)))
	     (dolist (entry (nth 2 clock-data))
	       (insert (format "| | . %s%s | %s %.2f |\n"
			       (org-clocktable-indent-string (nth 0 entry))
			       (nth 1 entry)
			       (clocktable-by-tag/shift-cell (nth 0 entry))
			       (/ (nth 3 entry) 60.0)))))))
       (org-agenda-files))
      (save-excursion
	(re-search-backward "*Tag time*")
	(org-table-next-field)
	(org-table-blank-field)
	(insert (format "*%.2f*" (/ total 60.0)))))
    (org-table-align)))

(defun org-dblock-write:clocktable-by-tag (params)
  (insert "| Tag | Headline | Time (h) |\n")
  (insert "|     |          | <r>  |\n")
  (let ((tags (plist-get params :tags)))
    (mapcar (lambda (tag)
	      (setq params (plist-put params :tags tag))
	      (clocktable-by-tag/insert-tag params))
	    tags)))
#+end_src

* org-capture
capture てんぷれの書き方
http://orgmode.org/manual/Template-expansion.html#Template-expansion

#+begin_src emacs-lisp
;; -----------------------------------------------------------------------
;; Name     : org-capture
;; Function : アイデアをキャプチャーする
;; History  : 2014/02/25
;; Install  : build-in
;; ------------------------------------------------------------------------
(require 'org-capture)
(setq org-capture-templates
      '(
	("i" "Inbox" entry (file+datetree "~/gtd/inbox.org") "** TODO %?\n")
	("u" "Unplan" entry (file+datetree "~/gtd/unplan.org") "** TODO %? :unplan:\n")
	("w" "Diary" entry (file+datetree "~/gtd/main.org") "** %T %?\n")
	("k" "Clock-in" entry (clock) "* %T %?\n")
	;; calfw との連携 http://sheephead.homelinux.org/2014/03/15/7035/#
	("c" "calfw2org" entry (file "~/gtd/schedule.org") "*  %?\n %(cfw:org-capture-day)")
	("m" "Memo" plain
         (file (concat org-directory (format-time-string "/howm/%Y%m%d-%H%M%S.org")))
         "* MEMO <%<%Y-%m-%d>> %?\n   %i\n  %a\n\n"
         :prepend t
         :unnarrowed t
         :kill-buffer t)
	("e" "Email Todo" entry (file+headline "~/gtd/main.org" "Mails")
        "* TODO %^{Brief Description}\n%a\n%?Added: %U\n" :prepend t)
	)
      )
#+end_src

* org2blog
Emacs から WordPress に投稿する Lisp

#+begin_src emacs-lisp
(require 'org2blog-autoloads)
(setq org2blog/wp-blog-alist
      '(("Futurismo"
	 :url "http://futurismo.biz/xmlrpc.php"
	 :username "admin")
))

(unless nt-p
(setq futurismo (netrc-machine (netrc-parse "~/.netrc") "futurismo" t))
;; (setq blog (netrc-machine (netrc-parse "~/.netrc") "EverClassic" t))

(setq org2blog/wp-blog-alist
      '(("Futurismo"
	 :url "http://futurismo.biz/xmlrpc.php"
	 :username (netrc-get futurismo "login")
	 :password (netrc-get futurismo "password")
	 )
	;; ("EverClassic"
	;;  :url "http://everclassic.biz/xmlrpc.php"
	;;  :username "admin"
	;;  ;;:username (netrc-get blog "login")
	;;  ;;:password (netrc-get blog "password")))
	)
      )
)

#+end_src

* スケジュール管理
** org-gcal
google calendar.

- http://sheephead.homelinux.org/2014/03/14/7023/

Google Developer Console で client-id と secret-key を取得する必要がある.

- https://console.developers.google.com/project

取得した情報は ~/.netrc に保存して読み出す.

#+begin_src emacs-lisp
(when linux-p
(require 'org-gcal)
;; password は netrc へ
(setq GoogleCal (netrc-machine (netrc-parse "~/.netrc") "org-gcal" t))
(setq org-gcal-client-id (netrc-get GoogleCal "login")
      org-gcal-client-secret (netrc-get GoogleCal "password")
      org-gcal-dir "~/org"
      org-gcal-file-alist '(("fox10225fox@gmail.com" .  "~/gtd/schedule.org")
      ))
)
#+end_src

** calfw
Emacs 用カレンダー.

- [[https://github.com/kiwanami/emacs-calfw][kiwanami/emacs-calfw]]
- [[http://d.hatena.ne.jp/kiwanami/20110723/1311434175][Emacs 用カレンダー calfw v1.2 リリース - 技術日記＠ kiwanami]]
- [[http://d.hatena.ne.jp/kiwanami/20110619/1308495781][calfw の org-agenda 対応 calfw-org.el - 技術日記＠ kiwanami]]
- [[http://sheephead.homelinux.org/2014/03/15/7035/][calfw と org-gcal の連携 | sheephead]]

org-gcal で Google カレンダーと同期して, calfw で表示させる.

org と ical のスケジュールを混ぜて表示させることが出来ます.
以下のような感じで cfw:open-calendar-buffer を使います.

#+begin_src emacs-lisp
(require 'calfw-org)

;; 対象ファイル
(setq cfw:org-icalendars '("~/gtd/schedule.org"))
;; First day of the week
(setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday

;; cfw:open-org-calendar に集約するので, ひとまずコメントアウト.
;; (defun my-open-calendar ()
;;   (interactive)
;;   (cfw:open-calendar-buffer
;;    :view 'month
;;    :contents-sources
;;    (list 
;;    ;; title, URL, color
;;    (cfw:org-create-source "Green")  ; orgmode source
;;    ;; (cfw:org-create-file-source "GCal" "~/gtd/schedule.org" "#268bd2")  ;; Google Calendar
;;    )))
#+end_src
* org-export
** ox-rst
org-mode から RST への変換

#+begin_src emacs-lisp
(require 'ox-rst)
#+end_src

** ox-pandoc
org-mode から RST への変換. ox-rst を使うからいらないかも.

#+begin_src emacs-lisp
(require 'ox-pandoc)
(setq org-pandoc-output-format 'rst)
#+end_src

** ox-taskjuggler

#+begin_src emacs-lisp
(require 'ox-taskjuggler)
#+end_src

** ox-wk
   dokuwiki 変換
#+begin_src emacs-lisp
(require 'ox-wk)
#+end_src
* mobileOrg
iphone と org-mode の同期. Dropbox を利用

つかってないから, ひとまず封印.

#+begin_src emacs-lisp
;; Set to the location of your Org files on your local system
;; (setq org-directory "~/gtd")
;; ;; Set to the name of the file where new notes will be stored
;; (setq org-mobile-inbox-for-pull "~/gtd/flagged.org")
;; ;; Set to <your Dropbox root directory>/MobileOrg.
;; (setq org-mobile-directory "~/dropbox/ アプリ/MobileOrg")

;; ;; 起動と終了時に同期
;; ;; org-mobile-directry が存在しないとハングするためなしにした
;; ;; そのうちなんか考える
;; ;; (add-hook 'after-init-hook 'org-mobile-pull)
;; ;; (add-hook 'kill-emacs-hook 'org-mobile-push)

;; ;; moble sync
;; ;; http://stackoverflow.com/questions/8432108/how-to-automatically-do-org-mobile-push-org-mobile-pull-in-emacs
;; (defvar org-mobile-sync-timer nil)
;; (defvar org-mobile-sync-idle-secs (* 60 10))
;; (defun org-mobile-sync ()
;;     (interactive)
;;       (org-mobile-pull)
;;         (org-mobile-push))
;; (defun org-mobile-sync-enable ()
;;     "enable mobile org idle sync"
;;       (interactive)
;;         (setq org-mobile-sync-timer
;; 	      (run-with-idle-timer org-mobile-sync-idle-secs t
;; 				   'org-mobile-sync)));
;; (defun org-mobile-sync-disable ()
;;     "disable mobile org idle sync"
;;       (interactive)
;;         (cancel-timer org-mobile-sync-timer))
;; (org-mobile-sync-enable)
#+end_src

* RSS Feed
RSS Feeder for Emacs

http://orgmode.org/manual/RSS-Feeds.html
http://d.hatena.ne.jp/tamura70/20100225/org

#+begin_src emacs-lisp
(require 'org-feed)
(defun org-feed-parse-rdf-feed (buffer)
  "Parse BUFFER for RDF feed entries.
Returns a list of entries, with each entry a property list,
containing the properties `:guid' and `:item-full-text'."
  (let (entries beg end item guid entry)
    (with-current-buffer buffer
      (widen)
      (goto-char (point-min))
      (while (re-search-forward "<item[> ]" nil t)
	(setq beg (point)
	      end (and (re-search-forward "</item>" nil t)
		       (match-beginning 0)))
	(setq item (buffer-substring beg end)
	      guid (if (string-match "<link\\>.*?>\\(.*?\\)</link>" item)
		       (org-match-string-no-properties 1 item)))
	(setq entry (list :guid guid :item-full-text item))
	(push entry entries)
	(widen)
	(goto-char end))
      (nreverse entries))))

(setq org-feed-retrieve-method 'wget)
;;(setq org-feed-retrieve-method 'curl)

(setq org-feed-default-template "\n* %h\n  - %U\n  - %a  - %description")
#+end_src

** 登録 feed

#+begin_src emacs-lisp
(setq org-feed-alist nil)
;; (add-to-list 'org-feed-alist
;;   '("Futurismo" "http://futurismo.biz/feed"
;;     "~/org/rss.org" "Futurismo"
;;     :parse-feed org-feed-parse-rdf-feed))
(add-to-list 'org-feed-alist
  '("Publickey" "http://www.publickey1.jp/atom.xml"
    "~/org/rss.org" "PublicKey"))
#+end_src

* Wanderlust

#+begin_src emacs-lisp
(require 'org-wl)
;; wanderlust のメールを追跡できる
(setq org-return-follows-link t)
#+end_src

* Plantuml

#+begin_src emacs-lisp
(when linux-p
(setq org-plantuml-jar-path "/usr/local/bin/plantuml.jar")
(defun org-mode-init ()
  (org-babel-do-load-languages
   'org-babel-load-languages
   (add-to-list 'org-babel-load-languages '(plantuml . t))))
(add-hook 'org-mode-hook 'org-mode-init)
)
#+end_src

* memo
** Narrowing
範囲を限定して表示することができる.

#+begin_src language
C-x n s     (org-narrow-to-subtree)
    Narrow buffer to current subtree. 
C-x n b     (org-narrow-to-block)
    Narrow buffer to current block. 
C-x n w     (widen)
    Widen buffer to remove narrowing.
#+end_src



