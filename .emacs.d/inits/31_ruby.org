* Ruby
みんな大好き Ruby だお.

** ruby-mode

#+begin_src emacs-lisp
(require 'ruby-mode)
(autoload 'ruby-mode "ruby-mode"
    "Mode for editing ruby source files" t)
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("[Rr]akefile$" . ruby-mode))

#+end_src

** enhanced-ruby-mode
Better Ruby Mode.
 https://github.com/zenspider/enhanced-ruby-mode

#+begin_src emacs-lisp
; must be added after any path containing old ruby-mode
;;(require 'enh-ruby-mode)
;;(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
;;(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))

;;(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("Capfile$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))
;;(add-to-list 'auto-mode-alist '("[Rr]akefile$" . enh-ruby-mode))
;;(add-to-list 'load-path "~/.emacs.d/elips/el-get/enh-ruby-mode")
;;(add-to-list 'interpreter-mode-alist '("ruby" enh-ruby-mode))

;;(remove-hook 'enh-ruby-mode-hook 'erm-define-faces)
#+end_src

** robe-mode
かしこい補完.
#+begin_src emacs-lisp
(add-hook 'ruby-mode-hook 'robe-mode)
(add-hook 'robe-mode-hook 'ac-robe-setup)
(custom-set-variables
 '(robe-highlight-capf-candidates nil))
#+end_src

** パスの設定
#+begin_src emacs-lisp
;; Setting rbenv path
;; emacs から rbenv でいれた Ruby を利用する.
(setenv "PATH" (concat (getenv "HOME") "/.rbenv/shims:"
		       (getenv "HOME") "/.rbenv/bin:" (getenv "PATH")))
(setq exec-path (cons (concat (getenv "HOME") "/.rbenv/shims")
		(cons (concat (getenv "HOME") "/.rbenv/bin") exec-path)))
#+end_src

* 静的解析
** flycheck

#+begin_src emacs-lisp
;; (add-hook 'ruby-mode-hook 'flycheck-mode)

;; definition for flycheck
(flycheck-define-checker ruby-rubocop
  "A Ruby syntax and style checker using the RuboCop tool.
   See URL `http://batsov.com/rubocop/'."
  :command ("rubocop" "--format" "emacs" "--silent"
	    (config-file "--config" flycheck-rubocoprc)
	    source)
  :error-patterns
  ((warning line-start
	    (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	    line-end)
   (error line-start
	  (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	  line-end))
  :modes (ruby-mode))

;; definition for flycheck
(flycheck-define-checker ruby-rubylint
  "A Ruby syntax and style checker using the rubylint tool."
  :command ("ruby-lint" source)
  :error-patterns
  ((warning line-start
	    (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	    line-end)
   (error line-start
	  (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	  line-end))
  :modes (ruby-mode))
#+end_src

* ruby-debug
標準ライブラリのデバッカ. ステップ実行できる.
elisp は ruby のソースに梱包されている.

#+begin_src emacs-lisp
;;(require 'ruby-debug)
(autoload 'rubydb "rubydb3x"
    "run rubydb on program file in buffer *gud-file*.
the directory containing file becomes the initial working directory
and source-file directory for your debugger." t)
#+end_src

* 未分類
#+begin_src emacs-lisp
;; -----------------------------------------------------------------------
;; Name     : ruby-electric.el --- electric editing commands for ruby files
;; Install  :
;; Function : かっこや do end などの対応関係を自動で補正してくれる
;; ------------------------------------------------------------------------
(require ' ruby-electric)
  (add-hook 'ruby-mode-hook '(lambda () (ruby-electric-mode t)))
  (setq ruby-electric-expand-delimiters-list nil)

;; -----------------------------------------------------------------------
;; Name     : ruby-electric.el --- electric editing commands for ruby files
;; Install  :
;; Function : かっこや do end などの対応関係を自動でハイライトしてくれる
;; ------------------------------------------------------------------------
(require 'ruby-block)
(ruby-block-mode t)
(setq ruby-block-highlight-toggle t)

;; -----------------------------------------------------------------------
;; Name     : RcodeTools
;; Install  : el-get
;; Function : Ruby 開発のツール群
;; ------------------------------------------------------------------------
(require 'rcodetools)
(setq rct-find-tag-if-available nil)
(defun ruby-mode-hook-rcodetools ()
  (define-key ruby-mode-map "\C-c\C-t" 'ruby-toggle-buffer)
  (define-key ruby-mode-map "\C-c\C-d" 'xmp)
  (define-key ruby-mode-map "\M-\C-i" 'rct-complete-symbol)
  (define-key ruby-mode-map "\C-c\C-f" 'rct-ri)
  )
(add-hook 'ruby-mode-hook 'ruby-mode-hook-rcodetools)

;; -----------------------------------------------------------------------
;; Name     : ruby-refactor
;; Install  : github (el-get 登録済み)
;;            https://github.com/ajvargo/ruby-refactor.git
;; Function : Ruby 用リファクタリングツール
;; ------------------------------------------------------------------------
(require 'ruby-refactor)
(add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)

;; -----------------------------------------------------------------------
;; Name     : inf-ruby
;; Install  : el-get
;; Function : emacs から irb を操作
;; ------------------------------------------------------------------------
(autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
(add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)

;; -----------------------------------------------------------------------
;; Name     : robocop 
;; Install  : checkstyle のようなスタイルの解析
;; Function : gem install rubocop
;; ------------------------------------------------------------------------
;;(require 'rubocop)
;;(add-hook 'ruby-mode 'rubocop-mode)

;; -----------------------------------------------------------------------
;; Name     : autotest
;; Install  : wget 
;; Function : rspec 自動実行
;; ------------------------------------------------------------------------
;; 動かん!
;; (require 'autotest)

;; -----------------------------------------------------------------------
;; Name     : rspec-mode
;; Install  : el-get
;; Function : rspec 拡張
;; ------------------------------------------------------------------------
(require 'rspec-mode)
(add-hook 'ruby-mode-hook 'rspec-mode)
(eval-after-load 'rspec-mode
  '(rspec-install-snippets))
(custom-set-variables '(rspec-use-rake-flag nil))
(custom-set-faces)

;; -----------------------------------------------------------------------
;; Name     : pry
;; Install  : git@github.com:jacott/emacs-pry.git
;; Function : 高機能 irb
;; ------------------------------------------------------------------------
;; (require 'pry)
;; optional suggestions
;;(global-set-key [S-f9] 'pry-intercept)
;;(global-set-key [f9] 'pry-intercept-rerun)

#+end_src
