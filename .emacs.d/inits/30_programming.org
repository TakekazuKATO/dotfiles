* Programming
  いろいろなプログラミング言語に関わる設定.

** Emacs as IDE 
   優れた IDE が備えるべき機能は以下
   - シンタックスハイライト
     - major-jode
   - 検索・置換
   - タグジャンプ
   - コード補間
     - auto-complete
   - エラーチェック
     - flymake
     - flycheck
   - リファクタリング
   - インタープリタ・デバッカ
  
* コンパイル
** smart-compile
   コマンドからコンパイル実行. 独自改造したものが, elisp にある.
   - http://www.emacswiki.org/emacs/download/smart-compile.el

   quickrun に乗り換えてみるため,いったんコメントアウト.

#+begin_src emacs-lisp
;; (use-package smart-compile)
;; (setq compilation-window-height 15)

;; (define-key ruby-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key java-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key python-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key 'c-mode-map (kbd "C-c r") 'smart-compile)
#+end_src

** quickrun
  コンパイルを実行. smart-compile よりいい??
  - https://github.com/syohex/emacs-quickrun

  C-u C-u quickrun で quickrun-compile-only
  -> 内部で M-x compile をりようしているため,
  エラー箇所にジャンプすることができる.

#+begin_src emacs-lisp
(use-package quickrun
  :bind ("C-c r" . quickrun)
  :config
  (push '("*quickrun*") popwin:special-display-config)
  (setq quickrun-timeout-seconds 20))
#+end_src

* プロジェクト管理
** projectile
   Project Interaction Library for Emacs.
   - https://github.com/bbatsov/projectile
   
   自動でプロジェクトのルートディレクトリを探して, 
   それ以下のファイルを見つけたり色々できる.
   - [[http://blog.en30.net/2014/10/20/development-environment.html][最近の開発環境: mjolnir, projectile, peco - blog.en30.net]]

   #+begin_src emacs-lisp
(use-package helm-projectile
  :defer t
  :config
  (projectile-global-mode)
  
  (when windows-p
    (setq projectile-indexing-method 'alien)
    )
  
  (helm-projectile-on)

  ;; プロジェクトに関連するファイルを helm-for-files に追加
  (defadvice helm-for-files (around update-helm-list activate)
    (let ((helm-for-files-preferred-list
	   (helm-for-files-update-list)))
      ad-do-it))
  
  (defun helm-for-files-update-list ()
    `(helm-source-buffers-list
      helm-source-recentf
      helm-source-ghq
      helm-source-files-in-current-dir
      helm-source-file-cache
      ,(if (projectile-project-p)
	   helm-source-projectile-files-list)))

  ;; helm-ag をプロジェクトルートから
  (defun projectile-helm-ag ()
    (interactive)
    (helm-ag (projectile-project-root)))
)
#+end_src

* タグジャンプ
** gtags
  - [[http://namamugi2011.blog.fc2.com/blog-entry-42.html][GNU GLOBAL と emacs でコードリーディング | ぷろぐらま]]


#+begin_src emacs-lisp
;; GNU global
(use-package gtags
  :bind
  (("\M-t" . gtags-find-tag) ;関数の定義元へ
  ("\M-r" . gtags-find-rtag) ;関数の参照先へ
  ("\M-s" . gtags-find-symbol) ;変数の定義元/ 参照先へ
  ;; ("\M-f" . gtags-find-file) ;ファイルにジャンプ
  ("\M-," . gtags-pop-stack));前のバッ ファに戻る
  :init  
  (add-hook 'c-mode-common-hook
	    '(lambda ()
	       (gtags-mode 1)
	       (gtags-make-complete-list)))
  )
#+end_src

** semantic mode

#+begin_src emacs-lisp
(semantic-mode 1)
#+end_src

* エラーチェック
** flymake
   静的文法チェック.

#+begin_src emacs-lisp
(use-package flymake
  :bind (("M-p"  . flymake-goto-prev-error)
	 ("M-n"  . flymake-goto-next-error)
	 ("C-c d" . flymake-display-err-menu-for-current-line))
  :init
  (add-hook 'find-file-hook 'flymake-find-file-hook)
  (add-hook 'c++-mode-hook '(lambda () (flymake-mode t)))
  (add-hook 'c-mode-hook '(lambda () (flymake-mode t)))
  (add-hook 'haskell-mode-hook (lambda () (flymake-mode t)))
  (add-hook 'emacs-lisp-mode-hook
	    (function (lambda () (if buffer-file-name (flymake-mode t)))))
  :config
  ;; GUI の警告は表示しない
  (setq flymake-gui-warnings-enabled nil)
#+end_src

*** Java
#+begin_src emacs-lisp
(defun flymake-java-init ()
  (list "my-java-flymake-checks"
	(list (flymake-init-create-temp-buffer-copy
	       'flymake-create-temp-with-folder-structure))))

(add-to-list 'flymake-allowed-file-name-masks
	     '("\\.java$" flymake-java-init flymake-simple-cleanup))
#+end_src

*** C/C++ 
#+begin_src emacs-lisp
(defun flymake-cc-init ()
  (let* ((temp-file   (flymake-init-create-temp-buffer-copy
		       'flymake-create-temp-inplace))
	 (local-file  (file-relative-name
		       temp-file
		       (file-name-directory buffer-file-name))))
    (list "g++" (list "-Wall" "-Wextra" "-fsyntax-only" local-file))))

(push '("\\.c$" flymake-cc-init) flymake-allowed-file-name-masks)
(push '("\\.cpp$" flymake-cc-init) flymake-allowed-file-name-masks)
#+end_src

*** Haskell
*** Python

#+begin_src emacs-lisp
(defun flymake-pyflakes-init ()
  (when (not (subsetp (list (current-buffer)) (tramp-list-remote-buffers)))
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
		       'flymake-create-temp-inplace))
	   (local-file (file-relative-name
			temp-file
			(file-name-directory buffer-file-name))))
      (list "pyflakes" (list local-file)))))

(add-to-list 'flymake-allowed-file-name-masks
	     '("\\.py$" flymake-pyflakes-init))
#+end_src

*** Emacs lisp
    - [[http://www.lunaport.net/blog/2010/02/windowsflymake-elisp-1.html][Windows でも手軽に flymake elisp (修正版) - るなぽブログ]]

#+begin_src emacs-lisp
(defun flymake-elisp-init ()
  (unless (string-match "^ " (buffer-name))
    (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
           (local-file  (file-relative-name
                         temp-file
                         (file-name-directory buffer-file-name))))
      (list
       (expand-file-name invocation-name invocation-directory)
       (list
        "-Q" "--batch" "--eval"
        (prin1-to-string
         (quote
          (dolist (file command-line-args-left)
            (with-temp-buffer
              (insert-file-contents file)
              (emacs-lisp-mode)
              (let ((parse-sexp-ignore-comments t))
                (condition-case data
                    (scan-sexps (point-min) (point-max))
                  (scan-error
                   (goto-char (nth 2 data))
                   (princ (format "%s:%s: error: Unmatched bracket or quote\n"
                                  file (line-number-at-pos))))))))
          )
         )
        local-file)))))

(push '("\\.el$" flymake-elisp-init) flymake-allowed-file-name-masks)
#+end_src

*** End of flymake
#+begin_src emacs-lisp
)
#+end_src

** flycheck
   静的文法チェック.

   コンパイルエラーが取れないので一旦動作停止.

#+begin_src emacs-lisp
(use-package flycheck
  :disabled t
  :defer t
  :init
  ;; Ruby
  ;; (add-hook 'ruby-mode-hook 'flycheck-mode)
  :config
  ;;(setq flycheck-check-syntax-automatically '(mode-enabled save))

  ;; definition for flycheck
  (flycheck-define-checker ruby-rubocop
    "A Ruby syntax and style checker using the RuboCop tool.
     See URL `http://batsov.com/rubocop/'."
    :command ("rubocop" "--format" "emacs" "--silent"
	      (config-file "--config" flycheck-rubocoprc)
	      source)
    :error-patterns
    ((warning line-start
	      (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	      line-end)
     (error line-start
	    (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	    line-end))
    :modes (ruby-mode))

  ;; definition for flycheck
  (flycheck-define-checker ruby-rubylint
    "A Ruby syntax and style checker using the rubylint tool."
    :command ("ruby-lint" source)
    :error-patterns
    ((warning line-start
	      (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	      line-end)
     (error line-start
	    (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	    line-end))
    :modes (ruby-mode))
  )

#+end_src

*** flycheck-color-mode-line

#+begin_src emacs-lisp
(use-package flycheck-color-mode-line
  :disabled t
  :defer t
  :init
  (eval-after-load "flycheck"
    '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
)
#+end_src

* リファクタリング
** emacs-refactor
   - https://github.com/chrisbarrett/emacs-refactor

#+begin_src emacs-lisp
(use-package emr
  :init
  (define-key prog-mode-map (kbd "M-RET") 'emr-show-refactor-menu)
  (add-hook 'prog-mode-hook 'emr-initialize))
#+end_src

* Utils
** ediff
   emacs よう diff ツール
   - http://www.emacswiki.org/emacs/EdiffMode

   #+begin_src emacs-lisp
(use-package ediff
  :defer t
  :config
  ;; コントロール用のバッファを同一フレーム内に表示
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  ;; 縦に分割
  (setq ediff-split-window-function 'split-window-horizontally)
  ;; ウィンドウサイズによっては横分割
  (setq ediff-split-window-function (if (> (frame-width) 150)
					'split-window-horizontally
				      'split-window-vertically))
  )
#+end_src

** tdd
   Test-Driven Development 用の Elisp??
   なんか, エラーしてもグリーンな気がする.

#+begin_src emacs-lisp
(use-package tdd :disabled t)
#+end_src

* git
** magit
   Emacs の Git Client.

   https://github.com/magit/magit
   http://qiita.com/takc923/items/c7a11ff30caedc4c5ba7

   チーとシーと
   http://daemianmack.com/magit-cheatsheet.html

   #+begin_src emacs-lisp
(use-package magit
  :bind ("C-c m" . magit-status)
  :commands (magit magit-svn)
  :config
  (setq magit-git-executable "git")
  (setq magit-emacsclient-executable "emacsclient")
  )
#+end_src

** gist
  Emacs gist interface
  - https://github.com/defunkt/gist.el

#+begin_src emacs-lisp
(use-package gist)
#+end_src

  helm-gist というのもあるけど, 使い方わからない.
  - https://github.com/emacs-helm/helm-gist/blob/master/helm-gist.el

** git-gutter
   前回分との差分が見えるツール
   - https://github.com/syohex/emacs-git-gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :idle
  (global-git-gutter-mode +1)
  (git-gutter:linum-setup))
#+end_src
     
** github 関連
 #+begin_src emacs-lisp
;; git 管理のシンボリックリンクで質問されないためのおまじない.
;; 参考: http://openlab.dino.co.jp/2008/10/30/212934368.html
;;; avoid "Symbolic link to Git-controlled source file;; follow link? (yes or no)
(setq git-follow-symlinks t)
 #+end_src
