* Programing
いろいろなプログラミング言語に関わる設定。


* コンパイル
** smart-compile
コマンドからコンパイル実行. 独自改造したものが、elispにある。

http://www.emacswiki.org/emacs/download/smart-compile.el

#+begin_src emacs-lisp
(require 'smart-compile)
(setq compilation-window-height 15)
#+end_src

** quickrun
コンパイルを実行。smart-compileよりいい？？

- https://github.com/syohex/emacs-quickrun

#+begin_src emacs-lisp
(require 'quickrun)
#+end_src

* 未整理

#+begin_src emacs-lisp
;; -----------------------------------------------------------------------
;; Name     : flymake
;; Function : 静的文法チェック
;; History  : 2014/02/06
;; Install  : package.el
;; ------------------------------------------------------------------------
(require 'flymake)

;; GUIの警告は表示しない
(setq flymake-gui-warnings-enabled nil)

;; 全てのファイルで flymakeを有効化
(add-hook 'find-file-hook 'flymake-find-file-hook)

;; M-p/M-n で警告/エラー行の移動
(global-set-key "\M-p" 'flymake-goto-prev-error)
(global-set-key "\M-n" 'flymake-goto-next-error)

;; 警告エラー行の表示
(global-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)

(defun my-flymake-init ()
  (list "my-java-flymake-checks"
        (list (flymake-init-create-temp-buffer-copy
               'flymake-create-temp-with-folder-structure))))
(add-to-list 'flymake-allowed-file-name-masks
             '("\\.java$" my-flymake-init flymake-simple-cleanup))

;;(require 'flymake-ruby)
;;(add-hook 'enh-ruby-mode-hook 'flymake-ruby-load)

;; -----------------------------------------------------------------------
;; Name     : flycheck
;; Function : 静的文法チェック
;; History  : 2014/02/06
;; Install  : package.el
;; ------------------------------------------------------------------------
(require 'flycheck)
;;(setq flycheck-check-syntax-automatically '(mode-enabled save))

(require 'flycheck-color-mode-line)
(eval-after-load "flycheck"
  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

;; Ruby
;; (add-hook 'ruby-mode-hook 'flycheck-mode)

;; definition for flycheck
(flycheck-define-checker ruby-rubocop
  "A Ruby syntax and style checker using the RuboCop tool.
   See URL `http://batsov.com/rubocop/'."
  :command ("rubocop" "--format" "emacs" "--silent"
	    (config-file "--config" flycheck-rubocoprc)
	    source)
  :error-patterns
  ((warning line-start
	    (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	    line-end)
   (error line-start
	  (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	  line-end))
  :modes (ruby-mode))

;; definition for flycheck
(flycheck-define-checker ruby-rubylint
  "A Ruby syntax and style checker using the rubylint tool."
  :command ("ruby-lint" source)
  :error-patterns
  ((warning line-start
	    (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	    line-end)
   (error line-start
	  (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	  line-end))
  :modes (ruby-mode))

;; -----------------------------------------------------------------------
;; Name     : github関連
;; ------------------------------------------------------------------------
;; 起動時にproxyパスワードが求められるので一旦封印する
;; (require 'helm-github-issues)
;; (require 'helm-open-github)

;; -----------------------------------------------------------------------
;; Name     : magit
;; Install  : el-get
;; Function : Emacsの Git Client
;; Refs
;; https://github.com/magit/magit
;; http://qiita.com/takc923/items/c7a11ff30caedc4c5ba7
;; チーとシーと
;; http://daemianmack.com/magit-cheatsheet.html
;; ------------------------------------------------------------------------
(autoload 'magit "magit" "An Emacs mode for Git" t t)
(autoload 'magit-svn "magit-svn" "An Emacs mode for Subversion" t t)

(setq magit-git-executable "git")
(setq magit-emacsclient-executable "emacsclient")

(define-key global-map (kbd "C-c m") 'magit-status)

;; ------------------------------------------------------------------------
;; Name     : ediff
;; Function : emacsようdiffツール
;; build-in :
;; http://www.emacswiki.org/emacs/EdiffMode
;;; ------------------------------------------------------------------------
;; コントロール用のバッファを同一フレーム内に表示
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; 縦に分割
(setq ediff-split-window-function 'split-window-horizontally)
;; ウィンドウサイズによっては横分割
(setq ediff-split-window-function (if (> (frame-width) 150)
				      'split-window-horizontally
				    'split-window-vertically))
#+end_src
