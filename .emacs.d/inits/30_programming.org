* Programing
  いろいろなプログラミング言語に関わる設定.

* コンパイル
** smart-compile
   コマンドからコンパイル実行. 独自改造したものが, elisp にある.
   - http://www.emacswiki.org/emacs/download/smart-compile.el

   quickrun に乗り換えてみるため,いったんコメントアウト.

#+begin_src emacs-lisp
;; (use-package smart-compile)
;; (setq compilation-window-height 15)

;; (define-key ruby-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key java-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key python-mode-map (kbd "C-c r") 'smart-compile)
;; (define-key 'c-mode-map (kbd "C-c r") 'smart-compile)
#+end_src

** quickrun
  コンパイルを実行. smart-compile よりいい??
  - https://github.com/syohex/emacs-quickrun

  C-u C-u quickrun で quickrun-compile-only
  -> 内部で M-x compile をりようしているため,
  エラー箇所にジャンプすることができる.

#+begin_src emacs-lisp
(use-package quickrun)
(push '("*quickrun*") popwin:special-display-config)
(global-set-key (kbd "C-c r") 'quickrun)

(setq quickrun-timeout-seconds 20)
#+end_src

* プロジェクト管理
** project-mode
   Emacs global minor mode for defining and navigating projects.

   GTD のプロジェクトと連携させるのはいいかもね.
   - タスクのかたまりはプロジェクトとして管理
   - プロジェクトは git で版数管理

   #+begin_src emacs-lisp
   (autoload 'project-mode "project-mode" "Project Mode" t)
   #+end_src

** projectile
   Project Interaction Library for Emacs.
   - https://github.com/bbatsov/projectile
   
   自動でプロジェクトのルートディレクトリを探して, 
   それ以下のファイルを見つけたり色々できる.

   - [[http://blog.en30.net/2014/10/20/development-environment.html][最近の開発環境: mjolnir, projectile, peco - blog.en30.net]]

#+begin_src emacs-lisp
(projectile-global-mode)

(when windows-p
(setq projectile-indexing-method 'alien)
)

(use-package helm-projectile)
(helm-projectile-on)

;; プロジェクトに関連するファイルを helm-for-files に追加
(defadvice helm-for-files (around update-helm-list activate)
  (let ((helm-for-files-preferred-list
         (helm-for-files-update-list)))
    ad-do-it))

(defun helm-for-files-update-list ()
  `(helm-source-buffers-list
    helm-source-recentf
    helm-source-ghq
    helm-source-files-in-current-dir
    helm-source-file-cache
    ,(if (projectile-project-p)
     helm-source-projectile-files-list)))

;; helm-ag をプロジェクトルートから
(defun projectile-helm-ag ()
  (interactive)
  (helm-ag (projectile-project-root)))
#+end_src


* タグジャンプ
** gtags

  - [[http://namamugi2011.blog.fc2.com/blog-entry-42.html][GNU GLOBAL と emacs でコードリーディング | ぷろぐらま]]

#+begin_src emacs-lisp
;; GNU global
(when (locate-library "gtags") (use-package gtags))
(global-set-key "\M-t" 'gtags-find-tag) ;関数の定義元へ
(global-set-key "\M-r" 'gtags-find-rtag) ;関数の参照先へ
(global-set-key "\M-s" 'gtags-find-symbol) ;変数の定義元/ 参照先へ
;; (global-set-key "\M-f" 'gtags-find-file) ;ファイルにジャンプ
(global-set-key "\M-," 'gtags-pop-stack);前のバッ ファに戻る

(add-hook 'c-mode-common-hook
	  '(lambda ()
	     (gtags-mode 1)
	     (gtags-make-complete-list)))
#+end_src

* エラーチェック
** flycheck
   静的文法チェック.

#+begin_src emacs-lisp
(use-package flymake)

;; GUI の警告は表示しない
(setq flymake-gui-warnings-enabled nil)

;; 全てのファイルで flymake を有効化
(add-hook 'find-file-hook 'flymake-find-file-hook)

;; M-p/M-n で警告/ エラー行の移動
(global-set-key "\M-p" 'flymake-goto-prev-error)
(global-set-key "\M-n" 'flymake-goto-next-error)

;; 警告エラー行の表示
(global-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)

(defun my-flymake-init ()
  (list "my-java-flymake-checks"
        (list (flymake-init-create-temp-buffer-copy
               'flymake-create-temp-with-folder-structure))))
(add-to-list 'flymake-allowed-file-name-masks
             '("\\.java$" my-flymake-init flymake-simple-cleanup))

;;(use-package flymake-ruby)
;;(add-hook 'enh-ruby-mode-hook 'flymake-ruby-load)
#+end_src

** flycheck
   静的文法チェック.

#+begin_src emacs-lisp
(use-package flycheck)
;;(setq flycheck-check-syntax-automatically '(mode-enabled save))

(use-package flycheck-color-mode-line)
(eval-after-load "flycheck"
  '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

;; Ruby
;; (add-hook 'ruby-mode-hook 'flycheck-mode)

;; definition for flycheck
(flycheck-define-checker ruby-rubocop
  "A Ruby syntax and style checker using the RuboCop tool.
   See URL `http://batsov.com/rubocop/'."
  :command ("rubocop" "--format" "emacs" "--silent"
	    (config-file "--config" flycheck-rubocoprc)
	    source)
  :error-patterns
  ((warning line-start
	    (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	    line-end)
   (error line-start
	  (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	  line-end))
  :modes (ruby-mode))

;; definition for flycheck
(flycheck-define-checker ruby-rubylint
  "A Ruby syntax and style checker using the rubylint tool."
  :command ("ruby-lint" source)
  :error-patterns
  ((warning line-start
	    (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
	    line-end)
   (error line-start
	  (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
	  line-end))
  :modes (ruby-mode))
#+end_src

* Utils
** ediff
   emacs よう diff ツール

   http://www.emacswiki.org/emacs/EdiffMode

#+begin_src emacs-lisp
;; コントロール用のバッファを同一フレーム内に表示
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; 縦に分割
(setq ediff-split-window-function 'split-window-horizontally)
;; ウィンドウサイズによっては横分割
(setq ediff-split-window-function (if (> (frame-width) 150)
				      'split-window-horizontally
				    'split-window-vertically))
#+end_src

** tdd
   Test-Driven Development 用の Elisp??
   なんか, エラーしてもグリーンな気がする.

#+begin_src emacs-lisp
(use-package tdd)
#+end_src

* git
** magit
   Emacs の Git Client.

   https://github.com/magit/magit
   http://qiita.com/takc923/items/c7a11ff30caedc4c5ba7

   チーとシーと
   http://daemianmack.com/magit-cheatsheet.html

   #+begin_src emacs-lisp
   (autoload 'magit "magit" "An Emacs mode for Git" t t)
   (autoload 'magit-svn "magit-svn" "An Emacs mode for Subversion" t t)
   
   (setq magit-git-executable "git")
   (setq magit-emacsclient-executable "emacsclient")

   (define-key global-map (kbd "C-c m") 'magit-status)
   #+end_src

** github 関連

 #+begin_src emacs-lisp
;; (use-package helm-github-issues)
;; (use-package helm-open-github)

;; git 管理のシンボリックリンクで質問されないためのおまじない.
;; 参考: http://openlab.dino.co.jp/2008/10/30/212934368.html
;;; avoid "Symbolic link to Git-controlled source file;; follow link? (yes or no)
(setq git-follow-symlinks t)
 #+end_src

