* Text
  テキスト編集. Emacs の底力を発揮する!

* 編集
** cua-mode
   矩形編集.

   #+begin_src emacs-lisp
   (cua-mode t)
   (setq cua-enable-cua-keys nil) ; デフォルトキーバインドを無効化
   (define-key global-map (kbd "C-x SPC") 'cua-set-rectangle-mark)
   #+end_src

** multiple-cursurs
   Awesome Emacs Rocks! http://shibayu36.hatenablog.com/entry/2013/12/30/190354

   - [[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el]]

   どうも, no window だとうまく動作しない.
   うまく動かないとき, ~/.emacs.d/.mc-lists.el を削除したらうまくいくようになった.

   https://github.com/magnars/multiple-cursors.el/issues/121

   #+begin_src emacs-lisp
   (require 'multiple-cursors)
   (global-set-key (kbd "C-M-c") 'mc/edit-lines)
   (global-set-key (kbd "C-M-r") 'mc/mark-all-in-region)
   
   (global-set-key (kbd "C-]") 'mc/mark-next-like-this)
   (global-set-key (kbd "C-M-]") 'mc/mark-previous-like-this)
   (global-set-key (kbd "C-c C-]") 'mc/mark-all-like-this)
   #+end_src

** expand-region
   Awesome Emacs Rocks! 

   リージョンを広げる
   http://d.hatena.ne.jp/syohex/20120117/1326814127

   #+begin_src emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-\\") 'er/expand-region)
(global-set-key (kbd "C-M-\\") 'er/contract-region)

;; 選択ができるようにしておく
;; (transient-mark-mode t)
   #+end_src

** Yassnipet
   スニペット管理

   #+begin_src emacs-lisp
;; 問い合わせを簡略化 yes/no を y/n
(fset 'yes-or-no-p 'y-or-n-p)
(require 'yasnippet)
(yas-load-directory "~/.emacs.d/snippets")

(yas-global-mode 1)

;; メニューは使わない
(setq yas/use-menu nil)

;; 既存スニペットを挿入する
(define-key yas-minor-mode-map (kbd "C-x i i") 'helm-c-yas-complete)
;; 新規スニペットを作成するバッファを用意する
(define-key yas-minor-mode-map (kbd "C-x i n") 'yas-new-snippet)
;; 既存スニペットを閲覧・編集する
(define-key yas-minor-mode-map (kbd "C-x i v") 'helm-c-yas-visit-snippet-file)
   #+end_src

** auto-complete
   自動補完を実現する elisp

   - http://www.emacswiki.org/emacs/auto-complete-extension.el
   - http://cx4a.org/software/auto-complete/index.ja.html

   #+begin_src emacs-lisp
(require 'auto-complete-config)
(ac-config-default)

(setq ac-auto-show-menu 0.5)
(setq ac-menu-height 20)

(when (require 'auto-complete nil t)
  (global-auto-complete-mode t)
  (setq ac-dwim nil)
  ;;  (set-face-background 'ac-selection-face "steelblue")
  ;;  (set-face-background 'ac-menu-face "skyblue")
  
  ;; 4 文字以上から補完スタート 
  ;; (setq ac-auto-start nil)
  (setq ac-auto-start 4)
  
  ;; その代わり補完キーでトリガさせる.
  (global-set-key "\M-/" 'ac-start)

  ;; なぜか, Shift+Alt でないと動かないのだが. .
  (define-key ac-menu-map (kbd "M-n") 'ac-next)
  (define-key ac-menu-map (kbd "M-p") 'ac-previous)

  (setq ac-sources '(ac-source-abbrev ac-source-words-in-buffer))
  (add-hook 'ruby-mode-hook
	    (lambda ()
	      (require 'rcodetools)
	      (require 'auto-complete-ruby)
	      ;; (load-auto-complete)
	      (make-local-variable 'ac-omni-completion-sources)
	      (setq ac-omni-completion-sources
		    '(("\\.\\=" . (ac-source-rcodetools)))))))
   #+end_src

** undo-tree
   C-x u にバインディング.

   #+begin_src emacs-lisp
   (require 'undo-tree)
   (global-undo-tree-mode)
   #+end_src

** keisen
   罫線を引く
   www.pitecan.com/Keisen/keisen.el.

   #+begin_src emacs-lisp
;;(require 'keisen)
;;; Control+ 矢印キーで罫線を引く場合
;; (global-set-key (kbd "C-M-f") 'keisen-right-move)
;;(global-set-key (kbd "C-M-b") 'keisen-left-move)
;;(global-set-key (kbd "C-M-p") 'keisen-up-move)
;;(global-set-key (kbd "C-M-n") 'keisen-down-move)

;;(global-set-key [(C-right)] 'keisen-right-move)
;;(global-set-key [(C-left)] 'keisen-left-move)
;;(global-set-key [(C-up)] 'keisen-up-move)
;;(global-set-key [(C-down)] 'keisen-down-move)
   #+end_src
* 移動
** ace-jump-mode
   Awesome Emacs Rocks! 

   #+begin_src emacs-lisp
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-x ,") 'ace-jump-mode)
   #+end_src

** ace-jump-buffer
   #+begin_src emacs-lisp
(autoload
  'ace-jump-buffer
  "ace-jump-buffer"
  "Emacs quick move to buffer minor mode"
  t)
(define-key global-map (kbd "C-x m") 'ace-jump-buffer)
   #+end_src

** isearch-ace-jump-mode
   Do ace-jump from isearch.

   isearch の初めの一文字を入力して待っていると, ace-jump-char 発動.
   isearch して, しばらく入力しないと swoop 発動.

   - https://github.com/tam17aki/isearch-ace-jump-mode
   - http://qiita.com/ballforest/items/7c3f2e64b59d8157bc8c

   #+begin_src emacs-lisp
(require 'isearch-ace-jump)
(global-isearch-ace-jump-mode +1)

;; Default だと 0.4 だけど, それだと早い.
(setq isearch-ace-jump-input-idle-delay 1.0)

(define-key swoop-map (kbd "C-s") 'swoop-action-goto-line-next)
(define-key swoop-map (kbd "C-r") 'swoop-action-goto-line-prev)
   #+end_src

** iy-go-to-char

   前後の char へ移動する. ace-jump-mode があれば不要かな. . .

   - https://github.com/doitian/iy-go-to-char

   #+begin_src emacs-lisp
;; (require 'iy-go-to-char)
;; (global-set-key (kbd "C-c f") 'iy-go-to-char)
;; (global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
;; (global-set-key (kbd "C-c ;") 'iy-go-to-or-up-to-continue)
;; (global-set-key (kbd "C-c ,") 'iy-go-to-or-up-to-continue-backward)
;; (global-set-key (kbd "C-c f") 'iy-go-up-to-char)
;; (global-set-key (kbd "C-c F") 'iy-go-up-to-char-backward)

(add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
   #+end_src

** jump-char
   iy-go-to-char よりよさそう

   ;で前. , で後ろ. C-c C-c で ace-jump-mode に切り替え.

   - https://github.com/lewang/jump-char

   #+begin_src emacs-lisp
   (require 'jump-char)
   ;; (global-set-key (kbd "C-c f") 'jump-char-forward)
   ;; (global-set-key (kbd "C-c F") 'jump-char-backward)
   ;; key-chord にかえる
   #+end_src
** chord-key
   キーバインド割り当て. jump-char と一緒に利用.

   #+begin_src emacs-lisp
   (require 'key-chord)
   (key-chord-mode 1)
   (setq key-chord-two-keys-delay 0.08)
   
   ; buffer actions
   (key-chord-define-global "jk" 'jump-char-forward)
   (key-chord-define-global "jh" 'jump-char-backward)
   #+end_src
* 検索・置換
** migemo
   日本語をロ-マ字検索

   #+begin_src emacs-lisp
  (require 'migemo)
  (when linux-p
  (setq migemo-command "cmigemo")
  (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
  )
  (when windows-p
  (setq migemo-command "C://app//cmigemo-default-win64//cmigemo")
  (setq migemo-dictionary "C://app//cmigemo-default-win64//dict//utf-8")
  )
  (setq migemo-options '("-q" "--emacs" "-i" "\g"))
  (setq migemo-user-dictionary nil)
  (setq migemo-regex-dictionary nil)
  (setq migemo-coding-system 'utf-8-unix)
  (load-library "migemo")
  (migemo-init)

  ;; for emacs 24.3
  ;; http://wp.kncn.net/archives/6025
  (setq search-whitespace-regexp nil)

   #+end_src
** anzu
   インタラクティブ検索, 置換

   - [[https://github.com/syohex/emacs-anzu][syohex/emacs-anzu]]
   - http://qiita.com/syohex/items/56cf3b7f7d9943f7a7ba

   #+begin_src emacs-lisp
(require 'anzu)
(global-anzu-mode +1)
(set-face-attribute 'anzu-mode-line nil
		    :foreground "yellow" :weight 'bold)

(custom-set-variables
 '(anzu-mode-lighter "")
 '(anzu-deactivate-region t)
 '(anzu-search-threshold 1000)
 '(anzu-replace-to-string-separator " => "))
   #+end_src

** swoop
   Peculiar buffer navigation for Emacs.

   #+begin_src emacs-lisp
(require 'swoop)
(global-set-key (kbd "M-o")   'swoop)
(global-set-key (kbd "C-M-o") 'swoop-multi)
;; (global-set-key (kbd "M-o")   'swoop-pcre-regexp)
(global-set-key (kbd "C-S-o") 'swoop-back-to-last-position)

(define-key isearch-mode-map (kbd "M-o") 'swoop-from-isearch)
(define-key swoop-map (kbd "M-o") 'swoop-multi-from-swoop)
	
;; サイズ変更禁止
(setq swoop-font-size-change: nil)
   #+end_src

** iedit
   https://github.com/tsdh/iedit

   #+begin_src emacs-lisp
(require 'iedit)
   #+end_src
* 日本語
** text-adjust
   - text-adjust-codecheck : 半角カナ, 規格外文字を「〓」に置き換える.
   - text-adjust-hankaku   : 全角英数文字を半角にする.
   - text-adjust-kutouten  : 句読点を「, 」「. 」に置き換える.
   - text-adjust-space     : 全角文字と半角文字の間に空白を入れる.

   これは便利だ.

   - [[http://www.emacswiki.org/emacs/InsertSpaceBetweenZenkakuAndHankaku][EmacsWiki: Insert Space Between Zenkaku And Hankaku]]
   - [[http://d.hatena.ne.jp/rubikitch/20090220/text_adjust][全角文字と半角文字の間に自動でスペースを開ける text-adjust.el を使ってみた ]]
   - http://www.rubyist.net/~rubikitch/archive/mell.el
   - http://www.rubyist.net/~rubikitch/archive/text-adjust.el

** yspel
   Yahoo の文章校正ツールを利用した日本語スペルチェック!

   - [[http://ubulog.blogspot.jp/2010/09/emacs.html][ubulog: Emacs から校正支援する]]

   #+begin_src emacs-lisp
   (require 'yspel)
   #+end_src


   #+begin_src emacs-lisp
   (require 'text-adjust)
   (defun text-adjust-space-before-save-if-needed ()
   (when (memq major-mode
               '(org-mode text-mode wl-draft-mode))
	       (text-adjust-buffer)))
	       ;;           (text-adjust-space-buffer)))
    (defalias 'spacer 'text-adjust-space-buffer)
    (add-hook 'before-save-hook 'text-adjust-space-before-save-if-needed)
   #+end_src
* 英語
** aspell
   昔は ispell, 今は aspell が主流らしい.

   #+begin_src sh
   sudo pacman -S aspell aspell-en.
   #+end_src

   デフォルトだと日本語辞書を探そうとするため,
   以下のおまじないをし, 英語の辞書を検索するようにする.

   #+begin_src sh
   echo "lang en_US" >> ~/.aspell.conf
   #+end_src

   aspell にパスを通す.

   #+begin_src emacs-lisp
   (when (file-executable-p "/usr/bin/aspell")
   (setq-default ispell-program-name "aspell"))
   #+end_src

   日本語はスキップ.

   #+begin_src emacs-lisp
   (eval-after-load "ispell"
      '(add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
   #+end_src

   - バッファ全体をスペルチェック M-x ispell-buffer
   - 選択範囲だけスペルチェック M-x ispell-region

** flyspell
   リアルタイム, スペルチェック.

   - [[http://www.gfd-dennou.org/member/uwabami/cc-env/emacs/flyspell_config.html][Youhei SASAKI's official site: flyspell-mode の設定]]

   #+begin_src emacs-lisp
   (require 'flyspell)
   #+end_src

   - [[http://d.hatena.ne.jp/mooz/20100423/p1][flyspell-mode の修正候補表示を popup.el で - mooz deceives you]]

     キーバインドを設定.

   #+begin_src emacs-lisp
  (global-set-key (kbd "C-c <f8>") 'flyspell-mode)
  (global-set-key (kbd "C-c <f9>") 'ispell-word)
  (global-set-key (kbd "C-c <f10>") 'flyspell-buffer)
   #+end_src

   どうも flyspell と ac-complete は相性が悪い?

   #+BEGIN_SRC emacs-lisp
   (ac-flyspell-workaround)
   #+END_SRC

*** あるモードのみ flysell を起動

    コメント領域のところだけ有効.

    #+begin_src emacs-lisp
    (mapc
    (lambda (hook)
    (add-hook hook 'flyspell-prog-mode))
    '(
    c-mode-common-hook
    ruby-mode-hook
    emacs-lisp-mode-hook   
    ))
    #+end_src

    特定のモードで有効.

    #+begin_src emacs-lisp
    (mapc
    (lambda (hook)
    (add-hook hook
    '(lambda () (flyspell-mode 1))))
    '(
    text-mode-hook
    org-mode-hook
    wl-draft-mode-hook
    ))
    #+end_src
