* Text
テキスト編集。

* cua-mode
矩形編集。

#+begin_src emacs-lisp
(cua-mode t)
(setq cua-enable-cua-keys nil) ; デフォルトキーバインドを無効化
(define-key global-map (kbd "C-x SPC") 'cua-set-rectangle-mark)
#+end_src

* multiple-cursurs
Awesome Emacs Rocks! 

http://shibayu36.hatenablog.com/entry/2013/12/30/190354

- [[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el]]

どうも、no windowだとうまく動作しない。。

#+begin_src emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C-M-c") 'mc/edit-lines)
(global-set-key (kbd "C-M-r") 'mc/mark-all-in-region)

(global-set-key (kbd "C-]") 'mc/mark-next-like-this)
(global-set-key (kbd "C-M-]") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-]") 'mc/mark-all-like-this)
#+end_src

#+RESULTS:

* expand-region
Awesome Emacs Rocks! 

リージョンを広げる
http://d.hatena.ne.jp/syohex/20120117/1326814127

#+begin_src emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-\\") 'er/expand-region)
(global-set-key (kbd "C-M-\\") 'er/contract-region)

;; 選択ができるようにしておく
;; (transient-mark-mode t)
#+end_src

* ace-jump-mode
Awesome Emacs Rocks! 

#+begin_src emacs-lisp
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-x ,") 'ace-jump-mode)
#+end_src

* ace-jump-buffer
#+begin_src emacs-lisp
(autoload
  'ace-jump-buffer
  "ace-jump-buffer"
  "Emacs quick move to buffer minor mode"
  t)
(define-key global-map (kbd "C-x m") 'ace-jump-buffer)
#+end_src

* iy-go-to-char

前後のcharへ移動する。ace-jump-modeがあれば不要かな。。。

- https://github.com/doitian/iy-go-to-char

#+begin_src emacs-lisp
;; (require 'iy-go-to-char)
;; (global-set-key (kbd "C-c f") 'iy-go-to-char)
;; (global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
;; (global-set-key (kbd "C-c ;") 'iy-go-to-or-up-to-continue)
;; (global-set-key (kbd "C-c ,") 'iy-go-to-or-up-to-continue-backward)
;; (global-set-key (kbd "C-c f") 'iy-go-up-to-char)
;; (global-set-key (kbd "C-c F") 'iy-go-up-to-char-backward)

(add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
#+end_src

* jump-char
iy-go-to-charよりよさそう

;で前. , で後ろ。 C-c C-c で ace-jump-modeに切り替え。

- https://github.com/lewang/jump-char

#+begin_src emacs-lisp
(require 'jump-char)
;; (global-set-key (kbd "C-c f") 'jump-char-forward)
;; (global-set-key (kbd "C-c F") 'jump-char-backward)
;; key-chordにかえる
#+end_src

* chord-key

#+begin_src emacs-lisp
(require 'key-chord)
(key-chord-mode 1)
(setq key-chord-two-keys-delay 0.08)

; buffer actions
(key-chord-define-global "jk" 'jump-char-forward)
(key-chord-define-global "jh" 'jump-char-backward)
#+end_src

* Yassnipet
スニペット管理

#+begin_src emacs-lisp
;; 問い合わせを簡略化 yes/no を y/n
(fset 'yes-or-no-p 'y-or-n-p)
(require 'yasnippet)
(yas-load-directory "~/.emacs.d/snippets")

(yas-global-mode 1)

;; メニューは使わない
(setq yas/use-menu nil)

;; 既存スニペットを挿入する
(define-key yas-minor-mode-map (kbd "C-x i i") 'helm-c-yas-complete)
;; 新規スニペットを作成するバッファを用意する
(define-key yas-minor-mode-map (kbd "C-x i n") 'yas-new-snippet)
;; 既存スニペットを閲覧・編集する
(define-key yas-minor-mode-map (kbd "C-x i v") 'helm-c-yas-visit-snippet-file)
#+end_src


* 未分類
#+begin_src emacs-lisp
;; ------------------------------------------------------------------------
;; Name     : auto-complete
;; URL      : http://www.emacswiki.org/emacs/auto-complete-extension.el
;; Function : 自動補完を実現するelisp
;; History  : 13/10/14
;; Manual:
;; http://cx4a.org/software/auto-complete/index.ja.html
;; ------------------------------------------------------------------------
;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/dict")
(require 'auto-complete-config)
(ac-config-default)

(setq ac-auto-show-menu 0.5)
(setq ac-menu-height 20)

(when (require 'auto-complete nil t)
  (global-auto-complete-mode t)
  (setq ac-dwim nil)
  ;;  (set-face-background 'ac-selection-face "steelblue")
  ;;  (set-face-background 'ac-menu-face "skyblue")
  
  ;; 4文字以上から補完スタート 
  ;; (setq ac-auto-start nil)
  (setq ac-auto-start 4)
  
  ;; その代わり補完キーでトリガさせる。
  (global-set-key "\M-/" 'ac-start)

  ;; なぜか、Shift+Altでないと動かないのだが。。
  (define-key ac-menu-map (kbd "M-n") 'ac-next)
  (define-key ac-menu-map (kbd "M-p") 'ac-previous)

  (setq ac-sources '(ac-source-abbrev ac-source-words-in-buffer))
  (add-hook 'ruby-mode-hook
	    (lambda ()
	      (require 'rcodetools)
	      (require 'auto-complete-ruby)
	      ;; (load-auto-complete)
	      (make-local-variable 'ac-omni-completion-sources)
	      (setq ac-omni-completion-sources
		    '(("\\.\\=" . (ac-source-rcodetools)))))))

;; ------------------------------------------------------------------------
;; Name     : migemo
;; Function : 日本語をロ-マ字検索
;; History  : 2014.1.25 Add
;; Install  : sudo apt-get install cmigemo
;;
;; ------------------------------------------------------------------------
(when linux-p
(when (and (executable-find "cmigemo")
	   (require 'migemo nil t))
  (setq migemo-options '("-q" "--emacs"))

  (setq migemo-user-dictionary nil)
  (setq migemo-regex-dictionary nil)
  (setq migemo-coding-system 'utf-8-unix)
  (load-library "migemo")
  (migemo-init)
  )
)


(setq migemo-command "cmigemo")
(setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict")

;; ------------------------------------------------------------------------
;; Name     : keisen
;; Function : 罫線を引く
;; History  : 2014.1.29 Add
;; Install  : www.pitecan.com/Keisen/keisen.el
;;; ------------------------------------------------------------------------
;;(require 'keisen)
;;; Control+矢印キーで罫線を引く場合
;; (global-set-key (kbd "C-M-f") 'keisen-right-move)
;;(global-set-key (kbd "C-M-b") 'keisen-left-move)
;;(global-set-key (kbd "C-M-p") 'keisen-up-move)
;;(global-set-key (kbd "C-M-n") 'keisen-down-move)

;;(global-set-key [(C-right)] 'keisen-right-move)
;;(global-set-key [(C-left)] 'keisen-left-move)
;;(global-set-key [(C-up)] 'keisen-up-move)
;;(global-set-key [(C-down)] 'keisen-down-move)

;; -----------------------------------------------------------------------
;; Name     : anzu
;; Install  : el-get
;; Function : インタラクティブ検索、置換
;;            http://qiita.com/syohex/items/56cf3b7f7d9943f7a7ba
;;            https://github.com/syohex/emacs-anzu
;; ------------------------------------------------------------------------
(require 'anzu)
(global-anzu-mode +1)

(set-face-attribute 'anzu-mode-line nil
		    :foreground "yellow" :weight 'bold)

#+end_src

