* Text
  テキスト編集. Emacs の底力を発揮する!

* 編集
** cua-mode
   矩形編集.

   #+begin_src emacs-lisp
   (cua-mode t)
   (setq cua-enable-cua-keys nil) ; デフォルトキーバインドを無効化
   (define-key global-map (kbd "C-x SPC") 'cua-set-rectangle-mark)
   #+end_src
   
** multiple-cursors
   Awesome Emacs Rocks! http://shibayu36.hatenablog.com/entry/2013/12/30/190354
   - [[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el]]

   どうも, no window だとうまく動作しない.
   うまく動かないとき, ~/.emacs.d/.mc-lists.el を削除したらうまくいくようになった.

   - https://github.com/magnars/multiple-cursors.el/issues/121

   #+begin_src emacs-lisp
(use-package multiple-cursors
  :config
   (global-set-key (kbd "C-M-c") 'mc/edit-lines)
   (global-set-key (kbd "C-M-r") 'mc/mark-all-in-region)
   
   (global-set-key (kbd "C-]") 'mc/mark-next-like-this)
   (global-set-key (kbd "C-M-]") 'mc/mark-previous-like-this)
   (global-set-key (kbd "C-c C-]") 'mc/mark-all-like-this)
   )
   #+end_src

** expand-region
   Awesome Emacs Rocks! 

   リージョンを広げる
   - http://d.hatena.ne.jp/syohex/20120117/1326814127

   #+begin_src emacs-lisp
(use-package expand-region
    :config
(global-set-key (kbd "C-\\") 'er/expand-region)
(global-set-key (kbd "C-M-\\") 'er/contract-region)

;; 選択ができるようにしておく
;; (transient-mark-mode t)
)
   #+end_src

** Yassnipet
   スニペット管理

   #+begin_src emacs-lisp
(use-package yasnippet
  :config
(yas-load-directory "~/.emacs.d/snippets")

(yas-global-mode 1)

;; メニューは使わない
(setq yas/use-menu nil)

;; 問い合わせを簡略化 A yes/no を y/n
(fset 'yes-or-no-p 'y-or-n-p)

;; 既存スニペットを挿入する
(define-key yas-minor-mode-map (kbd "C-x i i") 'helm-c-yas-complete)
;; 新規スニペットを作成するバッファを用意する
(define-key yas-minor-mode-map (kbd "C-x i n") 'yas-new-snippet)
;; 既存スニペットを閲覧・編集する
(define-key yas-minor-mode-map (kbd "C-x i v") 'helm-c-yas-visit-snippet-file))
   #+end_src

** auto-complete
   自動補完を実現する elisp.

   github:
   - https://github.com/auto-complete/auto-complete

   wiki:
   - http://www.emacswiki.org/emacs/auto-complete-extension.el

   manuals:
   - http://cx4a.org/software/auto-complete/index.ja.html
   - http://cx4a.org/software/auto-complete/manual.ja.html
     
   #+begin_src emacs-lisp
(use-package auto-complete)
(use-package auto-complete-config
    :config
(ac-config-default)

;; グローバルで auto-complete を利用
(global-auto-complete-mode t)
;; 追加メジャーモード
(add-to-list 'ac-modes 'org-mode)

;; メニュー表示を遅延
;; (setq ac-auto-show-menu 0.5)
(setq ac-auto-show-menu t)

;; 高さは 20 まで.
(setq ac-menu-height 20)

;; 色を変更
;; (set-face-background 'ac-candidate-face "lightgray")
(set-face-background 'ac-candidate-face "orange")
(set-face-underline 'ac-candidate-face "darkgray")
(set-face-background 'ac-selection-face "steelblue")

;; 補完候補が 1 つのときはそれを採用.
(setq ac-dwim t)

;; (setq ac-auto-start nil)
(setq ac-auto-start 3)           ; 3 文字以上から補完スタート 
;; (setq ac-auto-show-menu 0.8)     ; 0.8 秒でメニュー表示
(setq ac-use-comphist t)         ; 補完候補をソート
(setq ac-candidate-limit nil)    ; 補完候補表示を無制限に

;; 補完キーでトリガさせる.
;; 手動で補完を起動する
(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
(global-set-key "\M-/" 'auto-complete)

(setq ac-use-menu-map t)
;; デフォルトで設定済み
;; (define-key ac-menu-map "\C-n" 'ac-next)
;; (define-key ac-menu-map "\C-p" 'ac-previous)
;; Ctrl ではなくて, Alt に割り当てる.
(define-key ac-menu-map (kbd "M-n") 'ac-next)
(define-key ac-menu-map (kbd "M-p") 'ac-previous)

;; ヘルプを表示
(define-key ac-completing-map (kbd "M-h") 'ac-quick-help)

(setq ac-sources '(ac-source-abbrev ac-source-words-in-buffer))

;; for ruby programming
;; よくわからないので, 封印
;; (add-hook 'ruby-mode-hook
;; 	  (lambda ()
;; 	    (use-package rcodetools)
;; 	    (use-package auto-complete-ruby)
;; 	    ;; (load-auto-complete)
;; 	    (make-local-variable 'ac-omni-completion-sources)
;; 	    (setq ac-omni-completion-sources
;; 		  '(("\\.\\=" . (ac-source-rcodetools))))))

;; for yassnipet
(setf (symbol-function 'yas-active-keys)
      (lambda ()
        (remove-duplicates
         (mapcan #'yas--table-all-keys (yas--get-snippet-tables)))))
)
   #+end_src

*** ac-helm
    helm インターフェースを利用する. 
    これは多げさかな. .

    #+begin_src emacs-lisp
(use-package ac-helm
  :config
  (global-set-key (kbd "C-:") 'ac-complete-with-helm)
  (define-key ac-complete-mode-map (kbd "C-:") 'ac-complete-with-helm)
  )
    #+end_src

** company-mode
   補完のフレームワーク.auto-complete との違いがわからない.

   - [[http://www.emacswiki.org/emacs/CompanyMode][EmacsWiki: Company Mode]]
   - [[http://company-mode.github.io/][company-mode for Emacs]]
   - github: [[https://github.com/company-mode][company-mode]]

   - Use M-n and M-p to select,
   - <return> to complete or <tab> to complete the common part. 
   - Search through the completions with C-s, C-r and C-o. Press
     M-(digit) to quickly complete with one of the first 10 candidates.

#+begin_src emacs-lisp
;; (use-package company)
;; (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** undo-tree
   C-x u にバインディング.

   #+begin_src emacs-lisp
(use-package undo-tree
  :config
  (global-undo-tree-mode))
   #+end_src

** keisen
   罫線を引く
   - http://www.pitecan.com/Keisen/keisen.el

   #+begin_src emacs-lisp
;;(use-package keisen)
;;; Control+ 矢印キーで罫線を引く場合
;; (global-set-key (kbd "C-M-f") 'keisen-right-move)
;;(global-set-key (kbd "C-M-b") 'keisen-left-move)
;;(global-set-key (kbd "C-M-p") 'keisen-up-move)
;;(global-set-key (kbd "C-M-n") 'keisen-down-move)

;;(global-set-key [(C-right)] 'keisen-right-move)
;;(global-set-key [(C-left)] 'keisen-left-move)
;;(global-set-key [(C-up)] 'keisen-up-move)
;;(global-set-key [(C-down)] 'keisen-down-move)
   #+end_src

** auto-fill-mode
   デフォルト搭載. 勝手に折り返してくれる.
   - [[http://www.emacswiki.org/emacs/AutoFillMode][EmacsWiki: Auto Fill Mode]]

#+begin_src emacs-lisp
;;; 一行が 80 字以上になった時には自動改行する
(setq fill-column 80)
;;(setq-default auto-fill-mode t)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

* 移動
  まずは, 基本まとめ.
 
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][Mark Ring - GNU Emacs Manual]]
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Setting-Mark.html][Setting Mark - GNU Emacs Manual]]
  - [[http://www.bookshelf.jp/texi/emacs-20.6-man-jp/emacs_10.html][GNU Emacs マニュアル: マークとリージョン]]
  - [[http://d.hatena.ne.jp/whitypig/20100308/1267990959][pop-global-mark を使えないボクって. . . - GONE WITH THE MEDICINE]]

  | C-SPC             | マークをセット          | mark-ring               |
  | C-x C-x           | マークとカーソルを swap | exchange-point-and-mark |
  | C-x C-SPC         | 過去のマークへジャンプ  | pop-global-mark         |

  mark-ring と mark-global-ring は違う.

  | C-x r SPACE [a-z] | register に登録         |                         |
  | C-x r j [a-z]     | jump to that register   |                         |

  helm-all-mark-rings が強力.

#+begin_src emacs-lisp
;; default is 16
(setq global-mark-ring-max 64)
#+end_src
  
** ace-jump-mode
   Awesome Emacs Rocks! 

   #+begin_src emacs-lisp
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-x ,") 'ace-jump-mode)
   #+end_src

** ace-jump-buffer
   #+begin_src emacs-lisp
(autoload
  'ace-jump-buffer
  "ace-jump-buffer"
  "Emacs quick move to buffer minor mode"
  t)
(define-key global-map (kbd "C-x m") 'ace-jump-buffer)
   #+end_src

** ace-jump-zap
   ジャンプして削除.

   - https://github.com/waymondo/ace-jump-zap

#+begin_src emacs-lisp
(global-set-key (kbd "M-z") 'ace-jump-zap-to-char)
(global-set-key (kbd "M-C-z") 'ace-jump-zap-up-to-char)
#+end_src

** ace-isearch
   Do ace-jump from isearch.

   昔は isearch-ace-jump-mode という名前だった (気がするが)

   isearch の初めの一文字を入力して待っていると, ace-jump-char 発動.
   isearch して, しばらく入力しないと swoop 発動.

   - https://github.com/tam17aki/ace-isearch
   - [[http://ongaeshi.hatenablog.com/entry/ace-isearch][Emacs のテキスト検索の使い勝手をあげる ace-isearch と helm-swoop が便利 - ブログのおんがえし]]
   - [[http://rubikitch.com/tag/ace-isearch/][「 ace-isearch 」タグの記事一覧 | るびきち「日刊 Emacs 」]]
   - [[http://qiita.com/ballforest/items/7c3f2e64b59d8157bc8c][Emacs - ace-isearch : isearch と ace-jump-mode の連携 - Qiita]]

   #+begin_src emacs-lisp
(use-package ace-isearch
  :config
   (global-ace-isearch-mode +1)
   ;; (setq ace-isearch-use-function-from-isearch nil)
   (define-key isearch-mode-map (kbd "M-o") 'helm-multi-swoop-all-from-isearch)
   )
   #+end_src

** iy-go-to-char
   前後の char へ移動する. ace-jump-mode があれば不要かな. . .
   - https://github.com/doitian/iy-go-to-char

#+begin_src emacs-lisp
;; (use-package iy-go-to-char
;;   :config
;;   (global-set-key (kbd "C-c f") 'iy-go-to-char)
;;   (global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
;;   (global-set-key (kbd "C-c ;") 'iy-go-to-or-up-to-continue)
;;   (global-set-key (kbd "C-c ,") 'iy-go-to-or-up-to-continue-backward)
;;   (global-set-key (kbd "C-c f") 'iy-go-up-to-char)
;;   (global-set-key (kbd "C-c F") 'iy-go-up-to-char-backward)

;;   (add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)
;; )
#+end_src

** jump-char
   iy-go-to-char よりよさそう

   ;で前. , で後ろ. C-c C-c で ace-jump-mode に切り替え.

   - https://github.com/lewang/jump-char

   #+begin_src emacs-lisp
(use-package jump-char
  :config
   ;; (global-set-key (kbd "C-c f") 'jump-char-forward)
   ;; (global-set-key (kbd "C-c F") 'jump-char-backward)
  ;; key-chord にかえる
  )
   #+end_src
** chord-key
   キーバインド割り当て. jump-char と一緒に利用.

   #+begin_src emacs-lisp
(use-package key-chord
  :config
   (key-chord-mode 1)
   (setq key-chord-two-keys-delay 0.08)
   
   ; buffer actions
   (key-chord-define-global "jk" 'jump-char-forward)
   (key-chord-define-global "jh" 'jump-char-backward)
   )
   #+end_src
* 検索・置換
** ag
   高速 grep

   #+begin_src emacs-lisp
(use-package ag
  :config
(custom-set-variables
 '(ag-highlight-search t)  ; 検索結果の中の検索語をハイライトする
 '(ag-reuse-window 'nil)   ; 現在のウィンドウを検索結果表示に使う
 '(ag-reuse-buffers 'nil)) ; 現在のバッファを検索結果表示に使う
)
   #+end_src

** migemo
   日本語をロ-マ字検索

   #+begin_src emacs-lisp
  ;; for emacs 24.3
  ;; http://wp.kncn.net/archives/6025
  (setq search-whitespace-regexp nil)

(use-package migemo
  :if linux-p
  :config
  (setq migemo-options '("-q" "--emacs"))
  (setq migemo-user-dictionary nil)
  (setq migemo-regex-dictionary nil)
  (setq migemo-coding-system 'utf-8-unix)

  (setq migemo-command "cmigemo")
  (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
  (load-library "migemo")
  (migemo-init)
  )

(use-package migemo
  :if windows-p
  :config
  (setq migemo-options '("-q" "--emacs"))
  (setq migemo-user-dictionary nil)
  (setq migemo-regex-dictionary nil)
  (setq migemo-coding-system 'utf-8-unix)

  (setq migemo-command "c:/app/cmigemo-default-win64/cmigemo.exe")
  (setq migemo-dictionary "c:/app/cmigemo-default-win64/dict/utf-8/migemo-dict")
  (load-library "migemo")
  (migemo-init)
  )
   #+end_src
** anzu
   インタラクティブ検索, 置換

   - [[https://github.com/syohex/emacs-anzu][syohex/emacs-anzu]]
   - http://qiita.com/syohex/items/56cf3b7f7d9943f7a7ba

   #+begin_src emacs-lisp
(use-package anzu
  :config
(global-anzu-mode +1)
(set-face-attribute 'anzu-mode-line nil
		    :foreground "yellow" :weight 'bold)

(custom-set-variables
 '(anzu-mode-lighter "")
 '(anzu-deactivate-region t)
 '(anzu-search-threshold 1000)
 '(anzu-replace-to-string-separator " => "))
)
   #+end_src

** swoop
   Peculiar buffer navigation for Emacs.
   -> helm-swoop に変更. helm のほうが高速.

  - [[http://fukuyama.co/emacs-swoop][Emacs バッファ内高速ナビゲーション Swoop.el を作りました. - Web 学び]]

   #+begin_src emacs-lisp
;; (use-package swoop)
;; (global-set-key (kbd "M-o")   'swoop)
;; (global-set-key (kbd "C-M-o") 'swoop-multi)
;; ;; (global-set-key (kbd "M-o")   'swoop-pcre-regexp)
;; (global-set-key (kbd "C-S-o") 'swoop-back-to-last-position)

;; (define-key isearch-mode-map (kbd "M-o") 'swoop-from-isearch)
;; (define-key swoop-map (kbd "M-o") 'swoop-multi-from-swoop)
	
;; ;; サイズ変更禁止
;; (setq swoop-font-size-change: nil)
   #+end_src

** iedit
   グラフィカルな置換. C-;で発動.
   - https://github.com/tsdh/iedit

   #+begin_src emacs-lisp
(use-package iedit)
   #+end_src
** wgrep
   grep した結果を編集.

#+begin_src emacs-lisp
(use-package wgrep-ag
  :config
  (autoload 'wgrep-ag-setup "wgrep-ag")
  (add-hook 'ag-mode-hook 'wgrep-ag-setup)
  (define-key ag-mode-map (kbd "r") 'wgrep-change-to-wgrep-mode)
  )
#+end_src

** phi-search
   multiple-cursors.el 対応のインクリメンタルサーチ.
   - [[http://rubikitch.com/2014/11/11/phi-search/][emacs phi-search.el : multiple-cursors で isearch できるよ!]]
   - https://github.com/zk-phi/phi-search

   使い方わからない.

#+begin_src emacs-lisp
;; (use-package phi-search)
;; (global-set-key (kbd "C-s") 'phi-search)
;; (global-set-key (kbd "C-r") 'phi-search-backward)

;; (with-eval-after-load 'phi-search-core
;;   (define-key phi-search-default-map [remap scroll-up-command] 'phi-search-scroll-up)
;;   (define-key phi-search-default-map [remap scroll-down-command] 'phi-search-scroll-down))
;; (set-face-attribute 'phi-search-selection-face nil
;;                     :background "orange")
#+end_src

*** phi-search-migemo
    - https://github.com/zk-phi/phi-search-migemo
    - [[http://rubiAkitch.com/2014/12/06/phi-search-migemo/][emacs phi-search-migemo.el : multiple-cursors.el 専属 isearch が Migemo 化]]

#+begin_src emacs-lisp
;; (use-package phi-search-migemo)
;; (define-key phi-search-default-map (kbd "M-m") 'phi-search-migemo-toggle)
;; (global-set-key (kbd "C-s") 'phi-search-migemo)
;; (global-set-key (kbd "C-r") 'phi-search-migemo-backward)
;; (with-eval-after-load 'multiple-cursors-core
;;   (define-key mc/keymap (kbd "C-s") 'phi-search-migemo)
;;   (define-key mc/keymap (kbd "C-r") 'phi-search-migemo-backward))
#+end_src

** isearch-dabbrev
   isearch で動的略語補完.
   - https://github.com/Dewdrops/isearch-dabbrev

   isearch 中にタブを押すと勝手に補完してくれる.

#+begin_src emacs-lisp
(eval-after-load "isearch"
  '(progn
     (use-package isearch-dabbrev)
     (define-key isearch-mode-map (kbd "<tab>") 'isearch-dabbrev-expand)))
#+end_src

* 日本語
** text-adjust
   - text-adjust-codecheck : 半角カナ, 規格外文字を「〓」に置き換える.
   - text-adjust-hankaku   : 全角英数文字を半角にする.
   - text-adjust-kutouten  : 句読点を「, 」「. 」に置き換える.
   - text-adjust-space     : 全角文字と半角文字の間に空白を入れる.

   これは便利だ.

   - [[http://www.emacswiki.org/emacs/InsertSpaceBetweenZenkakuAndHankaku][EmacsWiki: Insert Space Between Zenkaku And Hankaku]]
   - [[http://d.hatena.ne.jp/rubikitch/20090220/text_adjust][全角文字と半角文字の間に自動でスペースを開ける text-adjust.el を使ってみた ]]
   - http://www.rubyist.net/~rubikitch/archive/mell.el
   - http://www.rubyist.net/~rubikitch/archive/text-adjust.el

  #+begin_src emacs-lisp
(use-package text-adjust
  :config
   (defun text-adjust-space-before-save-if-needed ()
   (when (memq major-mode
               '(org-mode text-mode wl-draft-mode))
	       (text-adjust-buffer)))
	       ;;           (text-adjust-space-buffer)))
    (defalias 'spacer 'text-adjust-space-buffer)
    (add-hook 'before-save-hook 'text-adjust-space-before-save-if-needed)
    )
   #+end_src

** yspel
   Yahoo の文章校正ツールを利用した日本語スペルチェック!

   - [[http://ubulog.blogspot.jp/2010/09/emacs.html][ubulog: Emacs から校正支援する]]

   #+begin_src emacs-lisp
   (use-package yspel)
   #+end_src


* 英語
** aspell
   昔は ispell, 今は aspell が主流らしい.

   #+begin_src sh
   sudo pacman -S aspell aspell-en.
   #+end_src

   デフォルトだと日本語辞書を探そうとするため,
   以下のおまじないをし, 英語の辞書を検索するようにする.

   #+begin_src sh
   echo "lang en_US" >> ~/.aspell.conf
   #+end_src

   aspell にパスを通す.

   #+begin_src emacs-lisp
   (when (file-executable-p "/usr/bin/aspell")
   (setq-default ispell-program-name "aspell"))
   #+end_src

   日本語はスキップ.

   #+begin_src emacs-lisp
   (eval-after-load "ispell"
      '(add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
   #+end_src

   - バッファ全体をスペルチェック M-x ispell-buffer
   - 選択範囲だけスペルチェック M-x ispell-region

*** 辞書に単語を登録する
    - [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki: Fly Spell]]
      + region 選択して,ispell-region/word で選択.
      + "i"を入力
      + $HOME/.aspell.en.pws に登録される.

** flyspell
   リアルタイム, スペルチェック.

   - [[http://www.gfd-dennou.org/member/uwabami/cc-env/emacs/flyspell_config.html][Youhei SASAKI's official site: flyspell-mode の設定]]
   - [[http://d.hatena.ne.jp/mooz/20100423/p1][flyspell-mode の修正候補表示を popup.el で - mooz deceives you]]

   #+begin_src emacs-lisp
(use-package flyspell
  :config
  ;; キーバインドを設定.
  (global-set-key (kbd "C-c <f8>") 'flyspell-mode)
  (global-set-key (kbd "C-c <f9>") 'ispell-word)
  (global-set-key (kbd "C-c <f10>") 'flyspell-buffer)

  ;; どうも flyspell と ac-complete は相性が悪い?
  ;; (ac-flyspell-workaround)
  )
#+end_src

*** あるモードのみ flysell を起動

    コメント領域のところだけ有効.

    #+begin_src emacs-lisp
    (mapc
    (lambda (hook)
    (add-hook hook 'flyspell-prog-mode))
    '(
    c-mode-common-hook
    ruby-mode-hook
    emacs-lisp-mode-hook   
    ))
    #+end_src

    特定のモードで有効.

    #+begin_src emacs-lisp
    (mapc
    (lambda (hook)
    (add-hook hook
    '(lambda () (flyspell-mode 1))))
    '(
    text-mode-hook
    org-mode-hook
    wl-draft-mode-hook
    twittering-edit-mode
    ))
    #+end_src

** grammar
   英語の文法をチェックしてくれる.

   - [[http://www.emacswiki.org/emacs/BaoqiuCui][EmacsWiki: Baoqiu Cui]]

*** インストール
   - link-grammar をインストール.
   - /usr/include/link-grammar/ にファイルが配置される.
   - svn co http://bcui-emacs.googlecode.com/svn/trunk/grammar
   - INCDIRS = -I. -I/usr/include/link-grammar に Makefile を修正.

   C-M-g で文法チェック発動.

*** 設定

#+begin_src emacs-lisp
  (use-package grammar
    :if linux-p
    :config
    (setq grammar-program-name "~/.emacs.d/elisp/grammar/grammar")
    ;; 黒背景用の色変更
    (set-face-attribute 'grammar-error-face nil
			:background "#Ff6347"
			:foreground "#000000")
    
    ;; TODO Refactoring
    ;; (add-hook 'org-mode-hook 'grammar-mode)
    ;; (add-hook 'text-mode-hook 'grammar-mode)
    (add-hook 'twittering-edit-mode-hook 'grammar-mode)
    )
#+end_src

** auto-capitalize
   自動で大文字に変換する.
   - https://github.com/yuutayamada/auto-capitalize-el
   - [[http://sleepboy-zzz.blogspot.jp/2013/09/auto-capitalizeel-aspell.html][memo: 英語環境で文字を大文字にキャピタライズする拡張 auto-capitalize.el を導入した]]

   You can use by M-x 
   - turn-on-auto-capitalize-mode
   - auto-capitalize-mode.

   #+begin_src emacs-lisp
;; This code is from README
(use-package auto-capitalize
  :config

;; Enable auto-capitalize-mode
(add-hook 'twittering-edit-mode-hook
          '(lambda ()
             (turn-on-auto-capitalize-mode)))

;; (defvar programing-hooks
;;   ;; Add your preference programming mode hook like ruby-mode-hook
;;   '(twittering-edit-mode-hook
;;     ;; org-mode-hook
;;     ))

;; (defvar my/programming-mode nil
;;   "Use this variable to know whether current major-mode is mode
;;   for programming. If it is non-nil mean the mode is mode for programming."
;;   )

;; ;; Add hook to set t (rue) to my/programming-mode as a buffer local valuable
;; ;; to prevent a turn on auto-capitalize-mode.
;; (loop for hook in programing-hooks
;;       do (add-hook hook
;;                    '(lambda ()
;;                       (setq-local my/programming-mode t))))

;; (defun my/switch-auto-capitalize-mode ()
;;   "turn on auto-capitalize-mode if it was comment line on 
;;   specific programming mode."
;;   (if my/programming-mode
;;       (if (equal font-lock-comment-face
;;                  (nth 1 (text-properties-at (point))))
;;           (turn-on-auto-capitalize-mode)
;;         (turn-off-auto-capitalize-mode))))

;; couldn't work
;; (defadvice self-insert-command
;;     "turn on auto-capitalize-mode on specified programming mode"
;;   (around ad-turn-on-auto-capitalize activate)
;;   (unless (minibufferp)
;;     (my/switch-auto-capitalize-mode))
;;   ad-do-it)

;; Enable auto-capitalize-mode
;; (add-hook 'text-mode-hook
;;           '(lambda ()
;;              (turn-on-auto-capitalize-mode)))
)
   #+end_src
