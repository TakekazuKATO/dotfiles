* Utility

この elisp こそ, Emacs のすごさを示すものだ.

#+begin_src text
  Emacs は OS!
  Emacs は世界!
  Emacs は人生!
#+end_src

* elscreen
Screen の Emacs バージョン. マルチプレクサ.

- https://github.com/emacs-jp/elscreen
- https://github.com/knu/elscreen

オリジナルはメンテナンスされていないのかな?

- http://www.morishima.net/~naoto/elscreen-ja/
- http://nishikawasasaki.hatenablog.com/entry/20110313/1300031344

#+begin_src emacs-lisp
(elscreen-start)

;; (setq elscreen-prefix-key "\C-o") ;; こっちだとダメだった
(elscreen-set-prefix-key "\C-o")

; タブの幅
;; (setq elscreen-display-tab 10)

; タブの左端の×を非表示
(setq elscreen-tab-display-kill-screen nil)

;; <>を非表示
(setq elscreen-tab-display-control nil)

;; emacsclient で新しいタブを開く
;; (use-package elscreen-server nil t)

;; それっぽい色をつける?? つけてくれないよ.
;; (use-package elscreen-color-theme)

;; dired で o をオスと別タブで開く
;; by wget https://raw.githubusercontent.com/knu/elscreen/master/elscreen-dired.el
(use-package elscreen-dired)

;; waanderlust 用. syohex さんのやつ
(use-package elscreen-wl)

;; 画面切り替え
;; 使い勝手がわるいので封印した
;; (add-hook 'after-make-frame-functions 'elscreen-create)
;; (add-hook 'elscreen-goto-hook (lambda ()
;;    (switch-to-buffer "*MyStartUpMessage*")))
#+end_src
** colors

#+begin_src emacs-lisp
(custom-set-faces
 '(elscreen-tab-control-face ((t (:background "color-234" :foreground "brightwhite" :underline t))))
 '(elscreen-tab-current-screen-face ((t (:background "color-243" :foreground "brightwhite"))))
 '(elscreen-tab-other-screen-face ((t (:background "color-235" :foreground "brightwhite" :underline t)))))
#+end_src

** screen の順番を手軽に変更
   from: [[http://qiita.com/fujimisakari/items/d7f1b904de11dcb018c3][Emacs - Elscreen に機能追加する - Qiita]]

#+begin_src emacs-lisp
(defun elscreen-swap-previous ()
  "Interchange screens selected currently and previous."
  (interactive)
  (cond
   ((elscreen-one-screen-p)
    (elscreen-message "There is only one screen, cannot swap"))
   (t
    (let* ((screen-list (sort (elscreen-get-screen-list) '>))
           (previous-screen
            (or (nth 1 (memq (elscreen-get-current-screen) screen-list))
               (car screen-list)))
           (current-screen (elscreen-get-current-screen))
           (current-screen-property
            (elscreen-get-screen-property current-screen))
           (previous-screen-property
            (elscreen-get-screen-property previous-screen)))
      (elscreen-set-screen-property current-screen previous-screen-property)
      (elscreen-set-screen-property previous-screen current-screen-property)
      (elscreen-goto-internal (elscreen-get-current-screen)))))
  (elscreen-previous))

(defun elscreen-swap-next ()
  "Interchange screens selected currently and next."
  (interactive)
  (cond
   ((elscreen-one-screen-p)
    (elscreen-message "There is only one screen, cannot swap"))
   (t
    (let* ((screen-list (sort (elscreen-get-screen-list) '<))
           (next-screen
            (or (nth 1 (memq (elscreen-get-current-screen) screen-list))
               (car screen-list)))
           (current-screen (elscreen-get-current-screen))
           (current-screen-property
            (elscreen-get-screen-property current-screen))
           (next-screen-property
            (elscreen-get-screen-property next-screen)))
      (elscreen-set-screen-property current-screen next-screen-property)
      (elscreen-set-screen-property next-screen current-screen-property)
      (elscreen-goto-internal (elscreen-get-current-screen)))))
     (elscreen-next))

(global-set-key (kbd "C-M-<right>") 'elscreen-swap-next)           ; screen の配置位置ずらし (右)
(global-set-key (kbd "C-M-<left>") 'elscreen-swap-previous)        ; screen 配置位置ずらし (左)
#+end_src


** TODO org-link を elscreen で開く
   いつか.

** elscreen-persistent
   - [[http://www.robario.com/2014/12/08][elscreen を永続化する elscreen-persist を書いた #Emacs @robario]]
   - [[http://rubikitch.com/2014/12/11/elscreen-persist/][elscreen のウィンドウ構成が windows.el ばりに再起動時に復元できるゾ! ]]

   revive というパッケージに依存している??

#+begin_src emacs-lisp
(use-package elscreen-persist)
;; どうもこれを有効にすると Emacs が立ち上がらなくなるな...
;; (elscreen-persist-mode 1)
#+end_src

*** 以下で操作
   - elscreen-persist-store
   - elscreen-persist-restore

* Web Browser

#+begin_src emacs-lisp
(when linux-p
  (setq browse-url-generic-program (executable-find "conkeror"))
  (setq browse-url-browser-function 'browse-url-generic)
)

(when windows-p
; Windows 環境のデフォルト
 (setq browse-url-browser-function 'browse-url-default-windows-browser)
)

;; 今のポイントしている URL を開く
(global-set-key (kbd "C-c u") 'browse-url-at-point)
(define-key goto-map [?b] #'browse-url-at-point)
#+end_src

** w3m
   eww が登場したのでもはや過去のもの. 

#+begin_src emacs-lisp
(use-package w3m-load
  :config
  (setq w3m-use-cookies t)
  (setq w3m-favicon-cache-expire-wait nil)
  (setq w3m-home-page "http://www.google.co.jp/")
  
  (when windows-p
    ;;(setq exec-path (append exec-path '("C://app//w3m-mingw32")))
    (setq exec-path (append exec-path '("C:/cygwin64/bin")))
    )

  (setq w3m-user-agent  "Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; 
        HTC_Pyramid Build/GRI40) AppleWebKit/533.1 
        (KHTML, like Gecko) Version/4.0 Mobile Safari/533.")
)
#+end_src

** webkit
   うごかない. . . .
   - [[https://github.com/linuxdeepin/deepin-emacs/tree/master/site-lisp/extensions/webkit][deepin-emacs/site-lisp/extensions/webkit at master · linuxdeepin/deepin-emacs]]

     - webkit/helm-webkit from github
     - epc from el-get
     - Pyqt5  yaourt -S python2-pyqt5 qt5-webkit
     - PythonXlib yaourt -S python2-xlib

#+begin_src emacs-lisp
;; (use-package webkit)
;; (use-package helm-webkit)
#+end_src

** eww
   24.4 から搭載の Web ブラウザ.

   - http://bzr.savannah.gnu.org/lh/emacs/trunk/annotate/head:/lisp/net/eww.el

#+begin_src emacs-lisp
  (when emacs24.4-p
#+end_src

*** default の検索エンジンを変更
    google jp を設定する. default では, duckduckgo が設定されている.

    - 結局やめた. なぜなら, 色がへん.
    - leuven-theme ならばそんなにへんじゃないので復活
   
    #+begin_src emacs-lisp
   (setq eww-search-prefix "http://www.google.co.jp/search?q=")
    #+end_src

    - https://duckduckgo.com/params

    こまかくパラメータ設定
    - kl=ja-jp 日本語
    - k1=-1    広告なし
    - kc=1     自動先読み
    - kf=-1    サイトアイコンなし
    - q =      検索文字

    => サイトアイコンなしは動かない.

    #+begin_src emacs-lisp
   ;; (setq eww-search-prefix "https://duckduckgo.com/html/?kl=jp-jp&k1=-1&kc=1&kf=-1&q=")
    #+end_src

*** eww をすぐに起動するためのショートカット
    以下のページを参考にして, eww を起動するためのキーバインドを設定した.
    - http://steckerhalter.co.vu/posts/emacs-tips-and-tricks.html

    #+begin_src emacs-lisp
   (defun stk/eww-browse-kill-ring ()
     (interactive)
     (eww (current-kill 0 t)))
    
   ;; eww 起動
   (global-set-key (kbd "C-q <C-return>") 'eww)
   ;; 前のページへ
   (global-set-key (kbd "C-q RET") 'stk/eww-browse-kill-ring)
    #+end_src

*** eww 複数起動はできない??
    eww を複数起動はできないようだ.
    画面を 2 分割して, 別の画面を表示したり,
    elscreen を利用して, タブブラウザ的なことはできなかった.

    => patch があったので, もうすぐ取り込まれるかと.
    http://emacs.1067599.n5.nabble.com/bug-16211-eww-should-support-multiple-eww-buffers-td306918.html

*** 外部ブラウザでリンクを開く (eww-browse-with-external-link)
    テキストブラウザは地味なので, ときには別のブラウザでも Web ページを閲覧したい.
    私は普段は conkeror を利用しているので, これで開きたい.

    以下の関数で今見ているページを外部ブラウザで開くことができる.
    &にキーバインドされている.

    #+begin_src language
    eww-browse-with-external-link
    #+end_src

*** conkerror のような番号づけ
    eww-lnum を入れると, conkeror のようにリンク先を選択できる.

    - https://github.com/m00natic/eww-lnum
    - [[http://rubikitch.com/2014/11/12/eww-lnum/][emacs eww-lnum.el : 組み込みブラウザ eww で Hit-a-Hint しようぜ ]]
    つまり, f を押すことで, リンク先に番号が振られるので,
    番号を選択することでリンク先を選択できる.

    #+begin_src emacs-lisp
(with-eval-after-load "eww"
(use-package eww-lnum)
  (define-key eww-mode-map "f" 'eww-lnum-follow)
  (define-key eww-mode-map "F" 'eww-lnum-universal))
(defun eww-lnum-read-interactive--not-truncate-lines (&rest them)
  (let ((truncate-lines nil))
    (apply them)))
(advice-add 'eww-lnum-read-interactive :around
            'eww-lnum-read-interactive--not-truncate-lines)
    #+end_src

#+begin_src emacs-lisp
   ) ;; end of 24.4
#+end_src

* dired
  dired から open

#+begin_src emacs-lisp
(when linux-p
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (message "Opening %s..." file)
    (call-process "xdg-open" nil 0 nil file)
    (message "Opening %s done" file)))

(add-hook
   'dired-mode-hook
   (lambda ()
     (define-key dired-mode-map [f6] 'dired-open-file)))
)
#+end_src

移動のたびにバッファをつくらないためには, i や a でバッファを開く.

- [[http://stackoverflow.com/questions/1839313/how-do-i-stop-emacs-dired-mode-from-opening-so-many-buffers][file management - How do I stop emacs dired mode from opening so many buffers? - Stack Overflow]]

** joseph-single-dired
   バッファを複数作成しない.

   - https://github.com/jixiuf/joseph-single-dired

#+begin_src emacs-lisp
(use-package joseph-single-dired)
#+end_src

** direx
   popup dired

- https://github.com/m2ym/direx-el
- http://cx4a.blogspot.jp/2011/12/popwineldirexel.html

  使っていないのと, open-junk-file とキーがかぶったので封印.
#+begin_src emacs-lisp
;; (use-package direx)
#+end_src

* edit-server
Google Chrome のフォームを emacs で編集. Edit with Emacs.

- https://raw.githubusercontent.com/stsquad/emacs_chrome/master/servers/edit-server.el

#+begin_src emacs-lisp
(use-package edit-server)
(edit-server-start)
#+end_src

* twittering-mode
Emacs Twitter Client

- [[http://www.emacswiki.org/emacs/TwitteringMode-ja][EmacsWiki: TwitteringMode-ja]]

#+begin_src emacs-lisp
(use-package twittering-mode)
(setq twittering-use-master-password t)
;; パスワード暗号ファイル保存先変更 (デフォはホームディレクトリ)
(setq twittering-private-info-file "~/.emacs.d/twittering-mode.gpg")

(global-set-key (kbd "C-c C-x w") 'twittering-update-status-from-pop-up-buffer)
#+end_src

** popwin に閉じ込める
   このアイデアは good idea.
   - [[http://d.hatena.ne.jp/lurdan/20130225/1361806605][twittering-mode を popwin に閉じこめる - *scratch*]]

* bitlbee
  yaourt bitlbee でいれた.

- [[https://wiki.archlinux.org/index.php/bitlbee][Bitlbee - ArchWiki]]
- [[http://www.emacswiki.org/emacs/BitlBee][EmacsWiki: Bitl Bee]]
- [[http://emacs-fu.blogspot.jp/2012/03/social-networking-with-bitlbee-and-erc.html][emacs-fu: social networking with bitlbee and erc]]

まだ動かした実績はなし. . . とりあえず入れておくか.

#+begin_src emacs-lisp
;; (use-package bitlbee)
;; (defun i-wanna-be-social ()
;;   "Connect to IM networks using bitlbee."
;;   (interactive)
;;   (erc :server "localhost" :port 6667 :nick "user"))
#+end_src

* Hown
 Function : Evernote を越えるメモ管理ツール
 http://www.gfd-dennou.org/member/uwabami/cc-env/emacs/howm_config.html
 http://d.hatena.ne.jp/TakashiHattori/20120627/1340768058

#+begin_src emacs-lisp
;; *.org を開いたら howm-mode も起動する
;;(add-hook 'org-mode-hook 'howm-mode)

;; howm のメモを置くディレクトリ (任意)
(setq howm-directory "~/gtd/howm") ;; メニュー表示しない
(setq howm-menu-top nil)
;; メニューの言語設定
(setq howm-menu-lang 'ja)
;; howm ファイル名を設定する. org-mode を起動するため拡張子は .org にする.
(setq howm-file-name-format "%Y%m%d-%H%M%S.org")
(setq howm-view-title-header "*") ;; ← howm のロードより前に書くこと

;; キーバインドは C-a C-a にする
(global-unset-key (kbd "C-x C-a"))
(setq howm-prefix (kbd "C-x C-a"))

;;(autoload 'howm "howm" " Hitori Otegaru Wiki Modoki" nil)
(use-package howm)
(add-hook 'howm-mode-hook 'helm-howm)
;; (use-package helm-howm)
#+end_src

* Shell
** term-mode
   http://sakito.jp/emacs/emacsshell.html#emacs

#+begin_src emacs-lisp
;; shell の存在を確認
(defun skt:shell ()
  (or (executable-find "zsh")
      (executable-find "bash")
      ;; Emacs + Cygwin を利用する人は Zsh の代りにこれにしてください
      ;; (executable-find "f_zsh")
      ;; Emacs + Cygwin を利用する人は Bash の代りにこれにしてください
      ;; (executable-find "f_bash") 
      (executable-find "cmdproxy")
      (error "can't find 'shell' command in PATH!!")))

;; Shell 名の設定
(setq shell-file-name (skt:shell))
(setenv "SHELL" shell-file-name)
(setq explicit-shell-file-name shell-file-name)

;; エスケープを綺麗に表示する (ls とか)
;;(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
;;(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; http://d.hatena.ne.jp/mooz/20090613/p1
;; コントロールシーケンスを利用した色指定が使えるように
;;(use-package ansi-color)
;;(autoload 'ansi-color-for-comint-mode-on "ansi-color"
;;    "Set `ansi-color-for-comint-mode' to t." t)

(add-hook 'term-mode-hook
	  '(lambda ()
	    ;; zsh のヒストリファイル名を設定
	    (setq comint-input-ring-file-name "~/.zsh-histry")
	    ;; ヒストリの最大数
	    (setq comint-input-ring-size 1024)
	    ;; 既存の zsh ヒストリファイルを読み込み
	    (comint-read-input-ring t)
	    ;; zsh like completion (history-beginning-search)
	    (local-set-key "\M-p" 'comint-previous-matching-input-from-input)
	    (local-set-key "\M-n" 'comint-next-matching-input-from-input)
	    ;; 色の設定
	    ;; (setq ansi-color-names-vector
	    ;;  ["#000000"           ; black
	    ;;   "#ff6565"           ; red
	    ;;   "#93d44f"           ; green
	    ;;   "#eab93d"           ; yellow
	    ;;   "#204a87"           ; blue
	    ;;   "#ce5c00"           ; magenta
	    ;;   "#89b6e2"           ; cyan
	    ;;   "#ffffff"]          ; white
	    ;;  )
	    ;; (ansi-color-for-comint-mode-on)
	    )
	  )

;; utf-8
(set-language-environment  'utf-8)
(prefer-coding-system 'utf-8)

;; Emacs が保持する terminfo を利用する
(setq system-uses-terminfo nil)

;;タブ補完できないときのおまじない.
;; http://stackoverflow.com/questions/18278310/emacs-ansi-term-not-tab-completing
(add-hook 'term-mode-hook (lambda ()
        (setq yas-dont-activate t)))

;;shell の割り込みを機能させる
(defadvice term-interrupt-subjob (around ad-term-interrupt-subjob activate)
  (term-send-raw-string (kbd "C-c")))

;;シェルの行数を増やす
(add-hook 'term-mode-hook
(lambda ()
(setq term-buffer-maximum-size 10000)))

;; my-keybinds for keybinds -e
(defun term-send-forward-char ()
  (interactive)
  (term-send-raw-string "\C-f"))

(defun term-send-backward-char ()
  (interactive)
  (term-send-raw-string "\C-b"))

(defun term-send-previous-line ()
  (interactive)
  (term-send-raw-string "\C-p"))

(defun term-send-next-line ()
  (interactive)
  (term-send-raw-string "\C-n"))

(add-hook 'term-mode-hook
          '(lambda ()
             (let* ((key-and-func
                     `(("\C-p"           term-send-previous-line)
                       ("\C-n"           term-send-next-line)
                       ("\C-b"           term-send-backward-char)
                       ("\C-f"           term-send-forward-char)
                       (,(kbd "C-h")     term-send-backspace)
                       (,(kbd "C-y")     term-paste)
                       (,(kbd "ESC ESC") term-send-raw)
                       (,(kbd "C-S-p")   multi-term-prev)
                       (,(kbd "C-S-n")   multi-term-next)
                       )))
               (loop for (keybind function) in key-and-func do
                     (define-key term-raw-map keybind function)))))

;; (use-package helm-shell-history)
;; (add-hook 'term-mode-hook
;; 	  (lambda () (define-key term-raw-map (kbd "C-r") 'helm-shell-history)))
#+end_src

** Eshell

   M-p で helm-eshell-history 発動.

#+begin_src emacs-lisp
;; eshell
;; http://nishikawasasaki.hatenablog.com/entry/2012/09/12/233116
;; eshell での補完に auto-complete.el を使う
;; (use-package pcomplete)
;; (add-to-list 'ac-modes 'eshell-mode)
;; (ac-define-source pcomplete
;;   '((candidates . pcomplete-completions)))
;; (defun my-ac-eshell-mode ()
;;   (setq ac-sources
;;         '(ac-source-pcomplete
;;           ac-source-filename
;;           ac-source-files-in-current-dir
;;           ac-source-words-in-buffer
;;           ac-source-dictionary)))
;; (add-hook 'eshell-mode-hook
;;           (lambda ()
;;             (my-ac-eshell-mode)
;;             (define-key eshell-mode-map (kbd "C-i") 'auto-complete)
;;             (define-key eshell-mode-map [(tab)] 'auto-complete)))

;; helm で補完
(add-hook 'eshell-mode-hook
          #'(lambda ()
              (define-key eshell-mode-map
                (kbd "M-n")
                'helm-esh-pcomplete)))

;; helm で履歴から入力
(add-hook 'eshell-mode-hook
          #'(lambda ()
              (define-key eshell-mode-map
                (kbd "M-p")
                'helm-eshell-history)))

;; http://d.hatena.ne.jp/khiker/20060919/1158686507
;; キーバインドの変更
;; (add-hook 'eshell-mode-hook
;; 	  '(lambda ()
;; 	     (progn
;; 	       (define-key eshell-mode-map "\C-a" 'eshell-bol)
;; 	       (define-key eshell-mode-map "\C-p" 'eshell-previous-matching-input-from-input)
;; 	       (define-key eshell-mode-map "\C-n" 'eshell-next-matching-input-from-input)
;; 	       )
;; 	     ))

(setq eshell-prompt-function
      (lambda ()
        (concat "[tsu-nera"
                (eshell/pwd)
                (if (= (user-uid) 0) "]\n# " "]\n$ ")
                )))

;; これで正規表現がつかえるようになる?
(setq eshell-prompt-regexp "^[^#$]*[$#] ")

;; 補完時に大文字小文字を区別しない
(setq eshell-cmpl-ignore-case t)
;; 確認なしでヒストリ保存
(setq eshell-ask-to-save-history (quote always))
;; 補完時にサイクルする
(setq eshell-cmpl-cycle-completions t)
;;補完候補がこの数値以下だとサイクルせずに候補表示
(setq eshell-cmpl-cycle-cutoff-length 5)
;; 履歴で重複を無視する
(setq eshell-hist-ignoredups t)

;; sudo のあとも補完可能に
(defun pcomplete/sudo ()
  "Completion rules for the `sudo' command."
  (let ((pcomplete-help "complete after sudo"))
    (pcomplete-here (pcomplete-here (eshell-complete-commands-list)))))

;; eshell は 1 つしか生成できないので, 複数作成する.
;; http://stackoverflow.com/questions/2540997/create-more-than-one-eshell-instance-in-emacs
(defun make-shell (name)
  "Create a shell buffer named NAME."
  (interactive "sName: ")
  (setq name (concat "$" name))
  (eshell)
  (rename-buffer name))

;; なぜか helm がじゃまをするな.
(add-to-list 'helm-completing-read-handlers-alist '(make-eshell . nil))

;; eshell の alias 設定
(setq eshell-command-aliases-list
      (append
       (list
        (list "ll" "ls -ltr")
        (list "la" "ls -a")
        (list "l" "less")
        (list "o" "xdg-open")
        (list "lock" "gnome-screensaver-command --lock")
        (list "forced_git_local_destroy" "git fetch origin;git reset --hard origin/master")
       )
       eshell-command-aliases-list))

;; shell のキーバインド
(global-set-key (kbd "C-c t") 'eshell)

;; 別シェルを生成
(global-set-key (kbd "C-c C-x t") 'make-shell)
#+end_src

** exec-path-from-shell
   環境変数 PATH を引き継ぐ.
   http://sakito.jp/emacs/emacsshell.html#emacs

#+begin_src emacs-lisp
;; パスの引き継ぎ
(when linux-p
(use-package exec-path-from-shell)
(exec-path-from-shell-initialize)
)
;; (let* ((zshpath (shell-command-to-string
;; 		          "/usr/bin/env zsh -c 'printenv PATH'"))
;;               (pathlst (split-string zshpath ":")))
;;     (setq exec-path pathlst)
;;       (setq eshell-path-env zshpath)
;;         (setenv "PATH" zshpath))
#+end_src

* pdf-tools
PDF Viewer.

http://sheephead.homelinux.org/2014/03/17/7076/

github のやつだと, コンパイルエラーするので, fork して無理やり通した.

ArchLinux では, GhostScript を入れる.

#+begin_src sh
sudo pacman -S ghostscript
#+end_src

#+begin_src emacs-lisp
;; (when linux-p
;; (use-package pdf-tools)
;; (use-package pdf-annot)
;; (use-package pdf-history) 
;; (use-package pdf-info) 
;; (use-package pdf-isearch) 
;; (use-package pdf-links) 
;; (use-package pdf-misc) 
;; (use-package pdf-occur) 
;; (use-package pdf-outline) 
;; (use-package pdf-render) 
;; (use-package pdf-sync) 
;; (use-package tablist-filter)
;; (use-package tablist)
;; )
#+end_src

どうも, doc-view-mode がめちゃくちゃ遅い!linum-mode が有効なことが原因.
以下のページを参考に, major-mode が doc-view-mode のときは, linum-mode は disable に.

- [[http://stackoverflow.com/questions/16132234/how-can-i-speed-up-emacs-docview-mode][How can I speed up Emacs DocView mode? - Stack Overflow]]

** WIndows 環境
   頑張ってる. まだうごかない.

   - libglib
   - libglib-dev
   - libpopper
   - libpoppwer-glib8

* calfw
Emacs 用カレンダー.

* Google
** google-translate
   Google 翻訳.

   - [[http://qiita.com/catatsuy/items/ae9875706769d4f02317][卒論を英語で書けと言われしまったあなたにおすすめの Emacs の設定 - Qiita]]

#+begin_src emacs-lisp
(use-package google-translate)

(global-set-key "\C-xt" 'google-translate-at-point)
(global-set-key "\C-xT" 'google-translate-query-translate)

;; 翻訳のデフォルト値を設定 (ja -> en) (無効化は C-u する)
(custom-set-variables
 '(google-translate-default-source-language "ja")
 '(google-translate-default-target-language "en"))

;; google-translate.el の翻訳バッファをポップアップで表示させる
(push '("*Google Translate*") popwin:special-display-config)
#+end_src

** google-this
   Google 検索.
   
   - [[https://github.com/Bruce-Connor/emacs-google-this][Bruce-Connor/emacs-google-this]]

   代表的な使用方法.

   - C-c / g (RET) でその場のキーワード検索.
   - C-c / w でその場のワードを検索
   - C-c / l でその行を検索
   - C-c / c Google 翻訳

#+begin_src emacs-lisp
(use-package google-this)
(google-this-mode 1)
#+end_src

* Dictionary
** search-web
    無料でオンラインの英辞郎 on the WEB をサクッと利用する.

    - [[https://github.com/tomoya/search-web.el/tree/master][tomoya/search-web.el]]
    - [[http://qiita.com/akisute3@github/items/8deb54b75b48e8b04cb0][Emacs 使用中に素早く検索する - Qiita]]
    - [[http://d.hatena.ne.jp/tomoya/20090703/1246610432][Emacs ですぐに単語の検索をしたい欲望を叶える Elisp. - 日々, とん
      は語る. ]]

    とくに, キーバインドはつけてない.

#+begin_src emacs-lisp
(use-package search-web)
;; 英辞郎 ... なんかうごかないな.
;; (define-key global-map (kbd "C-x g e") (lambda () (interactive) (search-web-at-point "eow")))
;; (define-key global-map (kbd "C-x g C-e") (lambda () (interactive) (search-web-region "eow")))
#+end_src

** codic
   エンジニアのためのネーミング辞書.

   M-x codic xxx

#+begin_src emacs-lisp
(use-package codic)
#+end_src

* Pomodoro
  ポモドーロ関係のツール.

  - [[http://pomodorotechnique.com/][HOME - The Pomodoro Technique ® The Pomodoro Technique ®]]
  - 

** 一覧
  - https://github.com/konr/tomatinho
  - http://ivan.kanis.fr/pomodoro.el
  - https://github.com/lolownia/org-pomodoro
  - https://github.com/baudtack/pomodoro.el

** tomatinho
ちょっとかわったポモドーロツール.

- https://github.com/konr/tomatinho

使わないので一旦封印.

#+begin_src emacs-lisp
;; (use-package tomatinho)
;; (global-set-key (kbd "<f12>") 'tomatinho)
;; (define-key tomatinho-map (kbd "N") 'tomatinho-interactive-new-pomodoro)
;; (define-key tomatinho-map (kbd "P") 'tomatinho-interactive-deliberate-pause)
;; (define-key tomatinho-map (kbd "T") 'tomatinho-interactive-toggle-display)
#+end_src

** pomodoro.el
   なんか, pomodoro.el が 同じ名前で 3 つもある気がする.
   とりあえず, el-get のレシピがあったものを利用.

   - [[https://github.com/syohex/emacs-utils][syohex/emacs-utils]]
   - [[http://d.hatena.ne.jp/syohex/20121215/1355579575][Emacs でポモドーロテクニック - Life is very short]]

   使わないので一旦封印.

#+begin_src emacs-lisp
;; (use-package pomodoro)

;; (when linux-p
;; ;; hook 関数関連
;; (use-package notifications)
;; (defun* my/pomodoro-notification (&key (title "Pomodoro")
;;                                        body
;;                                        (urgency 'normal))
;;   (notifications-notify :title title :body body :urgency urgency))

;; ;; 作業終了後の hook
;; (add-hook 'pomodoro:finish-work-hook
;;           (lambda ()
;;             (my/pomodoro-notification :body "Work is Finish")
;; 	    (rest)
;; 	    (shell-command "mplayer /usr/share/sounds/freedesktop/stereo/service-login.oga >/dev/null 2>&1")
;; 	    ))

;; ;; 休憩終了後の hook
;; (add-hook 'pomodoro:finish-rest-hook
;;           (lambda ()
;;             (my/pomodoro-notification :body "Break time is finished")
;; 	    (shell-command "mplayer /usr/share/sounds/freedesktop/stereo/service-login.oga >/dev/null 2>&1")
;; 	    ))
;; )
#+end_src

* e2wm
  Emacs ようの window manager.

  - [[https://github.com/kiwanami/emacs-window-manager][kiwanami/emacs-window-manager]]
  - [[http://d.hatena.ne.jp/kiwanami/20100528/1275038929][広くなった画面を有効利用できる, Emacs 内 Window 管理ツール e2wm.el を作ってみた]]

  array を利用すると, windows のようなタブで画面切り替え.

  - [[http://aki2o.hatenablog.jp/entry/2014/08/19/Emacs%E3%81%A7%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E5%86%85%E5%AE%B9%E3%82%92%E7%9B%AE%E8%A6%96%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E7%9B%AE%E7%9A%84%E3%81%AE%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%81%AB][Emacs でバッファ内容を目視確認して目的のバッファに素早く切り替える - 死ぬまでの暇潰し]]

    #+begin_src emacs-lisp
    (use-package e2wm)
    (global-set-key (kbd "M-+") 'e2wm:start-management)
    (when linux-p
    ;; 使わないから封印.
    ;; (global-set-key (kbd "M-<tab>") 'e2wm:dp-array)
    )
    #+end_src

** e2wm-direx
   - [[https://github.com/aki2o/e2wm-direx][aki2o/e2wm-direx]]

#+begin_src emacs-lisp
;; (use-package e2wm-direx)
(setq e2wm:c-code-recipe
      '(| (:left-max-size 40)
          (- (:upper-size-ratio 0.6)
             tree history)
          (- (:lower-max-size 150)
             (| (:right-max-size 40)
                main imenu)
             sub)))

(setq e2wm:c-code-winfo
      '((:name main)
        (:name tree    :plugin dired)
        (:name history :plugin history-list)
        (:name imenu   :plugin imenu :default-hide nil)
        (:name sub     :buffer "*info*" :default-hide t)))
#+end_src

* psession
  セッション保存. escreen に対応してくれないかな. . .

- [[https://github.com/thierryvolpiatto/psession][thierryvolpiatto/psession]]
[[http://rubikitch.com/2014/08/21/psession/][- Emacs のデータ・バッファ・ウィンドウ構成を永続化し, 再起動時に復元する方法 るびきち× Emacs]]

#+begin_src emacs-lisp
;; (use-package psession)
;; (autoload 'psession-mode "persistent-sessions.el")
;; (psession-mode 1)
#+end_src
* gist
  Emacs gist interface
  - https://github.com/defunkt/gist.el
  - https://github.com/emacs-helm/helm-gist/blob/master/helm-gist.el

#+begin_src emacs-lisp
(use-package gist)
;; (use-package helm-gist)
#+end_src

* ERC
  Emacs のチャットツール.
  
  - [[http://www.emacswiki.org/ERC][EmacsWiki: ERC]]
  - [[http://en.wikipedia.org/wiki/ERC_(software)][ERC (software) - Wikipedia, the free encyclopedia]]
  - [[http://emacs-fu.blogspot.jp/2009/06/erc-emacs-irc-client.html][emacs-fu: ERC: the emacs IRC client]]
  - [[http://sleepboy-zzz.blogspot.jp/2013/07/emacs-ercirc.html][memo: Emacs ERC で IRC を試してみた]]

#+begin_src emacs-lisp
;; (use-package erc)

;; ログイン情報
;; (setq erc-server "localhost")
;; (setq erc-port "6667")
;; (setq erc-nick "tsu-nera")
;; (setq erc-password "")

(autoload 'erc "erc" "" t)
(defmacro de-erc-connect (command server port nick)
  "Create interactive command `command', for connecting to an IRC server. The
command uses interactive mode if passed an argument."
  (fset command
	`(lambda (arg)
	   (interactive "p")
	   (if (not (= 1 arg))
	       (call-interactively 'erc)
	     (erc :server ,server :port ,port :nick ,nick)))))

;; (de-erc-connect erc-opn "localhost" 6667 "tsu-nera")
#+end_src

** ログアウト
   - /PART Channel をさる
   - /QUIT msg Server をさる

#+begin_src emacs-lisp
;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)
#+end_src

- [[http://www.emacswiki.org/emacs/ErcStartupFiles][EmacsWiki: Erc Startup Files]]

** ニックネームハイライト
*** erc-highlight-nicknames
   - [[http://www.emacswiki.org/ErcHighlightNicknames][EmacsWiki: Erc Highlight Nicknames]]

#+begin_src emacs-lisp
;; (and
;;   (use-package erc-highlight-nicknames)
;;   (add-to-list 'erc-modules 'highlight-nicknames)
;;   (erc-update-modules))
#+end_src

*** erc-hl-nicks
    erc-highlight-nicknames の改良版か?
  - https://github.com/leathekd/erc-hl-nicks

#+begin_src emacs-lisp
(use-package erc-hl-nicks)
#+end_src


** 通知
*** ERC notification
    登録した単語をみつけたら反応する.
    - [[https://julien.danjou.info/blog/2012/erc-notifications][ERC notifications | Julien Danjou]]

#+begin_src emacs-lisp
(add-to-list 'erc-modules 'notifications)
(erc-update-modules)
(setq erc-pals '("*all" "tsune" "tsu-nera")
 erc-notify-list erc-pals)
#+end_src
      
*** erc-nick-notify
    呼ばれたら反応する.
  - [[http://www.emacswiki.org/emacs/ErcNickNotify][EmacsWiki: Erc Nick Notify]]

    notify-send しか対応していないのかな??
    
#+begin_src emacs-lisp
(autoload 'erc-nick-notify-mode "erc-nick-notify"
  "Minor mode that calls `erc-nick-notify-cmd' when his nick gets
  mentioned in an erc channel" t)
  (eval-after-load 'erc '(erc-nick-notify-mode t))
#+end_src

*** erc-input-lien-position

#+begin_src emacs-lisp
(setq erc-input-line-position -2)
#+end_src

** Encoding
   #+begin_src emacs-lisp
   ;; UTF-8
   ;; (setq  erc-server-coding-system '(utf-8 . utf-8))

   ;; Shift-JIS
   ;; (setq erc-server-coding-system に (iso-2022-jp . iso-2022-jp))
   #+end_src

** width を可変にする
   デフォルトは 78 で折り返し.
   - [[http://www.emacswiki.org/emacs/ErcFilling][EmacsWiki: Erc Filling]]

#+begin_src emacs-lisp
 (add-hook 'window-configuration-change-hook 
	   '(lambda ()
	      (setq erc-fill-column (- (window-width) 2))))
#+end_src
