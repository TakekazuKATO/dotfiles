#+TITLE: Utility
* Utility
  この elisp こそ, Emacs のすごさを示すものだ.

#+begin_src text
  Emacs は OS!
  Emacs は世界!
  Emacs は人生!
#+end_src

* Web Browser: ブラウザ関連

#+begin_src emacs-lisp
(when linux-p
  (setq browse-url-generic-program (executable-find "conkeror")))

;; 
(when windows-p
  ;;  (setq browse-url-browser-function 'browse-url-default-windows-browser))
  (setq browse-url-generic-program 'browse-url-firefox))

(setq browse-url-browser-function 'browse-url-generic)

;; 今のポイントしている URL を開く
(global-set-key (kbd "C-c u") 'browse-url-at-point)
(define-key goto-map [?b] #'browse-url-at-point)
#+end_src

** w3m
    eww が登場したのでもはや過去のもの. もう使わないだろう.

#+begin_src emacs-lisp
;; (use-package w3m-load
;;  :config
;;  (setq w3m-use-cookies t)
;;  (setq w3m-favicon-cache-expire-wait nil)
;;  (setq w3m-home-page "http://www.google.co.jp/")
;;  
;;  (when windows-p
;;    ;;(setq exec-path (append exec-path '("C://app//w3m-mingw32")))
;;    (setq exec-path (append exec-path '("C:/cygwin64/bin")))
;;    )
;;
;;  (setq w3m-user-agent  "Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; 
;;        HTC_Pyramid Build/GRI40) AppleWebKit/533.1 
;;        (KHTML, like Gecko) Version/4.0 Mobile Safari/533.")
;;)
#+end_src

** webkit
   うごかない. . . .
   - [[https://github.com/linuxdeepin/deepin-emacs/tree/master/site-lisp/extensions/webkit][deepin-emacs/site-lisp/extensions/webkit at master · linuxdeepin/deepin-emacs]]

     - webkit/helm-webkit from github
     - epc from el-get
     - Pyqt5  yaourt -S python2-pyqt5 qt5-webkit
     - PythonXlib yaourt -S python2-xlib

#+begin_src emacs-lisp
;; (use-package webkit)
;; (use-package helm-webkit)
#+end_src

** edit-server
   Google Chrome のフォームを emacs で編集. Edit with Emacs.
   - https://github.com/stsquad/emacs_chrome/blob/master/servers/edit-server.el

 #+begin_src emacs-lisp
(use-package edit-server
  :config
  (setq edit-server-new-frame nil)
  ;; 手動で起動にする.
  ;; (edit-server-start)
  )
 #+end_src

* パスワード管理
** netrc
   build-in のパスワード管理.
   パスワード自体は ~/.netrc に書き込む. 

#+begin_src emacs-lisp
(use-package netrc :defer t)
#+end_src

* Chat
** twittering-mode
  Emacs Twitter Client
  - [[http://www.emacswiki.org/emacs/TwitteringMode-ja][EmacsWiki: TwitteringMode-ja]]

#+begin_src emacs-lisp
(use-package twittering-mode
  :bind ("C-c C-x w" . twittering-update-status-from-pop-up-buffer)
  :config
  (setq twittering-use-master-password t)
  ;; パスワード暗号ファイル保存先変更 (デフォはホームディレクトリ)
  (setq twittering-private-info-file "~/.emacs.d/twittering-mode.gpg")
  )
#+end_src

*** popwin に閉じ込める
   このアイデアは good idea.
   - [[http://d.hatena.ne.jp/lurdan/20130225/1361806605][twittering-mode を popwin に閉じこめる - *scratch*]]

** bitlbee
  yaourt bitlbee でいれた.
  - [[https://wiki.archlinux.org/index.php/bitlbee][Bitlbee - ArchWiki]]
  - [[http://www.emacswiki.org/emacs/BitlBee][EmacsWiki: Bitl Bee]]
  - [[http://emacs-fu.blogspot.jp/2012/03/social-networking-with-bitlbee-and-erc.html][emacs-fu: social networking with bitlbee and erc]]

まだ動かした実績はなし. . . とりあえず入れておくか.

#+begin_src emacs-lisp
;; (use-package bitlbee)
;; (defun i-wanna-be-social ()
;;   "Connect to IM networks using bitlbee."
;;   (interactive)
;;   (erc :server "localhost" :port 6667 :nick "user"))
#+end_src

** ERC
   Emacs のチャットツール.
  
   - [[http://www.emacswiki.org/ERC][EmacsWiki: ERC]]
   - [[http://en.wikipedia.org/wiki/ERC_(software)][ERC (software) - Wikipedia, the free encyclopedia]]
   - [[http://emacs-fu.blogspot.jp/2009/06/erc-emacs-irc-client.html][emacs-fu: ERC: the emacs IRC client]]
   - [[http://sleepboy-zzz.blogspot.jp/2013/07/emacs-ercirc.html][memo: Emacs ERC で IRC を試してみた]]

   - [[http://www.emacswiki.org/emacs/ErcStartupFiles][EmacsWiki: Erc Startup Files]]

#+begin_src emacs-lisp
;; (use-package erc
;;  :commands erc
;;  :config

;; 調子がわるいので, use-package をやめてみる.
(when windows-p
(require 'erc)

  ;; ログイン情報
  ;; (setq erc-server "localhost")
  ;; (setq erc-port "6667")
  ;; (setq erc-nick "tsu-nera")
  ;; (setq erc-password "")

  (defmacro de-erc-connect (command server port nick)
    "Create interactive command `command', for connecting to an IRC server. The
command uses interactive mode if passed an argument."
    (fset command
	  `(lambda (arg)
	     (interactive "p")
	     (if (not (= 1 arg))
		 (call-interactively 'erc)
		 (erc :server ,server :port ,port :nick ,nick)))))
  
 (defmacro asf-erc-bouncer-connect (command server port nick ssl pass)
   "Create interactive command `command', for connecting to an IRC server. The
   command uses interactive mode if passed an argument."
   (fset command
         `(lambda (arg)
           (interactive "p")
	   (if (not (= 1 arg))
	       (call-interactively 'erc)
	     (let ((erc-connect-function ',(if ssl
					       'erc-open-ssl-stream
					     'open-network-stream)))
 	       (erc :server ,server :port ,port :nick ,nick :password ,pass))))))
  
  ;; (de-erc-connect erc-opn "localhost" 6667 "tsu-nera")
#+end_src

*** ログアウト
    - /PART Channel をさる
    - /QUIT msg Server をさる
    - [[http://www.emacswiki.org/emacs/ErcStartupFiles][EmacsWiki: Erc Startup Files]]

#+begin_src emacs-lisp
;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)
#+end_src

*** ニックネームハイライト
**** erc-highlight-nicknames
    - [[http://www.emacswiki.org/ErcHighlightNicknames][EmacsWiki: Erc Highlight Nicknames]]

 #+begin_src emacs-lisp
;; (and
;;   (use-package erc-highlight-nicknames)
;;   (add-to-list 'erc-modules 'highlight-nicknames)
;;   (erc-update-modules))
 #+end_src

**** erc-hl-nicks
     erc-highlight-nicknames の改良版か?
   - https://github.com/leathekd/erc-hl-nicks

 #+begin_src emacs-lisp
(use-package erc-hl-nicks)
 #+end_src

*** 通知
**** ERC notification
     登録した単語をみつけたら反応する.
     - [[https://julien.danjou.info/blog/2012/erc-notifications][ERC notifications Julien Danjou]]

#+begin_src emacs-lisp
(add-to-list 'erc-modules 'notifications)
(erc-update-modules)
(setq erc-pals '("tsune" "tsu-nera")
      erc-notify-list erc-pals)
#+end_src
      
**** erc-nick-notify
     呼ばれたら反応する.
     - [[http://www.emacswiki.org/emacs/ErcNickNotify][EmacsWiki: Erc Nick Notify]]
     
     notify-send しか対応していないみたい. Linux 用..
    
     #+begin_src emacs-lisp
(use-package erc-nick-notify
  :commands erc-nick-notify-mode
  :config
  (erc-nick-notify-mode t))
#+end_src
 
**** erc-input-lien-position
 #+begin_src emacs-lisp
(setq erc-input-line-position -2)
 #+end_src

**** growl
     Growl できるっぽい. Growl for windows で通知できるか??
     - [[http://www.emacswiki.org/emacs/ErcGrowl][EmacsWiki: Erc Growl]]
     - https://github.com/samaaron/samaaron-pack/blob/master/config/erc-growl.el
     - https://gist.github.com/danielsz/ac19353e718dde3dea72
     - [[http://qiita.com/rohinomiya/items/5e485d6700eac256af9f][Windows で Growl 通知を行う - Qiita]]

    Growl を利用すると, Alt+x, Alt+Shift+x が利用できなくなるという
    致命的な問題がある.

    %USERPROFILE%\Local Settings\Application Data\Growl\2.0.0.0\user.config

    で Alt+X とかいてあるところをべつのものに修正すればいい.
    - [[http://stackoverflow.com/questions/6495050/how-can-i-use-alt-as-meta-key-in-windows-for-emacs-23-especially-m-x][How can I use Alt as meta key in Windows for Emacs 23, especially M-x? - Stack Overflow]]
    - https://groups.google.com/forum/#!topic/growl-for-windows/Yu3bo3EZ9SA

    To Do Chi Ku という通知用のインタファースもあるが動かなかった
    - [[http://www.emacswiki.org/emacs/ToDoChiKu][EmacsWiki: To Do Chi Ku]]
    - [[http://justinsboringpage.blogspot.jp/2009/09/making-emacs-growl.html][justinhj's coding blog: Making emacs growl]]

#+begin_src emacs-lisp
(when windows-p
  (use-package my-growl-for-windows))
#+end_src

*** erc-match
#+begin_src emacs-lisp
(use-package erc-match)
#+end_src

*** Encoding
    #+begin_src emacs-lisp
   ;; UTF-8
   ;; (setq  erc-server-coding-system '(utf-8 . utf-8))

   ;; Shift-JIS
   ;; (setq erc-server-coding-system に (iso-2022-jp . iso-2022-jp))
    #+end_src

*** width を可変にする
    デフォルトは 78 で折り返し.
    - [[http://www.emacswiki.org/emacs/ErcFilling][EmacsWiki: Erc Filling]]

#+begin_src emacs-lisp
(add-hook 'window-configuration-change-hook 
	  '(lambda ()
	     (setq erc-fill-column (- (window-width) 2))))
#+end_src
*** End of ERC Config
#+begin_src emacs-lisp
)
#+end_src

* Hown
  Function : Evernote を越えるメモ管理ツール
  - http://www.gfd-dennou.org/member/uwabami/cc-env/emacs/howm_config.html
  - http://d.hatena.ne.jp/TakashiHattori/20120627/1340768058

  使いこなせてないので封印.いつか, 使いこなしたい.

#+begin_src emacs-lisp
;; *.org を開いたら howm-mode も起動する
;;(add-hook 'org-mode-hook 'howm-mode)

;; howm のメモを置くディレクトリ (任意)
;; (setq howm-directory "~/gtd/howm") ;; メニュー表示しない
;; (setq howm-menu-top nil)
;; メニューの言語設定
;; (setq howm-menu-lang 'ja)
;; howm ファイル名を設定する. org-mode を起動するため拡張子は .org にする.
;; (setq howm-file-name-format "%Y%m%d-%H%M%S.org")
;; (setq howm-view-title-header "*") ;; ← howm のロードより前に書くこと

;; キーバインドは C-a C-a にする
;; (global-unset-key (kbd "C-x C-a"))
;; (setq howm-prefix (kbd "C-x C-a"))

;;(autoload 'howm "howm" " Hitori Otegaru Wiki Modoki" nil)
;; (use-package howm)
;; (add-hook 'howm-mode-hook 'helm-howm)
;; (use-package helm-howm)
#+end_src

* pdf-tools
  PDF Viewer.
  - https://github.com/politza/pdf-tools
  - http://www.dailymotion.com/video/x2bc1is_pdf-tools-tourdeforce_tech?forcedQuality%3Dhd720
  - http://sheephead.homelinux.org/2014/03/17/7076/

  github のやつだと, コンパイルエラーするので, fork して無理やり通した.
  -> patch とりこまれた

  ArchLinux では, GhostScript を入れる.

#+begin_src sh
sudo pacman -S ghostscript
#+end_src

#+begin_src emacs-lisp
(use-package pdf-tools
  :if linux-p
  :init
  (setq pdf-info-epdfinfo-program
	(concat (el-get-package-directory "pdf-tools") "src/epdfinfo"))
  (add-hook 'pdf-view-mode
 	    (lambda ()
	      (pdf-isearch-minor-mode)))
  :mode (("\\.pdf$" . pdf-view-mode)))
;;  :config
  
  
  

;; (defconst 
;; '(pdf-history-minor-mode
;; 
;; pdf-links-minor-mode
;; pdf-misc-minor-mode
;; pdf-outline-minor-mode
;; pdf-misc-size-indication-minor-mode
;; pdf-misc-menu-bar-minor-mode
;; pdf-annot-minor-mode
;; pdf-sync-minor-mode
;; pdf-misc-context-menu-minor-mode
;; pdf-cache-prefetch-minor-mode))	      
	      ;; (use-package pdf-isearch)
	      ;; (use-package pdf-annot)
	      ;; (use-package pdf-history) 
	      ;; (use-package pdf-info)
	      ;; (use-package pdf-links) 
	      ;; (use-package pdf-misc) 
	      ;; (use-package pdf-occur) 
	      ;; (use-package pdf-outline) 
	      ;; (use-package pdf-sync) 
	      ;; (use-package tablist-filter)
	      ;; (use-package tablist))))
#+end_src

  どうも, doc-view-mode がめちゃくちゃ遅い!linum-mode が有効なことが原因.
  以下のページを参考に, major-mode が 
  - doc-view-mode
  - pdf-view-mode
  のときは, linum-mode は disable に.
  - [[http://stackoverflow.com/questions/16132234/how-can-i-speed-up-emacs-docview-mode][How can I speed up Emacs DocView mode? - Stack Overflow]]

** WIndows 環境
   頑張ってる. まだうごかない.

   - libglib
   - libglib-dev
   - libpopper
   - libpoppwer-glib8

* calfw
  Emacs 用カレンダー.
  -> org-mode に移動.

* Google
** google-translate
   Google 翻訳.
   - [[http://qiita.com/catatsuy/items/ae9875706769d4f02317][卒論を英語で書けと言われしまったあなたにおすすめの Emacs の設定 - Qiita]]
   - [[http://rubikitch.com/2014/12/07/google-translate/][emacs google-translate.el : Google 翻訳で言語自動判別しつつ英訳・和訳する!]]
   
#+begin_src emacs-lisp
(use-package google-translate
  :bind (("C-x t" . google-translate-enja-or-jaen)
	 ("C-x T" . google-translate-query-translate))
  :init
  ;; ;; 翻訳のデフォルト値を設定 (ja -> en) (無効化は C-u する)
  ;; -> patch で自動判別
  ;; (custom-set-variables
  ;;  '(google-translate-default-source-language "ja")
  ;;  '(google-translate-default-target-language "en"))
  :config
  (use-package my-patch-google-translate)
  )
#+end_src

** google-this
   Google 検索. これは便利だぁ.
   - [[https://github.com/Bruce-Connor/emacs-google-this][Bruce-Connor/emacs-google-this]]

   代表的な使用方法.
   - C-c / g (RET) でその場のキーワード検索.
   - C-c / w でその場のワードを検索
   - C-c / l でその行を検索
   - C-c / c Google 翻訳

#+begin_src emacs-lisp
(use-package google-this
  :config
  (google-this-mode 1))
#+end_src

* Dictionary
** search-web
    無料でオンラインの英辞郎 on the WEB をサクッと利用する.

    - [[https://github.com/tomoya/search-web.el/tree/master][tomoya/search-web.el]]
    - [[http://qiita.com/akisute3@github/items/8deb54b75b48e8b04cb0][Emacs 使用中に素早く検索する - Qiita]]
    - [[http://d.hatena.ne.jp/tomoya/20090703/1246610432][Emacs ですぐに単語の検索をしたい欲望を叶える Elisp. - 日々, とん
      は語る. ]]

    とくに, キーバインドはつけてない.

#+begin_src emacs-lisp
(use-package search-web :defer t)
;; 英辞郎 ... なんかうごかないな.
;; (define-key global-map (kbd "C-x g e") (lambda () (interactive) (search-web-at-point "eow")))
;; (define-key global-map (kbd "C-x g C-e") (lambda () (interactive) (search-web-region "eow")))
#+end_src

** codic
   エンジニアのためのネーミング辞書.

   M-x codic xxx

#+begin_src emacs-lisp
(use-package codic :defer t)
#+end_src

* Pomodoro
  ポモドーロ関係のツール.
  - [[http://pomodorotechnique.com/][HOME - The Pomodoro Technique ® The Pomodoro Technique ®]]

** 一覧
  - https://github.com/konr/tomatinho
  - http://ivan.kanis.fr/pomodoro.el
  - https://github.com/lolownia/org-pomodoro
  - https://github.com/baudtack/pomodoro.el

** tomatinho
ちょっとかわったポモドーロツール.

- https://github.com/konr/tomatinho

使わないので一旦封印.

#+begin_src emacs-lisp
;; (use-package tomatinho)
;; (global-set-key (kbd "<f12>") 'tomatinho)
;; (define-key tomatinho-map (kbd "N") 'tomatinho-interactive-new-pomodoro)
;; (define-key tomatinho-map (kbd "P") 'tomatinho-interactive-deliberate-pause)
;; (define-key tomatinho-map (kbd "T") 'tomatinho-interactive-toggle-display)
#+end_src

** pomodoro.el
   なんか, pomodoro.el が 同じ名前で 3 つもある気がする.
   とりあえず, el-get のレシピがあったものを利用.

   - [[https://github.com/syohex/emacs-utils][syohex/emacs-utils]]
   - [[http://d.hatena.ne.jp/syohex/20121215/1355579575][Emacs でポモドーロテクニック - Life is very short]]

   使わないので一旦封印.

#+begin_src emacs-lisp
;; (use-package pomodoro)

;; (when linux-p
;; ;; hook 関数関連
;; (use-package notifications)
;; (defun* my/pomodoro-notification (&key (title "Pomodoro")
;;                                        body
;;                                        (urgency 'normal))
;;   (notifications-notify :title title :body body :urgency urgency))

;; ;; 作業終了後の hook
;; (add-hook 'pomodoro:finish-work-hook
;;           (lambda ()
;;             (my/pomodoro-notification :body "Work is Finish")
;; 	    (rest)
;; 	    (shell-command "mplayer /usr/share/sounds/freedesktop/stereo/service-login.oga >/dev/null 2>&1")
;; 	    ))

;; ;; 休憩終了後の hook
;; (add-hook 'pomodoro:finish-rest-hook
;;           (lambda ()
;;             (my/pomodoro-notification :body "Break time is finished")
;; 	    (shell-command "mplayer /usr/share/sounds/freedesktop/stereo/service-login.oga >/dev/null 2>&1")
;; 	    ))
;; )
#+end_src

* psession
  セッション保存. elscreen に対応してくれないかな. . .
  - [[https://github.com/thierryvolpiatto/psession][thierryvolpiatto/psession]]
  - [[http://rubikitch.com/2014/08/21/psession/][Emacs のデータ・バッファ・ウィンドウ構成を永続化し, 再起動時に復元する方法 るびきち× Emacs]]

  -> elscreen-persist に以降したので一旦封印.

#+begin_src emacs-lisp
(use-package psession
  :disabled t
  :config
  (autoload 'psession-mode "persistent-sessions.el")
  (psession-mode 1)
  )
#+end_src
* emms
  Emacs のためのメディアプレーヤー
  - [[http://www.gnu.org/software/emms/][EMMS - Emacs Multimedia System]]
  - [[http://www.emacswiki.org/emacs/EMMS][EmacsWiki: EMMS]]

** 基本操作
   - [[http://www.gnu.org/software/emms/manual/index.html#Top][The Emms Manual]]
   まず, emms を起動する. playlist が表示される.

  - emms-play-xxx: 音楽再生
  - emms-add-xxx:  音楽をプレイリストに追加.
  - emms-start: プレイリストを再生

  基本コマンドは以下を参照.
  - [[http://www.gnu.org/software/emms/manual/Basic-Commands.html#Basic-Commands][Basic Commands - The Emms Manual]]

  Emacs で SoundCloud を聞く方法
  - https://github.com/r0man/soundklaus.el

** Settings

#+begin_src emacs-lisp
(use-package emms-setup
  :if linux-p
  :init
  (eval-after-load 'smartrep
  '(progn
     (smartrep-define-key
	 global-map "C-x C-9"
       '(("+"      . 'emms-volume-raise)
	 ("-"      . 'emms-volume-lower)
	 ("n"      . 'emms-next)
	 ("p"      . 'emms-previous)))))
  :config
  (require 'emms-volume)
  ;; (emms-standard)
  (emms-all)
  ;; (emms-default-players)
  ;; (setq emms-player-list '(emms-player-mpg321
  ;;                          emms-player-ogg123
  ;;                          emms-player-mplayer))
  (setq emms-stream-default-action "play")
  (setq emms-source-file-default-directory "~/Music/")
  ;; RET が動かないので
  (define-key emms-stream-mode-map (kbd "C-c C-c") 'emms-stream-play))
  #+end_src

  その他として helm-emms が C-x c #にある. 便利.

** vlc
   https をサポートに追加する.

#+begin_src emacs-lisp
(use-package emms-player-vlc
  :config
  (setq emms-player-list '(emms-player-vlc))
  (define-emms-simple-player vlc '(file url)
    (concat "\\`\\(https?\\|mms\\)://\\|"
	    (emms-player-simple-regexp
	     "ogg" "mp3" "wav" "mpg" "mpeg" "wmv" "wma"
	     "mov" "avi" "divx" "ogm" "ogv" "asf" "mkv"
	     "rm" "rmvb" "mp4" "flac" "vob" "m4a" "ape"))
    "vlc" "--intf=rc"))
#+end_src

** Stream
   ストリームを再生できる. 
   (emms-all) をするか, (require 'emms-streams) で有効になる.
   emms-streams で Default で登録されてる URL がでる.

   WCPE, Classical Music
   - http://www.ibiblio.org/wcpe/wcpe.pls

   BBC Classic (Raido3)
   - http://www.bbc.co.uk/radio/listen/live/r3_aaclca.pls

