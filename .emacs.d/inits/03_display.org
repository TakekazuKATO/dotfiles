* Display
表示関連。

* Global
- ツールバーを消す
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

- emacs -nw で起動した時にメニューバーを消す
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

- スクロールバーを消す
#+begin_src emacs-lisp
(set-scroll-bar-mode nil)
#+end_src

- 対応する括弧を光らせる。
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

- 画像ファイルを表示する
#+begin_src emacs-lisp
(if window-system (auto-image-file-mode t)(auto-image-file-mode nil))
#+end_src

- モードラインに時間を表示する
#+begin_src emacs-lisp
(display-time)

(setq display-time-day-and-date t)
#+end_src

- 現在の関数名をモードラインに表示
#+begin_src emacs-lisp
(which-function-mode 1)
#+end_src
- 行番号の表示

#+begin_src emacs-lisp
(global-linum-mode t)
#+end_src

- 現在行に色をつける
#+begin_src emacs-lisp
(global-hl-line-mode 1) 
#+end_src

- とにかく色をつける
#+begin_src emacs-lisp
;;(global-font-lock-mode 1)
#+end_src

- Add proper word wrapping
#+begin_src emacs-lisp
;; (global-visual-line-mode t)
#+end_src

* ハイライト
** 80行目をハイライト

#+begin_src emacs-lisp
(require 'highlight-80+)
#+end_src

** Set Markをハイライト
- [[http://www.emacswiki.org/emacs/VisibleMark][EmacsWiki: Visible Mark]]

#+begin_src emacs-lisp
#+end_src

** Bookmarksをハイライト

- [[https://github.com/joodland/bm][joodland/bm]]

#+begin_src emacs-lisp
(require 'bm)

(global-set-key (kbd "<C-f5>") 'bm-toggle)
(global-set-key (kbd "<f5>")   'bm-next)
(global-set-key (kbd "<S-f5>") 'bm-previous)
#+end_src

** TODOをハイライト
  highlighting-todos-in-all-programming-modes

 http://stackoverflow.com/questions/8551320/

#+begin_src emacs-lisp
;; (add-hook 'prog-mode-hook
;; 	  (lambda ()
;; 	    (font-lock-add-keywords nil
;;            '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))
#+end_src

上のがうまくうごかないので、fic-ext-modeを利用。

NOTE: If you manually turn on fic-ext-mode, you you might need to force re-fontification initially

M-x font-lock-fontify-buffer

#+begin_src emacs-lisp
(require 'fic-ext-mode)
(defun add-something-to-mode-hooks (mode-list something)
  "helper function to add a callback to multiple hooks"
  (dolist (mode mode-list)
    (add-hook (intern (concat (symbol-name mode) "-mode-hook")) something)))

(add-something-to-mode-hooks '(c++ emacs-lisp ruby text scala) 'fic-ext-mode)
#+end_src

** シンボルをハイライト
highight-symbol/auto-highlight-symbol

http://shibayu36.hatenablog.com/entry/2013/12/30/190354

#+begin_src emacs-lisp
(require 'auto-highlight-symbol-config)
(require 'highlight-symbol)
(setq highlight-symbol-colors '("DarkOrange" "DodgerBlue1" "DeepPink1"))

(global-set-key (kbd "<f4>") 'highlight-symbol-at-point)
(global-set-key (kbd "C-<f4>") 'highlight-symbol-next)
(global-set-key (kbd "S-<f4>") 'highlight-symbol-prev)
(global-set-key (kbd "ESC <f4>") 'highlight-symbol-remove-all)
#+end_src

* フォント
** Ricty
http://d.hatena.ne.jp/kitokitoki/20110502/p2

no window モードはXの設定にしたがっているので、.Xdefaultsの設定を調整する必要あり。

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "ricty-13"))
#+end_src

* 左右のバッファをF2で交換する
  http://d.hatena.ne.jp/supermassiveblackhole/20100625/1277436024
  
#+begin_src emacs-lisp
(defun swap-screen()
  "Swap two screen,leaving cursor at current window."
  (interactive)
  (let ((thiswin (selected-window))
	(nextbuf (window-buffer (next-window))))
    (set-window-buffer (next-window) (window-buffer))
    (set-window-buffer thiswin nextbuf)))

(defun swap-screen-with-cursor()
  "Swap two screen,with cursor in same buffer."
  (interactive)
  (let ((thiswin (selected-window))
	(thisbuf (window-buffer)))
    (other-window 1)
    (set-window-buffer thiswin (window-buffer))
    (set-window-buffer (selected-window) thisbuf)))

(global-set-key [f2] 'swap-screen)
(global-set-key [S-f2] 'swap-screen-with-cursor)
#+end_src

* 縦横のバッファをF3で交換する

http://masutaka.net/chalow/2011-05-19-1.html

#+BEGIN_SRC emacs-lisp
  (defun window-toggle-division ()
    "ウィンドウ 2 分割時に、縦分割<->横分割"
    (interactive)
    (unless (= (count-windows 1) 2)
      (error "ウィンドウが 2 分割されていません。"))
    (let ((before-height)
          (other-buf (window-buffer (next-window))))
      (setq before-height (window-height))
      (delete-other-windows)
      (if (= (window-height) before-height)
          (split-window-vertically)
        (split-window-horizontally))
      (other-window 1)
      (switch-to-buffer other-buf)
      (other-window -1)))
  (global-set-key [f3] 'window-toggle-division)
#+END_SRC

* windownの動的リサイズ
 http://d.hatena.ne.jp/mooz/20100119/p1

#+BEGIN_SRC emacs-lisp
  (defun window-resizer ()
    "Control window size and position."
    (interactive)
    (let ((window-obj (selected-window))
          (current-width (window-width))
          (current-height (window-height))
          (dx (if (= (nth 0 (window-edges)) 0) 1
                -1))
          (dy (if (= (nth 1 (window-edges)) 0) 1
                -1))
          c)
      (catch 'end-flag
        (while t
          (message "size[%dx%d]"
                   (window-width) (window-height))
          (setq c (read-char))
          (cond ((= c ?l)
                 (enlarge-window-horizontally dx))
                ((= c ?h)
                 (shrink-window-horizontally dx))
                ((= c ?j)
                 (enlarge-window dy))
                ((= c ?k)
                 (shrink-window dy))
                (t
                 (message "Quit")
                 (throw 'end-flag t)))))))
   
  (define-key global-map "\C-q" (make-sparse-keymap))
   
  (global-set-key "\C-q\C-r" 'window-resizer)
   
  (global-set-key "\C-ql" 'windmove-right)
  (global-set-key "\C-qh" 'windmove-left)
  (global-set-key "\C-qj" 'windmove-down)
  (global-set-key "\C-qk" 'windmove-up)
#+END_SRC

* 番号指定でwindow切り替え switch-window

https://github.com/dimitri/switch-window

あまり好きではないので、一旦封印する

#+begin_src emacs-lisp
;; (require 'switch-window)
;; (global-set-key (kbd "C-x o") 'switch-window)
#+end_src

