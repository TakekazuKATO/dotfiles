* Display
  表示関連.

* バッファ
  バッファの移動系は text.org に.

** 定義
   テキストを編集するための器.

** 画像ファイルを表示する
#+begin_src emacs-lisp
(if window-system (auto-image-file-mode t) (auto-image-file-mode nil))
#+end_src

** バッファ再読み込み
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

** Popwin
   バッファのポップアップ表示. Popup Manager for Emacs.
   - [[https://github.com/m2ym/popwin-el][m2ym/popwin-el]]

 #+begin_src emacs-lisp
(use-package popwin
  :config
  (setq helm-samewindow nil)
  (setq display-buffer-function 'popwin:display-buffer)
  (setq popwin:special-display-config '(("*compilation*" :noselect t)
					;;("helm" :regexp t :height 0.4)
					("anything" :regexp t :height 0.4)
					))
  
  (push '("^\*helm .+\*$" :regexp t) popwin:special-display-config)
  (push '("*rspec-compilation*" :regexp t) popwin:special-display-config)
  (push '("*Oz Compiler*" :regexp t) popwin:special-display-config)
  (push '("^CAPTURE-.+\*.org$" :regexp t) popwin:special-display-config)
  (push '("*twittering-edit*" :regexp t) popwin:special-display-config)
  (push '("R data view" :regexp t) popwin:special-display-config)
  ;; (push '("^\*terminal<.+" :regexp t) popwin:special-display-config)
  (push '("*Google Translate*") popwin:special-display-config)
  (push "*Shell Command Output*" popwin:special-display-config) ;; M-!
  (push '(compilation-mode :noselect t) popwin:special-display-config) ;; M-x compile
  
;;  (push '("^\*Org .+\*$" :regexp t) popwin:special-display-config)
  (push '("^\*Org Agenda*" :regexp t) popwin:special-display-config)
  
  ;; M-x dired-jump-other-window
  (push '(dired-mode :position bottom) popwin:special-display-config)
  
  ;; Direx 使わなくなったので..
  ;; (push '(direx:direx-mode :position left :width 40 :dedicated t)
  
  ;; undo-tree
  (push '(" *undo-tree*" :width 0.3 :position right) popwin:special-display-config)
  )
 #+end_src

** stripe-buffer
   しましま表示
   - https://github.com/sabof/stripe-buffer

#+begin_src emacs-lisp
;; windows だと気持ち悪い色になる
(use-package stripe-buffer
  :if linux-p
  :config
  (add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
  ;;(add-hook 'org-mode-hook 'turn-on-stripe-table-mode)
)
#+end_src

** savehist
   minibuffer の履歴保存

#+begin_src emacs-lisp
(use-package savehist
  :config
  (savehist-mode t)
  (setq savehist-additional-variables 
  '(kill-ring search-ring regexp-search-ring)))
#+end_src

* モードライン
** モードラインに時間を表示する
#+begin_src emacs-lisp
(display-time)
(setq display-time-day-and-date t)
#+end_src

** 現在の関数名をモードラインに表示
#+begin_src emacs-lisp
(which-function-mode 1)
#+end_src

** 行番号の表示
   特定の major-mode のときは抑止
   - https://github.com/Khady/emacs.d/blob/master/setup-linum.el

#+begin_src emacs-lisp
(use-package setup-linum
  :init
  ;; daemon 起動中に linum-mode を有効にすると落ちる.
  (add-hook 'after-init-hook 'global-linum-mode t)
  :config
  ;; linum を利用しないメジャーモードを列挙
  (setq linum-disabled-modes-list
 	'(eshell-mode wl-summary-mode
 	  compilation-mode text-mode
 	  dired-mode doc-view-mode image-mode)))
#+end_src

* ファイル
** 定義
   名前がつけられたバッファ.

** saveplace
   一度訪れたファイルは次開くときはそこから開く.

#+begin_src emacs-lisp
(use-package saveplace
  :init
  (setq-default save-place t))
#+end_src

** recentf
    最近使ったファイルをメニューに表示たくさん履歴を残したい.

  #+begin_src emacs-lisp
(use-package recentf
  :bind ("C-c F" . recentf-open-files)
  :init
  (recentf-mode)
  :config
  (setq recentf-max-saved-items 2000)
  (setq recentf-auto-cleanup 10)
  (setq recentf-exclude '("/TAGS$" "/var/tmp/" ".recentf")))
 #+end_src

** recentf-ext
   recentf の拡張.
   - [[http://d.hatena.ne.jp/rubikitch/20091224/recentf][人は俺を「 recentf マスター」と呼ぶ]]
   - [[http://qiita.com/catatsuy/items/f9fad90fa1352a4d3161][Emacs を快適に使うファイル周りの設定紹介 - Qiita]]
   - [[http://qiita.com/icb54615/items/ed8ff0ac0443e0a9c7da][Emacs - 最近使ったファイル一覧を表示 - Qiita]]
   
#+begin_src emacs-lisp
(use-package recentf-ext)
#+end_src

** open-junk-file
   使い捨てファイルを開く.

#+begin_src emacs-lisp
(use-package open-junk-file
  :commands open-junk-file
  :init
  (define-key goto-map [?j] 'open-junk-file)
  :config
  (setq open-junk-file-format "~/tmp/%Y-%m-%d-%H%M%S."))
#+end_src

** uniquify
   同名ファイルの区別

#+begin_src emacs-lisp
 (use-package uniquify
 :config
 (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src

** file 名の補間で大文字小文字を区別しない
#+begin_src emacs-lisp
(setq completion-ignore-case t)
#+end_src

* ウィンドウ
** 定義
   バッファの表示領域.

** 左右のバッファを F2 で交換する
  - http://d.hatena.ne.jp/supermassiveblackhole/20100625/1277436024
  
#+begin_src emacs-lisp
(defun swap-screen ()
  "Swap two screen,leaving cursor at current window."
  (interactive)
  (let ((thiswin (selected-window))
	(nextbuf (window-buffer (next-window))))
    (set-window-buffer (next-window) (window-buffer))
    (set-window-buffer thiswin nextbuf)))

(defun swap-screen-with-cursor ()
  "Swap two screen,with cursor in same buffer."
  (interactive)
  (let ((thiswin (selected-window))
	(thisbuf (window-buffer)))
    (other-window 1)
    (set-window-buffer thiswin (window-buffer))
    (set-window-buffer (selected-window) thisbuf)))

(global-set-key [f2] 'swap-screen)
(global-set-key [S-f2] 'swap-screen-with-cursor)
#+end_src

** 縦横のバッファを F3 で交換する
   - http://masutaka.net/chalow/2011-05-19-1.html

#+BEGIN_SRC emacs-lisp
  (defun window-toggle-division ()
    "ウィンドウ 2 分割時に, 縦分割<->横分割"
    (interactive)
    (unless (= (count-windows 1) 2)
      (error "ウィンドウが 2 分割されていません. "))
    (let ((before-height)
          (other-buf (window-buffer (next-window))))
      (setq before-height (window-height))
      (delete-other-windows)
      (if (= (window-height) before-height)
          (split-window-vertically)
        (split-window-horizontally))
      (other-window 1)
      (switch-to-buffer other-buf)
      (other-window -1)))
  (global-set-key [f3] 'window-toggle-division)
#+END_SRC

** windown の動的リサイズ
   - http://d.hatena.ne.jp/mooz/20100119/p1

#+BEGIN_SRC emacs-lisp
  (defun window-resizer ()
    "Control window size and position."
    (interactive)
    (let ((window-obj (selected-window))
          (current-width (window-width))
          (current-height (window-height))
          (dx (if (= (nth 0 (window-edges)) 0) 1
                -1))
          (dy (if (= (nth 1 (window-edges)) 0) 1
                -1))
          c)
      (catch 'end-flag
        (while t
          (message "size[%dx%d]"
                   (window-width) (window-height))
          (setq c (read-char))
          (cond ((= c ?l)
                 (enlarge-window-horizontally dx))
                ((= c ?h)
                 (shrink-window-horizontally dx))
                ((= c ?j)
                 (enlarge-window dy))
                ((= c ?k)
                 (shrink-window dy))
                (t
                 (message "Quit")
                 (throw 'end-flag t)))))))
   
  (define-key global-map "\C-q" (make-sparse-keymap))
   
  (global-set-key "\C-q\C-r" 'window-resizer)
   
  (global-set-key "\C-ql" 'windmove-right)
  (global-set-key "\C-qh" 'windmove-left)
  (global-set-key "\C-qj" 'windmove-down)
  (global-set-key "\C-qk" 'windmove-up)
#+END_SRC

** e2wm
   Emacs ようの window manager.

   - [[https://github.com/kiwanami/emacs-window-manager][kiwanami/emacs-window-manager]]
   - [[http://d.hatena.ne.jp/kiwanami/20100528/1275038929][広くなった画面を有効利用できる, Emacs 内 Window 管理ツール e2wm.el を作ってみた]]

   array を利用すると, windows のようなタブで画面切り替え.

   - [[http://aki2o.hatenablog.jp/entry/2014/08/19/Emacs%E3%81%A7%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E5%86%85%E5%AE%B9%E3%82%92%E7%9B%AE%E8%A6%96%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E7%9B%AE%E7%9A%84%E3%81%AE%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%81%AB][Emacs でバッファ内容を目視確認して目的のバッファに素早く切り替える - 死ぬまでの暇潰し]]

    #+begin_src emacs-lisp
 (use-package e2wm
  :defer t
  :bind ("M-+" . e2wm:start-management)
  )
#+end_src

* フレーム
** 定義
   ウィンドウシステムにおけるウィンドウを Emacs では, フレームと呼ぶ.
   1 つのフレームは, 複数のウィンドウからなる.

** ツールバーを消す
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** emacs -nw で起動した時にメニューバーを消す
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

** スクロールバーを消す
#+begin_src emacs-lisp
(set-scroll-bar-mode nil)
(when linux-p
  ;; 家の archlinux 環境たけ有効にしておく
  (horizontal-scroll-bar-mode -1)
  )
#+end_src

** 最大化表示
   Emacs は世界を統べるものなので, 最大化してもまったく問題ない.
#+begin_src emacs-lisp
;; スクリーンの最大化
;;(set-frame-parameter nil 'fullscreen 'maximized)

;; フルスクリーン
;; (set-frame-parameter nil 'fullscreen 'fullboth)
#+end_src

* ハイライト
** 現在行をハイライト
#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

** 80 行目をハイライト
p   なんかうまくうごいていない.

#+begin_src emacs-lisp
;; (use-package highlight-80+)
;; (add-hook 'text-mode-hook (lambda () (interactive) (highlight-80+-mode 1)))
#+end_src

** Set Mark をハイライト
  - [[http://www.emacswiki.org/emacs/VisibleMark][EmacsWiki: Visible Mark]]

** bm: Bookmarks をハイライト
  - [[https://github.com/joodland/bm][joodland/bm]]

#+begin_src emacs-lisp
(use-package bm
  :defer t
  :bind   (("<C-f5>" . bm-toggle)
	   ("<f5>"  . bm-next)
	   ("<S-f5>" . bm-previous))
  )
#+end_src

** TO-DO をハイライト
   - [[http://stackoverflow.com/questions/8551320/highlighting-todos-in-all-programming-modes][emacs - Highlighting TODOs in all programming modes - Stack Overflow]]

*** fic-ext-mode   
    - http://www.emacswiki.org/emacs/fic-ext-mode.el

#+begin_src emacs-lisp
(use-package fic-ext-mode
  :config
  (defun add-something-to-mode-hooks (mode-list something)
    "helper function to add a callback to multiple hooks"
    (dolist (mode mode-list)
      (add-hook (intern (concat (symbol-name mode) "-mode-hook")) something)))
  
  (add-something-to-mode-hooks '(c++ emacs-lisp ruby text scala) 'fic-ext-mode))
#+end_src

** highlight-symbol/auto-highlight-symbol
   シンボルをハイライト
   - http://shibayu36.hatenablog.com/entry/2013/12/30/190354

   -> hl-anything に置き換えるのでお役ご免...

#+begin_src emacs-lisp
(use-package auto-highlight-symbol-config :disabled t)
(use-package highlight-symbol
  :disabled t
  :bind (("<f4>" . highlight-symbol-at-point)
	 ("C-<f4>" . highlight-symbol-next)
	 ("S-<f4>" . highlight-symbol-prev)
	 ("ESC <f4>" . highlight-symbol-remove-all))

  :config
  (setq highlight-symbol-colors '("DarkOrange" "DodgerBlue1" "DeepPink1")))
#+end_src

** hl-anything
   - https://github.com/boyw165/hl-anything
   - [[http://rubikitch.com/2014/12/28/hl-anything/][シンボル・ region を「永続的に」色付けする! 全バッファ対応 ]]

   永続的に, ハイライトを保持することが可能になる.
   - M-x hl-save-highlights
   - M-x hl-restore-highlights

   マウスで選択しても, シンボルも, 色付けできる.
   色付けするたびにカラフルに色が変わる.

#+begin_src emacs-lisp
(use-package hl-anything
  :bind  (("<f4>" . hl-highlight-thingatpt-local)
	  ("ESC <f4>" . hl-unhighlight-all-local))
  :config
  (hl-highlight-mode 1)
  )
#+end_src

** 対応する括弧を光らせる
#+begin_src emacs-lisp
;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)
#+end_src

** Tips
   とにかく色をつける
#+begin_src emacs-lisp
(global-font-lock-mode 1)
#+end_src

Add proper word wrapping
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

* フォント
** Ricty
   http://d.hatena.ne.jp/kitokitoki/20110502/p2

   no window モードは X の設定にしたがっているので, 
   .Xdefaults の設定を調整する必要あり.

#+begin_src emacs-lisp
(when linux-p
  (add-to-list 'default-frame-alist '(font . "ricty-13"))
)
#+end_src

** サイズ変更
   text-scale-adjust という関数で変更する.(C-x C-0)
   
  - 文字の大きさを一時的に変更するには text-scale-adjust
  - デフォルトでは C-x C-0
    * + 連打→拡大
    * - 連打→縮小
    * 0 → 元に戻す

  from: [[http://qiita.com/tnoda_/items/ee7804a34e75f4c35d70][Emacs で文字の大きさを一時的に変更する C-x C-0 - Qiita]]
