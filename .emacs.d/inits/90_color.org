* Color
  デザイン・色関係.

* ハイライト
** 現在行をハイライト
#+begin_src emacs-lisp
;;(unless (eq window-system nil)
  (global-hl-line-mode 1)
#+end_src

** 80 行目をハイライト
   なんかうまくうごいていない.

#+begin_src emacs-lisp
;; (use-package highlight-80+)
;; (add-hook 'text-mode-hook (lambda () (interactive) (highlight-80+-mode 1)))
#+end_src

** Set Mark をハイライト
  - [[http://www.emacswiki.org/emacs/VisibleMark][EmacsWiki: Visible Mark]]

** bm: Bookmarks をハイライト
  - [[https://github.com/joodland/bm][joodland/bm]]

#+begin_src emacs-lisp
(use-package bm
  :defer t
  :bind   (("<C-f5>" . bm-toggle)
	   ("<f5>"  . bm-next)
	   ("<S-f5>" . bm-previous)))
#+end_src

** TO-DO をハイライト
   - [[http://stackoverflow.com/questions/8551320/highlighting-todos-in-all-programming-modes][emacs - Highlighting TODOs in all programming modes - Stack Overflow]]

*** fic-ext-mode   
    - http://www.emacswiki.org/emacs/fic-ext-mode.el

#+begin_src emacs-lisp
(use-package fic-ext-mode
  :config
  (defun add-something-to-mode-hooks (mode-list something)
    "helper function to add a callback to multiple hooks"
    (dolist (mode mode-list)
      (add-hook (intern (concat (symbol-name mode) "-mode-hook")) something)))
  
  (add-something-to-mode-hooks '(c++ emacs-lisp ruby text scala) 'fic-ext-mode))
#+end_src

** highlight-symbol/auto-highlight-symbol
   シンボルをハイライト
   - http://shibayu36.hatenablog.com/entry/2013/12/30/190354

   -> hl-anything に置き換えるのでお役ご免...

#+begin_src emacs-lisp
(use-package auto-highlight-symbol-config)
(use-package highlight-symbol
  :disabled t
  :bind (("<f4>" . highlight-symbol-at-point)
	 ("C-<f4>" . highlight-symbol-next)
	 ("S-<f4>" . highlight-symbol-prev)
	 ("ESC <f4>" . highlight-symbol-remove-all))

  :config
  (setq highlight-symbol-colors '("DarkOrange" "DodgerBlue1" "DeepPink1")))
#+end_src

** hl-anything
   - https://github.com/boyw165/hl-anything
   - [[http://rubikitch.com/2014/12/28/hl-anything/][シンボル・ region を「永続的に」色付けする! 全バッファ対応 ]]

   永続的に, ハイライトを保持することが可能になる.
   - M-x hl-save-highlights
   - M-x hl-restore-highlights

   マウスで選択しても, シンボルも, 色付けできる.
   色付けするたびにカラフルに色が変わる.

#+begin_src emacs-lisp
(use-package hl-anything
  :bind  (("<f4>" . hl-highlight-thingatpt-local)
	  ("ESC <f4>" . hl-unhighlight-all-local))
  :config
  (hl-highlight-mode 1)
  )
#+end_src

** 対応する括弧を光らせる
#+begin_src emacs-lisp
;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)
#+end_src

** Tips
   とにかく色をつける
#+begin_src emacs-lisp
(global-font-lock-mode 1)
#+end_src

Add proper word wrapping
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

* フォント
** お試し
  フォントを試したいときは, 以下の S 式でいろいろ評価してみる.

#+begin_src text
(set-frame-font "noto-12")
#+end_src

   - [[http://d.hatena.ne.jp/kitokitoki/20110502/p2][emacs での Ricty の導入手順 - わからん]]

     どのフォントが利用できるかは, helm-select-xfont で調べる.

** Ricty
  - http://d.hatena.ne.jp/kitokitoki/20110502/p2
  - https://github.com/yascentur/Ricty

 Ricty Diminished ならば, 生成する必要なし.
  - https://github.com/yascentur/RictyDiminished

   no window モードは X の設定にしたがっているので, 
   .Xdefaults の設定を調整する必要あり.

#+begin_src emacs-lisp
(when linux-p
  (add-to-list 'default-frame-alist '(font . "Ricty-13.5")))
(when windows-p
  (add-to-list 'default-frame-alist '(font . "Ricty Diminished-13.5")))
#+end_src

** Noto 
   google と adobe が開発したフォント
   - [[http://ja.wikipedia.org/wiki/Noto][Noto - Wikipedia]]
   - [[https://www.google.com/get/noto/][Google Noto Fonts]]

   #+begin_src emacs-lisp
;; (when windows-p
;;  (set-frame-font "Noto Sans CJK JP Light-12"))
;; (set-frame-font "Noto Sans CJK JP-13")
#+end_src

** サイズ変更
   text-scale-adjust という関数で変更する.(C-x C-0)
   
  - 文字の大きさを一時的に変更するには text-scale-adjust
  - デフォルトでは C-x C-0
    * + 連打→拡大
    * - 連打→縮小
    * 0 元に戻す

  from: [[http://qiita.com/tnoda_/items/ee7804a34e75f4c35d70][Emacs で文字の大きさを一時的に変更する C-x C-0 - Qiita]]

** 行間を開けてやや見やすくする

#+begin_src emacs-lisp
(setq-default line-spacing 0.1)
#+end_src

** 全角半角で 文字が崩れる
  - [[http://stickydiary.blog88.fc2.com/blog-entry-107.html][Emacs で等幅フォントの半角文字・全角文字の横幅比 1:2 を必ず達成するフォント設定 - Sticky Diary]]

* General

** Comment
#+begin_src emacs-lisp
(custom-set-faces
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "gray80"))))
  '(font-lock-comment-face ((t (:foreground "gray80")))))
#+end_src

** 透過度
   alpha 変数に設定する. (set-frame-parameter nil 'alpha 80)

   今のテーマだと動かない. .
   - [[http://qiita.com/marcy_o/items/ba0d018a03381a964f24][cocoa emacs の透明度を変更する elisp - Qiita]]

#+begin_src emacs-lisp
(defun set-alpha (alpha-num)
  "set frame parameter 'alpha"
  (interactive "nAlpha: ")
  (set-frame-parameter nil 'alpha (cons alpha-num '(90))))
#+end_src

* Emacs Color Theme
  A collection of custom themes for Emacs.
  - https://github.com/owainlewis/emacs-color-themes

  会社だと, エラーするかもしれないため, マニュアルで入れることにした.

#+begin_src sh
$ git clone https://github.com/owainlewis/emacs-color-themes.git && cd emacs-color-themes && ./install.sh
#+end_src

  デフォルトで load される ?? 

#+begin_src emacs-lisp
(use-package emacs-color-themes :disabled t)
#+end_src

** Molokai
   Install  : https://raw2.github.com/hbin/molokai-theme/master/molokai-theme-kit.el
   現在は, fork してカスタマイズしたものをりようしている.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/el-get/repo/molokai-theme")
(use-package molokai-theme-kit
  :disabled t
  :config
  (setq molokai-theme-kit t)
  ;; window-system が判定できない.
  (load-theme 'molokai t))
#+end_src

   自分のテーマにも, 以下のような設定で org-mode 対応できるらしい??
   - [[http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html][Pretty fontification of source code blocks]]
   -> mmm-mode で代用する.

*** 正式版

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/el-get/repo/monokai-emacs")
(use-package monokai-theme
  :init
  (load-theme 'monokai t))
#+end_src

** not used
*** tangotango
    org-mode に対応してるダークテーマ.
    - https://github.com/juba/color-theme-tangotango

    #+begin_src emacs-lisp
;;   (add-to-list 'custom-theme-load-path "~/.emacs.d/el-get/repo/color-theme-tangotango")
;;   (load-theme 'tangotango t)
    #+end_src

    tangotango と molokai をあわせると意外にいいかも??

*** Leuven-theme
    Emacs 24.4 に標準で入っているテーマ. 
    - [[https://github.com/fniessen/emacs-leuven-theme][fniessen/emacs-leuven-theme]]

    #+begin_src emacs-lisp
;;   (load-theme 'leuven t)
    #+end_src
*** color-theme-molokai
    別の molokai
    - https://github.com/alloy-d/color-theme-molokai

 #+begin_src emacs-lisp
;; (add-to-list 'custom-theme-load-path "~/.emacs.d/el-get/repo/color-theme-molokai")
;; (load-theme 'molokai t)
 #+end_src

* rainbow-mode
  数字表記に色つけしてくれる 

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init
  (add-hook 'css-mode-hook 'rainbow-mode)
  (add-hook 'html-mode-hook 'rainbow-mode)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-mode)
  )
#+end_src

* rainbow-delimiters
   *注意* テーマ読み込みのあとに配置すること.

   かっこの深さに応じて色付けしてくれる.
   - https://github.com/Fanael/rainbow-delimiters

   かっこの強調をどきつくする. これはいいなぁ.
   - [[http://d.hatena.ne.jp/murase_syuka/20140815/1408061850][rainbow-delimiters.el の括弧色付けをデフォルトより強調する方法 - 会者定離で以降]]
   - [[http://yoo2080.wordpress.com/2013/12/21/small-rainbow-delimiters-tutorial/][Small rainbow-delimiters tutorial | Yoo Box]]

   #+begin_src emacs-lisp
(use-package rainbow-delimiters
  :init
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'scheme-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)
  :config
  ;; these setting should be placed after load-theme
  ;; using stronger colors
  (require 'cl-lib)
  (require 'color)

  ;; 関数にしないとうまくいかない...手動で有効に
  (defun rainbow-delimiters-using-stronger-colors ()
    (interactive)
    (cl-loop
     for index from 1 to rainbow-delimiters-max-face-count
     do
     (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
       (cl-callf color-saturate-name (face-foreground face) 100))))

  ;; making unmatched parens stand out more
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
		      :foreground 'unspecified
		      :inherit 'error
		      :strike-through t))
  #+end_src

* minimap
  Sublime Text のようなミニマップ. ちょっと重い.

#+begin_src emacs-lisp
(use-package minimap
  :disabled t
  :config
  (setq minimap-window-location 'right)
  (setq minimap-minimum-width 15)
  (global-set-key (kbd "C-c n") 'minimap-mode))

  ;; (when (display-graphic-p)
  ;;   (use-package minimap)
  ;;   ;; enable minimap
  ;;   (global-set-key (kbd "C-c n") 'minimap-toggle)))
#+end_src

* pomodoro
  ここでやらないと, なぜかモードラインで表示されない.
  
#+begin_src emacs-lisp
;;(setq-default mode-line-format
;;   (cons '(:eval (pomodoro:propertize-mode-line))
;;    mode-line-format))
#+end_src

* ERC
  ダークからにデフォルトの色は合わない.
  - https://github.com/emacs-jp/replace-colorthemes/blob/master/blue-erc-theme.el
  - https://github.com/emacs-jp/replace-colorthemes/blob/master/dark-erc-theme.el

  #+begin_src emacs-lisp
(when windows-p 
 (add-to-list 'custom-theme-load-path "~/.emacs.d/elisp")
 (load-theme 'blue-erc t t)
 (enable-theme 'blue-erc))
 ;; (load-theme 'dark-erc t t)
 ;; (enable-theme 'dark-erc))
 #+end_src

* emacs powerline
  2 つ種類がある.
  - https://github.com/jonathanchu/emacs-powerline
  - https://github.com/milkypostman/powerline (使用中)

  なぜか use-package では有効にならないな.

#+begin_src emacs-lisp
(use-package powerline
  :init
  (powerline-default-theme)
  :config
  ;; windows だと色が変.
  (when windows-p
    (custom-set-faces
     '(mode-line ((t (:background "#3E3D31" :distant-foreground "black" :foreground "#F8F8F2" :box (:line-width 1 :color "gray20" :style unspecified)))))
     '(mode-line-buffer-id ((t (:foreground "#F92672" :weight bold)))))))
#+end_src
