* Minor Language
  マイナーランゲージのマイナーモード

* Oz
  multi-paradium language

  導入方法:
  - http://www.eecs.ucf.edu/~leavens/ComS541Fall06/running_oz.shtml
    
  文法:
  - [[https://mozart.github.io/mozart-v1/doc-1.4.0/base/index.html][The Oz Base Environment]]
    
#+begin_src emacs-lisp 
;;; Oz program mode with Mozart/Oz.
;;; You have to arrange for the Oz-related emacs lisp (.el) files
;;; to be in emacs's load-path, for its bin directory to be in the PATH,
;;; and for the OZHOME environment variable to be set properly.

;; ruby 実行時に warning がでるので, 一旦封印
;; (when linux-p
;; (or (getenv "OZHOME")
;;     (setenv "OZHOME" 
;;             "/mnt/win/opt/mozart"))   ; or wherever Mozart is installed
;; (setenv "PATH" (concat (getenv "OZHOME") "/bin:" (getenv "PATH")))
;; )

(autoload 'run-oz "oz" "" t)
(autoload 'oz-mode "oz" "" t)
(autoload 'oz-gump-mode "oz" "" t)
(autoload 'oz-new-buffer "oz" "" t)

(add-to-list 'auto-mode-alist '("\\.oz$'" . oz-mode))
(add-to-list 'auto-mode-alist '("\\.ozg$'" . oz-gump-mode))

(add-hook 'oz-mode-hook
	  (lambda ()
	    (define-key oz-mode-map "\C-c\C-b" 'oz-feed-buffer)
	    (define-key oz-mode-map "\C-c\C-l" 'oz-feed-line)
	    (define-key oz-mode-map "\C-c\C-r" 'oz-feed-region)
	    ))

;; indent を 3 から 2 へ変更
(setq oz-indent-chars 2)

(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'oz-mode))
#+end_src

* Cool

#+begin_src emacs-lisp 
(autoload 'cool-mode "cool-mode" "Major mode for editing COOL programs" t)
(setq auto-mode-alist
            (append '(("\\.cl\\'" . cool-mode)) auto-mode-alist))

#+end_src

* VBA 

#+begin_src emacs-lisp 
(when windows-p
(autoload 'vbasense "vbasense" "Visual Basic Mode" t)
(add-to-list 'auto-mode-alist '("\\.\\(vbs\\|vb\\|wsf\\|frm\\|bas\\|cls\\)$" .
				vbasense))
(setq vbasense-popup-help-key "C-:")
(setq vbasense-jump-to-definition-key "C->")

;;(customize-group "vbasense")
;; use recommmended setting
(vbasense-config-default)

;; (custom-set-variables
;; '(vbasense-tli-files "C:/Program Files/Microsoft Office/OFFICE11/EXCEL.EXE"))
;; "c:/Program Files/Common Files/Microsoft Shared/VBA/VBA6/VBE6.DLL"
;; "c:/Program Files/Common Files/Microsoft Shared/VBA/VBA6/VBE6EXT.OLB"
;; "c:/Program Files/Common Files/Microsoft Shared/OFFICE11/MSO.DLL"
;; "c:/WINDOWS/system32/stdole2.tlb")
;; 	   )

;; visual-basic-mode
(autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic mode" t)
(add-to-list 'auto-mode-alist '("\\.\\(vbs\\|vb\\|wsf\\|frm\\|bas\\|cls\\)$" .
				visual-basic-mode))
)
#+end_src

* rst-mode
  Major mode for editing Restructured Text

#+begin_src emacs-lisp 

;;; RST モードを見やすくする.
(setq frame-background-mode 'dark)

(autoload 'rst "rst-mode" "Rst mode for Sphinx" t)
;;; *.rst, *.rest ファイルを rst-mode で Open
(setq auto-mode-alist
      (append '(("\\.rst$" . rst-mode)
		("\\.rest$" . rst-mode)
		) auto-mode-alist))

;; 全部スペースでインデントしましょう
;; (add-hook 'rst-mode-hook '(lambda () (setq indent-tabs-mode nil)))

#+end_src

* Markdown Mode
  Major mode for editing markdown
  - http://jblevins.org/projects/markdown-mode/markdown-mode.el

#+begin_src emacs-lisp 
(autoload
  'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
;; associate .md file to markdown-mode
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+end_src

* Plant UML Mode
  Major mode for editing PlantUML
#+begin_src emacs-lisp 
(autoload
  'plantuml-mode "plantuml-mode" "" t)
(add-to-list 'auto-mode-alist '("\\.puml$" . plantuml-mode))
(add-to-list 'auto-mode-alist '("\\.plantuml$" . plantuml-mode))
(setq plantuml-jar-path "/usr/local/bin/plantuml.jar")
#+end_src

* Scala
** scala-mode2

#+begin_src emacs-lisp 
;; Scala Mode 2
(use-package scala-mode2
  :config
;;(autoload 'scala-mode2 "scala-mode2" "A new scala-mode for emacs24" t)
(add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
(add-to-list 'auto-mode-alist '("\\.sbt$" . scala-mode))
)

#+end_src

** ensime
   ENhanced Scala Interaction Mode for Emacs.

#+begin_src emacs-lisp
;; ensine
(use-package ensime
  :config
;;(autoload 'ensime-scala-mode "ensime" "ENhanced Scala Interaction Mode for Emacs" t)
;; This step causes the ensime-mode to be started whenever
;; scala-mode is started for a buffer. You may have to customize this step
;; if you're not using the standard scala mode.
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
)
#+end_src

** sbt mode
    https://github.com/hvesalai/sbt-mode

#+begin_src emacs-lisp 
(use-package sbt-mode)

(add-hook 'sbt-mode-hook '(lambda ()
  ;; compilation-skip-threshold tells the compilation minor-mode
  ;; which type of compiler output can be skipped. 1 = skip info
  ;; 2 = skip info and warnings.
  (setq compilation-skip-threshold 1)

  ;; Bind C-a to 'comint-bol when in sbt-mode. This will move the
  ;; cursor to just after prompt.
  (local-set-key (kbd "C-a") 'comint-bol)

  ;; Bind M-RET to 'comint-accumulate. This will allow you to add
  ;; more than one line to scala console prompt before sending it
  ;; for interpretation. It will keep your command history cleaner.
  (local-set-key (kbd "M-RET") 'comint-accumulate)
))

(add-hook 'scala-mode-hook '(lambda ()
   ;; sbt-find-definitions is a command that tries to find (with grep)
   ;; the definition of the thing at point.
   (local-set-key (kbd "M-.") 'sbt-find-definitions)

   ;; use sbt-run-previous-command to re-compile your code after changes
   (local-set-key (kbd "C-x '") 'sbt-run-previous-command)
))
#+end_src

** scala-electric-mode
#+begin_src emacs-lisp
;; (use-package scala-mode-feature-electric)
;; (add-hook 'scala-mode-hook
;;      (lambda ()
;;        (scala-electric-mode)))
#+end_src

* conkeror
#+begin_src emacs-lisp
(autoload 'conkeror-minor-mode "conkeror-minor-mode")
#+end_src

* pukiwiki-mode
  pukiwiki-mode は minor-mode のみ使用する. 
  firefox や chrome の Edit 機能から, Emacs を起動する.

  - [[http://www.bookshelf.jp/pukiwiki/pukiwiki.php?%A5%A2%A5%A4%A5%C7%A5%A2%BD%B8%2Fpukiwiki-mode][アイデア集/pukiwiki-mode - Meadow memo]]
  - pukiwiki-mode.el  http://www.bookshelf.jp/elc/pukiwiki-mode.el
  - http.el http://tdiary.cvs.sourceforge.net/tdiary/contrib/util/tdiary-mode/
  - [[http://rmecab.jp/wiki/index.php?Wiki_pukiwiki-mode%A4%F2%C6%B3%C6%FE][Wiki_pukiwiki-mode を導入 - R と Linux と...]]

  pukiwiki-edit-mode で起動.

#+begin_src emacs-lisp
(autoload 'pukiwiki-mode "pukiwiki-mode" "Major mode for Pukiwiki" t)
#+end_src

* Assembly Language
  アセンブリ言語.
  - [[http://www.emacswiki.org/emacs/AssemblyProgramming][EmacsWiki: Assembly Programming]]

  asm-mode が標準添付.
  
* PHP
** php-mode
   - [[https://github.com/ejmr/php-mode][ejmr/php-mode]]

#+begin_src emacs-lisp
(autoload 'php-mode "php-mode" "Major mode for editing PHP programs" t)
(setq auto-mode-alist
            (append '(("\\.php\\'" . php-mode)) auto-mode-alist))
#+end_src

** mmm-mode
    php-mode と html-mode の同居.
    - [[http://bluestar.s32.xrea.com/text/php-mode.php][閑古鳥 -> 呟き -> emacs で PHP-mode と mmm-mode を使う]]

    Molokai テーマと相性が悪いので一旦消す.

#+begin_src emacs-lisp
; mmm-mode in php
;; (use-package mmm-mode)
;; (setq mmm-global-mode 'maybe)
;; (mmm-add-mode-ext-class nil "\\.php?\\'" 'html-php)
;; (mmm-add-classes
;;  '((html-php
;;     :submode php-mode
;;     :front "<\\?\\(php\\)?"
;;     :back "\\?>")))
;; (add-to-list 'auto-mode-alist '("\\.php?\\'" . xml-mode))
#+end_src

* R
** ESS
    Emacs を統計用 IDE にするツール. デファクトスタンダードと言える.

    - Official: [[http://ess.r-project.org/][ESS - Emacs Speaks Statistics]]
    - github: https://github.com/emacs-ess/ESS
    - メチャクチャ詳しい: [[http://www.okada.jp.org/RWiki/?ESS][ESS - RjpWiki]]
    - [[http://www.emacswiki.org/emacs/EmacsSpeaksStatistics][EmacsWiki: Emacs Speaks Statistics]]
    - [[http://d.hatena.ne.jp/a_bicky/20120415/1334490586][ESS で快適 R ライフ ~設定編~(2012 年度版) - あらびき日記]]
    - [[http://d.hatena.ne.jp/a_bicky/20120422/1335086814][ESS で快適 R ライフ ~操作編~(2012 年度版) - あらびき日記]]

   yaourt でインストール. yaourt -S emacs-ess.
   emacs 自体は独自のものを利用しているため,
   ビルドファイルで Emacs をコメントアウトした.

   起動は M-x R.

#+begin_src emacs-lisp
(use-package ess-site
  :load-path "/usr/share/emacs/site-lisp/ess"
  :if (locate-library "ess-site")
  :defer t
  :commands R-mode
  :init
  (setq auto-mode-alist
	(cons (cons "\\.[rR]$" 'R-mode) auto-mode-alist))
  
  :config
  ;; R 起動時にワーキングディレクトリを訊ねない
  (setq ess-ask-for-ess-directory nil)
#+end_src

** ESS Auto-complete
   R 言語の入力自動補完をするために, auto-complete を利用する.
   - [[http://www.emacswiki.org/emacs/ESSAuto-complete][EmacsWiki: ESSAuto-complete]]   

   ac-R.el はふるいっぽい.
   - [[http://www.emacswiki.org/emacs/AutoCompleteSources#toc2][EmacsWiki: Auto Complete Sources]]
   - [[http://stackoverflow.com/questions/4682459/emacs-autocomplete-mode-extension-for-ess-and-r][Emacs autocomplete-mode extension for ESS and R - Stack Overflow]]
   - [[http://kozo2.hatenablog.com/entry/2012/04/14/050121][ESS の auto-complete を試す - kozo2's blog]]

#+begin_src emacs-lisp
(setq ess-use-auto-complete t)
;; (setq ess-use-auto-complete 'script-only)
#+end_src

** ESS R Data View
   データの中身がみれる.
   - [[http://sheephead.homelinux.org/2013/05/10/7019/][R のデータビューワ ess-R-data-view.el というのを作りました - sheephead]]
   - https://github.com/myuhe/ess-R-data-view.el

#+begin_src emacs-lisp
;; (define-key ess-mode-map (kbd "C-c v") 'ess-R-dv-ctable)
(define-key ess-mode-map (kbd "C-c v") 'ess-R-dv-pprint)
#+end_src

   popwin と組み合わせると便利.
   
** ess-R-object-popup
  オブジェクトの中身をポップアップで表示.
  - https://github.com/myuhe/ess-R-object-popup.el
  - [[http://sheephead.homelinux.org/2010/03/02/1807/][popup.el を使って R オブジェクトの情報を popup する ess-R-object-popup.el - sheephead]]

#+begin_src emacs-lisp
  (use-package ess-R-object-popup
    :config
    (define-key ess-mode-map "\C-c\C-g" 'ess-R-object-popup)
    )
#+end_src

  gist 版は古いようだ.
  - https://gist.github.com/myuhe/318365

  no ESS process is associated with this buffer というエラー
  がでたら C-c C-s を叩く.
  - [[http://stackoverflow.com/questions/13930713/ess-rdired-i-get-this-error-no-ess-process-is-associated-with-this-buffer-now][r - ess-rdired: I get this error "no ESS process is associated with this buffer now" - Stack Overflow]]

** helm-R
  helm インタフェースで 関数のヘルプをひくことができる.
  - [[http://sheephead.homelinux.org/2010/05/24/1846/][R のための anything インターフェイス, anything-R.el を作った. - sheephead]]
  - https://github.com/emacs-helm/helm-R

#+begin_src emacs-lisp
  (use-package helm-R
    :config
    (define-key ess-mode-map "\C-ch" 'helm-for-R)
    (define-key inferior-ess-mode-map "\C-ch" 'helm-for-R)
    )
#+end_src

** org-babel-R
   org-mode で R を利用する.
   - [[http://d.hatena.ne.jp/tamura70/20100315/org][Emacs org-mode を使ってみる: (40) org-babel-R を使う 1/2 - 屯遁のパズルとプログラミングの日記]]
   - [[http://d.hatena.ne.jp/tamura70/20100316/org][Emacs org-mode を使ってみる: (41) org-babel-R を使う 2/2 - 屯遁のパズルとプログラミングの日記]]
   - [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html][R Source Code Blocks in Org Mode]]

   R 言語と org-mode で Reproducible Research を.
   - https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org

   設定は, org-mode.org に移動.

** End of ESS Config
#+begin_src emacs-lisp
)
#+end_src
