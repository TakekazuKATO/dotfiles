* ターミナル
  主にターミナル操作に関する機能.
  - ファイラ
  - シェル
  - ウィンドウマネージャー

* Shell
  いろいろシェルはあるのだけれども,eshell ひとつに絞ってしまおう.

** eshell
   - [[http://www.bookshelf.jp/pukiwiki/pukiwiki.php?Eshell%A4%F2%BB%C8%A4%A4%A4%B3%A4%CA%A4%B9][Eshell を使いこなす - Meadow memo]]
   - [[http://qiita.com/fnobi/items/8906c8e7759751d32b6b][terminal を棄てて Emacs と心中するための設定 - Qiita]]

   TODO あとで試す
   - [[http://d.hatena.ne.jp/syohex/20130127/1359269462][簡易 eshell-pop, cde, cdp - Life is very short]]

   #+begin_src emacs-lisp
;; shell のキーバインド
(global-set-key (kbd "C-c t") 'eshell)

;; 確認なしでヒストリ保存
(setq eshell-ask-to-save-history (quote always))
 ;; 補完時にサイクルする
(setq eshell-cmpl-cycle-completions nil)
;; 補完時に大文字小文字を区別しない
(setq eshell-cmpl-ignore-case t)

(setq eshell-save-history-on-exit t)
(setq eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

;;補完候補がこの数値以下だとサイクルせずに候補表示
;; (setq eshell-cmpl-cycle-cutoff-length 5)

;; 履歴で重複を無視する
(setq eshell-hist-ignoredups t)

;; これで正規表現がつかえるようになる??
(setq eshell-prompt-regexp "^[^#$]*[$#] ")

;; windows 環境だと, shift-jis にしよう
(when windows-p
  (add-hook
   'eshell-mode-hook
   '(lambda ()
      (set-buffer-process-coding-system 'sjis 'sjis))))

(setq eshell-prompt-function
      (lambda ()
        (concat "[tsu-nera"
                (eshell/pwd)
                (if (= (user-uid) 0) "]\n# " "]\n$ ")
                )))

;; eshell の alias 設定
;; http://www.emacswiki.org/emacs/EshellAlias
(setq eshell-command-aliases-list
      (append
       (list
        (list "ll" "ls -ltr")
        (list "la" "ls -a")
        (list "o" "xdg-open")
	(list "emacs" "find-file $1")
	(list "m" "find-file $1")
	(list "mc" "find-file $1")	
        (list "less" "eshell/less $1")
        (list "l" "eshell/less $1")		
        (list "forced_git_local_destroy" "git fetch origin;git reset --hard origin/master")
       )))
;;       eshell-command-aliases-list))
#+end_src

*** eshell-utils
    関数は別ファイルにわけてバイトコンパイルする.

#+begin_src emacs-lisp
(use-package eshell-utils
  :bind (;; バッファと eshell を toggle
         ("<C-M-return>" . eshell/toggle-buffer)
         ;; 別シェルを生成
         ("C-c C-x t" . eshell/make-new-eshell))
  :init
  (define-key dired-mode-map (kbd "`") 'eshell/toggle-buffer)
;;  (add-hook 'eshell-mode-hook
;;	    #'(lambda ()
;;		(define-key eshell-mode-map (kbd "C-l") 'eshell/clear)))
  )
#+end_src

*** eshell with helm
    - https://github.com/emacs-helm/helm/blob/master/helm-eshell.el
    - https://github.com/emacs-helm/helm/wiki#helmeshellcompletion
    - [[http://nishikawasasaki.hatenablog.com/entry/2012/09/12/233116][helm で eshell が便利 - あじーん-0.0.2-SNAPSHOT]]

    つかいかた
    - helm-esh-pcomplete helm で補完
      ほんとは tab に bind したいのだが, できない.
      http://www.gnu.org/software/emacs/manual/html_node/eshell/Completion.html
    - helm-eshell-history 履歴から入力

    #+begin_src emacs-lisp
(use-package helm-eshell
  :init
  (add-hook 'eshell-mode-hook
	    #'(lambda ()
		(define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)))
  
  (add-hook 'eshell-mode-hook
	    #'(lambda ()
                (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history))))

;; なぜか helm がじゃまをするな.
;; (add-to-list 'helm-completing-read-handlers-alist '(make-eshell . nil))
#+end_src

*** C-c をする
    eshell-kill-process が 

** exec-path-from-shell
   環境変数 PATH を引き継ぐ.
   - [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]]
   - http://sakito.jp/emacs/emacsshell.html#emacs

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
;;   (exec-path-from-shell-initialize))
#+end_src

** Emacs の起動フォルダを変更する.
   C-x C-f で開くディレクトリがデフォルト. 
   Windows だと, Emacs の起動ディレクトリになってしまう.
   
   default-directory を利用する

   #+begin_src emacs-lisp
(when windows-p
  (setq default-directory "C:/cygwin64/home/tsu-nera"))
#+end_src

   - [[http://stackoverflow.com/questions/60464/changing-the-default-folder-in-emacs][customization - Changing the default folder in Emacs - Stack Overflow]]
   - [[http://blog.cosscoss.biz/?p=477][Windows の Emacs (NTEmacs) で起動時ディレクトリを HOME ディレクトリに変更できない問題解決! | こすブ]]

* ファイラ
** dired

#+begin_src emacs-lisp
;; ディレクトリから表示
(setq ls-lisp-dirs-first t)
#+end_src

*** dired から open
#+begin_src emacs-lisp
(when linux-p
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (message "Opening %s..." file)
    (call-process "xdg-open" nil 0 nil file)
    (message "Opening %s done" file)))

(add-hook
   'dired-mode-hook
   (lambda ()
     (define-key dired-mode-map [f6] 'dired-open-file)))
)
#+end_src

*** dired から term へ
    - [[http://oremacs.com/2015/01/10/dired-ansi-term/][dired and ansi-term: BFF · (or emacs]]

    eshell-cmd がないと怒られる.

#+begin_src emacs-lisp
;; (define-key dired-mode-map (kbd "'")
;;   (lambda ()
;;     (interactive)
;;     (eshell-cmd
;;      (format "cd %s"
;;              (expand-file-name
;;               default-directory)))))
#+end_src

*** 移動のたびに新規バッファをつくらない
    移動のたびにバッファをつくらないためには, i や a でバッファを開く.
    - [[http://stackoverflow.com/questions/1839313/how-do-i-stop-emacs-dired-mode-from-opening-so-many-buffers][file management - How do I stop emacs dired mode from opening so
      many buffers? - Stack Overflow]]

    or 

#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

  - [[http://macemacsjp.sourceforge.jp/index.php?EmacsDired][EmacsDired - MacEmacs]]

** joseph-single-dired
   バッファを複数作成しない.
   - https://github.com/jixiuf/joseph-single-dired

#+begin_src emacs-lisp
(use-package joseph-single-dired)
#+end_src

** Tramp
   リモートサーバに Emacs から乗り込む.

   こんな感じで乗り込む.
   - C-x C-f /ssh:username@hostname#portno:/path/to/your/directory

   Tramp で save 時に毎回パスワードが聞かれるので, おまじない.
   - [[http://stackoverflow.com/questions/840279/passwords-in-emacs-tramp-mode-editing][ssh - Passwords in Emacs tramp mode editing - Stack Overflow]]

#+begin_src emacs-lisp
(setq password-cache-expiry nil)
#+end_src

** dired-x
   dired の拡張.

#+begin_src emacs-lisp
(use-package dired-x)
#+end_src
** direx
   popup dired
   - https://github.com/m2ym/direx-el
   - http://cx4a.blogspot.jp/2011/12/popwineldirexel.html

   使っていないのと, open-junk-file とキーがかぶったので封印.
#+begin_src emacs-lisp
;; (use-package direx)
#+end_src
** dired-filetype-face
   dired で file-type にしたがって色付けをする.
   - https://github.com/jixiuf/dired-filetype-face
   - http://www.emacswiki.org/emacs/DiredFileTypeFaces

#+begin_src emacs-lisp
(use-package dired-filetype-face)
#+end_src

* elscreen
  screen の Emacs バージョン. マルチプレクサ.
  - https://github.com/emacs-jp/elscreen
  - https://github.com/knu/elscreen

  オリジナルはメンテナンスされていないのかな?
  - http://www.morishima.net/~naoto/elscreen-ja/
  - http://nishikawasasaki.hatenablog.com/entry/20110313/1300031344

  #+begin_src emacs-lisp
(use-package elscreen
  :config
  (elscreen-start)
  
  ;; (setq elscreen-prefix-key "\C-o") ;; こっちだとダメだった
  (elscreen-set-prefix-key "\C-o")
  
  ;; タブの幅
  ;; (setq elscreen-display-tab 10)
  
  ; タブの左端の×を非表示
  (setq elscreen-tab-display-kill-screen nil)

  ;; <>を非表示
  (setq elscreen-tab-display-control nil)
  
  ;; emacsclient で新しいタブを開く
  ;; (use-package elscreen-server nil t)
  )
#+end_src

** colors

   #+begin_src emacs-lisp
(custom-set-faces
 '(elscreen-tab-control-face ((t (:background "#1c1c1c" :foreground "#9e9e9e" :underline t))))
 '(elscreen-tab-current-screen-face ((t (:background "#444444" :foreground "#9e9e9e"))))
 '(elscreen-tab-other-screen-face ((t (:background "#262626" :foreground "#9e9e9e" :underline t)))))

;; それっぽい色をつける?? つけてくれないよ.
;; (use-package elscreen-color-theme)
#+end_src

** screen の順番を手軽に変更
   ここから
   - [[http://qiita.com/fujimisakari/items/d7f1b904de11dcb018c3][Emacs - Elscreen に機能追加する - Qiita]]
   - https://gist.github.com/tsu-nera/44763febe82874785bf7

#+begin_src emacs-lisp
(use-package elscreen-interchange
  :bind (("M-<tab>" . elscreen-swap-next))
  ;; (("C-M-<right>" . elscreen-swap-next)
  ;; ("C-M-<left>" . elscreen-swap-previous))
  )
#+end_src

** TODO org-link を elscreen で開く
   いつか.
** elscreen-persistent
   - [[http://www.robario.com/2014/12/08][elscreen を永続化する elscreen-persist を書いた #Emacs @robario]]
   - [[http://rubikitch.com/2014/12/11/elscreen-persist/][elscreen のウィンドウ構成が windows.el ばりに再起動時に復元できるゾ! ]]

   revive というパッケージに依存している??

#+begin_src emacs-lisp
(use-package elscreen-persist
  :config
  ;; どうもこれを有効にすると Emacs が立ち上がらなくなるな...
  ;; (elscreen-persist-mode 1)
  )
#+end_src

*** 以下で操作
   - elscreen-persist-store
   - elscreen-persist-restore

** elscreen-wl
   waanderlust 用. syohex さんのやつ.
   - [[http://d.hatena.ne.jp/syohex/20130129/1359471993][elscreen-wl を fork しました Life is very short]]

   w をおすと別タブで開くので, ちょい便利.
   
 #+begin_src emacs-lisp
(when windows-p
  (use-package elscreen-wl))
#+end_src

 どこかで無限ループになっているな... 1 秒くらいここでかかっている.

#+begin_src text
Warning: Eager macro-expansion skipped due to cycle:
  … => (load "wl-e21.el") => (macroexpand-all …) => (macroexpand (eval-when-compile …)) => (load "wl-folder.el") => (macroexpand-all …) => (macroexpand (eval-when-compile …)) => (load "wl.el") => (load "wl-e21.el")
#+end_src

解決できないので封印.

** elscreen-dired
   dired で o をオスと別タブで開く.

   by wget https://raw.githubusercontent.com/knu/elscreen/master/elscreen-dired.el

#+begin_src emacs-lisp
(use-package elscreen-dired)
#+end_src

** Dired でカレントディレクトリを取得
  - [[http://d.hatena.ne.jp/syohex/20111026/1319606395][cde を改良 - Life is very short]]

#+begin_src emacs-lisp
(use-package cde)
#+end_src


* e2wm
  Emacs 用の window manager.

   - [[https://github.com/kiwanami/emacs-window-manager][kiwanami/emacs-window-manager]]
   - [[http://d.hatena.ne.jp/kiwanami/20100528/1275038929][広くなった画面を有効利用できる, Emacs 内 Window 管理ツール e2wm.el を作ってみた]]

   array を利用すると, windows のようなタブで画面切り替え.

   - [[http://aki2o.hatenablog.jp/entry/2014/08/19/Emacs%E3%81%A7%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E5%86%85%E5%AE%B9%E3%82%92%E7%9B%AE%E8%A6%96%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E7%9B%AE%E7%9A%84%E3%81%AE%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%81%AB][Emacs でバッファ内容を目視確認して目的のバッファに素早く切り替える - 死ぬまでの暇潰し]]

#+begin_src emacs-lisp
 (use-package e2wm
  :defer t
  :bind ("M-+" . e2wm:start-management))
#+end_src

