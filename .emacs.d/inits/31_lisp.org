* Lisp
  Lisper のための Emacs 設定.

  Emacs の原点, メッカみたいなページ.

* General
** smartparens
   smart + parens
   - https://github.com/Fuco1/smartparens
   - https://github.com/Fuco1/smartparens/wiki
   - [[http://kiririmode.hatenablog.jp/entry/20131231/p1][smartparens.el での括弧処理 - 理系学生日記]]

#+begin_src emacs-lisp
(use-package smartparens-config
  :config
  (smartparens-global-mode t)
#+end_src
 
*** default
  smartparens-config では以下が設定される.
  - https://github.com/Fuco1/smartparens/blob/master/smartparens-config.el

*** example
  覚えておきたいのは,
  - かっこで囲む xx sp-pair M-(
  - かっこを外す sp-unwrap C-M-s

  Example:
  - https://github.com/Fuco1/smartparens/wiki/Example-configuration

  TODO: かっこの色か気持ち悪いので, あとで編集する.
  - https://github.com/Fuco1/smartparens/wiki/User-interface

    #+begin_src emacs-lisp
(define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp) ;; forward
(define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp) ;; backward

(define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp) ;; next
(define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp) ;; previous

;; 一段中の/ 外のカッコに移動.
(define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp) ;; down
(define-key sp-keymap (kbd "C-M-u") 'sp-up-sexp) ;; up

;; (define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
;; (define-key sp-keymap (kbd "C-M-u") 'sp-backward-down-sexp)
;; (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)

;; かっこの先頭と末尾に移動.
(define-key sp-keymap (kbd "C-M-a") 'sp-beginning-of-sexp)
(define-key sp-keymap (kbd "C-M-e") 'sp-end-of-sexp)

;; カッコのなかを削除・コピー
(define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
(define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)

;; かっこを外す
(define-key sp-keymap (kbd "C-M-s") 'sp-unwrap-sexp)
;; (define-key sp-keymap (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

;; (define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
;; (define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp

;; picture-init と競合
;; (define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
;; (define-key sp-keymap (kbd "C-M-<right>") 'sp-backward-barf-sexp)

;; (define-key sp-keymap (kbd "M-D") 'sp-splice-sexp)
;; (define-key sp-keymap (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
;; (define-key sp-keymap (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
;; (define-key sp-keymap (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

;; multiple-cursor とバッティング
;; (define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
;; (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
;; (define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)

;; (define-key sp-keymap (kbd "M-F") 'sp-forward-symbol)
;; (define-key sp-keymap (kbd "M-B") 'sp-backward-symbol)

;; (define-key sp-keymap (kbd "H-t") 'sp-prefix-tag-object)
;; (define-key sp-keymap (kbd "H-p") 'sp-prefix-pair-object)
;; (define-key sp-keymap (kbd "H-s c") 'sp-convolute-sexp)
;; (define-key sp-keymap (kbd "H-s a") 'sp-absorb-sexp)
;; (define-key sp-keymap (kbd "H-s e") 'sp-emit-sexp)
;; (define-key sp-keymap (kbd "H-s p") 'sp-add-to-previous-sexp)
;; (define-key sp-keymap (kbd "H-s n") 'sp-add-to-next-sexp)
;; (define-key sp-keymap (kbd "H-s j") 'sp-join-sexp)
;; (define-key sp-keymap (kbd "H-s s") 'sp-split-sexp)

;;;;;;;;;;;;;;;;;;
;; pair management
(sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil))

;;; lisp modes
(sp-with-modes sp--lisp-modes
(sp-local-pair "(" nil :bind "M-("))

(sp-pair "(" ")" :wrap "M-(")
(sp-pair "(" ")" :wrap "M-(")
    #+end_src

*** end of config
    #+begin_src emacs-lisp
    #+end_src

    **) paredit
   Lisp コードで頻出する括弧類のバランスを維持することを目的としたもの.
   - [[http://www.daregada.sakuraweb.com/paredit_tutorial_ja.html][ParEdit チュートリアル]]
   - [[http://emacsrocks.com/e14.html][Emacs Rocks!]]
   - https://github.com/Fuco1/smartparens

   smartparens のほうが人気??
   - [[http://kiririmode.hatenablog.jp/entry/20131231/p1][smartparens.el での括弧処理 - 理系学生日記]]
   - https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens

** eldoc
   Lisp 系言語の関数で,
   カーソル位置の関数の仮引数をエコーエリアに表示してくれる.
   標準添付されている.


   eldoc-extention だと,関数のドキュメントまで出してくれる.
   - [[http://d.hatena.ne.jp/rubikitch/20090207/1233936430][Emacs 23 の eldoc.el と eldoc-extensions.el がいい感じ - rubikichi]]

#+begin_src emacs-lisp
;; ダウンロードしちゃったので一応.宣言.
(use-package eldoc-extension)
#+end_src

* Emacs Lisp
** ielm (Inferior Emacs Lisp Mode)
   Emacs のインタラクティブシェル. M-x ielm 
   - [[http://www.emacswiki.org/emacs/InferiorEmacsLispMode][EmacsWiki: Inferior Emacs Lisp Mode]]
     
   M-x load-library foo でライブラリをロード
 
** Eval
   - eval-buffer
   - eval-region
   - eval-last-sexp C-x C-e

   参考:
   - [[http://shuzo-kino.hateblo.jp/entry/2013/10/27/153038][emacs-lisp を反映するときのコマンド一覧 - Bye Bye Moore]]

   eshell を inf として利用する.
   - [[http://futurismo.biz/archives/2894][Emacs での eval について調べてみた | Futurismo]]

#+begin_src emacs-lisp
(defun my-inf-elisp ()
  (interactive)
  (eval-buffer)
  (if (one-window-p)
    (split-window))
  (other-window 1)
  (eshell)
)
(define-key emacs-lisp-mode-map (kbd "C-c S") 'my-inf-elisp)
#+end_src

** lispxmp
   評価結果を横に出す.
   - [[http://d.hatena.ne.jp/rubikitch/20090313/lispxmp][xmpfilter のような自動注釈を Emacs Lisp で実現する lispxmp.el をリリース]]
   - https://github.com/emacsmirror/lispxmp

   使い方.
   - M-; M-; で ; =>を挿入
   - lispxmp で 評価

#+begin_src emacs-lisp
(use-package lispxmp 
  :bind ("C-c C-d" . lispxmp))
#+end_src

** Tips
  以下を評価するとスタック情報がみえる.

#+begin_src emacs-lisp
;; (setq debug-on-error t)
#+end_src

* Scheme
  SICP 用に設定.
  - [[http://ja.wikipedia.org/wiki/Scheme][Scheme - Wikipedia]]

** Gauche 
   Scheme 処理系をインストール.(ゴーシュ)
   - [[http://practical-scheme.net/gauche/index-j.html][Gauche - A Scheme Implementation]]

#+begin_src bash
gosh -V
#+end_src

#+RESULTS:
| Gauche scheme shell | version 0.9.4 [utf-8 | pthreads] | x86_64-unknown-linux-gnu |

** scheme-mode
  Default で Emacs にはいっている. 以下の設定を参考にした.
  - [[http://karetta.jp/book-node/gauche-hacks/004640][Emacs から Gauche を使う - karetta.jp]]
  - [[https://hayate2255.wordpress.com/2013/02/03/windows7-emacs-gauche-%E3%81%AE%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/][Windows + Emacs + Gauche の環境構築 | 小さいモノは美しい]]

#+begin_src emacs-lisp
(use-package scheme
  :commands (scheme-mode run-scheme)
  :config
  (setq process-coding-system-alist
	(cons '("gosh" utf-8 . utf-8) process-coding-system-alist))
  (setq scheme-program-name "gosh -i")

  ;; 別のウィンドウに gosh を動作させる
  (defun scheme-other-window ()
    "Run Gauche on other window"
    (interactive)
    (split-window-horizontally (/ (frame-width) 2))
    (let ((buf-name (buffer-name (current-buffer))))
      (scheme-mode)
      (switch-to-buffer-other-window
       (get-buffer-create "*scheme*"))
      (run-scheme scheme-program-name)
      (switch-to-buffer-other-window
       (get-buffer-create buf-name))))
  
  (define-key scheme-mode-map (kbd "C-c S") 'scheme-other-window)
  )
#+end_src

** SICP を info で読む
  - [[http://d.hatena.ne.jp/mahata/20080921/1221958711][Emacs の info として SICP を読む - 大切なものは目に見えない - mahata の日記 (はてなブランチ)]]
  - [[http://d.hatena.ne.jp/tequilasunset/20110220/p4][SICP 読むための設定とか - Clipboard]]
  - [[http://d.hatena.ne.jp/khiker/20070406/sicp][計算機プログラムの構造と解 - とりあえず暇だったし何となく始めたブログ]]

#+begin_src bash
# sicp.info 取得
wget http://www.neilvandyke.org/sicp-texi/sicp.info.gz
gunzip sicp.info.gz

# /usr/local/info に sicp.info をコピー.
$ sudo mkdir -p /usr/local/info
$ sudo cp sicp.info /usr/local/info

# dir ファイルを編集.
$ sudo emacs /usr/local/share/info/dir

# 次の二行を追記.
 The Algorithmic Language Scheme
 * SICP : (sicp.info). Structure and Interpretation of Computer Programs.
#+end_src

** 未使用
*** gosh-mode
    scheme-mode の拡張.
    - [[http://d.hatena.ne.jp/mhayashi1120/20110103/1294013522][gosh-mode.el - まにっき]]
    - https://github.com/mhayashi1120/Emacs-gosh-mode

    scheme-mode を継承しているので, 基本的な操作は変わらないそうだ.
   
    el-get で取得. リボジトリから取得後に make && make install

 #+begin_src emacs-lisp
(use-package gosh-config :disabled t)
 #+end_src

    M-x gosh-run で gosh が起動すれば OK.

    scheme-mode に比べて情報がすくないのと,
    すごさがわからないので, ひとまずは scheme-mode を利用することにした.
  
    なれてきたらそのうちもう一度挑戦する.

*** scheme-complete
    auto-complete で補完をすることができる.
    デフォルト設定で, そこそこの補完候補が出る.

    scheme-complete というものもあるそうなので,気休め程度に導入.

    本家のサーバ落ちた?? github の mirror より取得.
    - https://github.com/emacsmirror/scheme-complete

    以下を参考にして, 
    auto-complete の source に scheme-complete の情報源を加える.
    - [[http://d.hatena.ne.jp/kobapan/20091205/1259972925][scheme-complete.el を auto-complete.el で使う - ガットポンポコ]]
  
    メンテされていないのと, auto-complete で何とかなるので削除.

 #+begin_src emacs-lisp
;; (autoload 'scheme-smart-complete "scheme-complete" nil t)
;; (autoload 'scheme-get-current-symbol-info "scheme-complete" nil t)

;; (eval-after-load 'scheme
;;   '(define-key scheme-mode-map "\e\t" 'scheme-smart-complete))

;; scheme-mode-hook
;; (defvar ac-source-scheme
;;   '((candidates
;;      . (lambda ()
;;          (require 'scheme-complete)
;;          (all-completions ac-target (car (scheme-current-env))))))
;;   "Source for scheme keywords.")

;; (add-hook 'scheme-mode-hook
;;           '(lambda ()
;;              (make-local-variable 'ac-sources)
;;              (setq ac-sources (append ac-sources '(ac-source-scheme)))))
 #+end_src

*** eldoc
    - [[http://yohshiy.blog.fc2.com/blog-entry-251.html][Emacs Lisp モードを便利にする機能 3 選 (auto-complete, eldoc, rainbow-delimiters) | プログラマーズ雑記帳]]
    - [[http://www29.atwiki.jp/sicpstudygroup/pages/45.html][sicpstudygroup @ ウィキ - 環境設定例集]]

    scheme の eldoc は scheme-complete と合わせて利用するらしいが,
    eldoc error void-function eldoc-current-symbol とでてエラーする.

    #+begin_src emacs-lisp
;; (require 'eldoc-extension)
;; (add-hook 'scheme-mode-hook
;;   (lambda ()
;;     ;; Gauche の場合, 次の 2 個の変数を設定しておいたほうがよいのかも.
;;     (setq default-scheme-implementation 'gauche)
;;     (setq *current-scheme-implementation* 'gauche)
;;     ;; eldoc-mode
;;     (set (make-local-variable 'eldoc-documentation-function)
;; 	 'scheme-get-current-symbol-info)
;;     (eldoc-mode t)
;;     )
;;   )
;; (setq lisp-indent-function 'scheme-smart-indent-function)
 #+end_src

*** flymake 設定
    glint というものがあるらしい. 
    gauche 0.8.13 でしか動作しないようなので試していない.
    - [[http://www.koguro.net/prog/codecheck/index-j.html][glint]]
    - [[http://d.hatena.ne.jp/higepon/20080309/1205043148][小黒さんの Scheme における glint + Emacs + flymake を試してみた - Higepon's blog]]

** Scheme 文法
   こんなのみつけた.
   - [[http://www.sampou.org/scheme/t-y-scheme/t-y-scheme-Z-H-1.html][独習 Scheme 三週間 Teach Yourself Scheme in Fixnum Days]]

** Bookmarks
  - [[http://qiita.com/da1/items/02f7d2f157c7145d58f2][Scheme - SICP を読むためにやっておくと便利かもしれないこと - Qiita]]  

